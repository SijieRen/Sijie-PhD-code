[["TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Person(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tRose is a human or Jerry is a manager.\nFOL:\tHuman(Rose) | Manager(Jerry)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tRose is a human or Jerry is a manager.\nFOL:\tHuman(Rose) | Manager(Jerry)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Person(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tRose is a human or Jerry is a manager.\nFOL:\tHuman(Rose) | Manager(Jerry)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tRose is a human or Jerry is a manager.\nFOL:\tHuman(Rose) | Manager(Jerry)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Person(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tRose is a human or Jerry is a manager.\nFOL:\tHuman(Rose) | Manager(Jerry)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tRose is a human or Jerry is a manager.\nFOL:\tHuman(Rose) | Manager(Jerry)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Person(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\t(Young(Rose) | Student(Rose))\nTEXT:\tRose is a human or Jerry is a manager.\nFOL:\t(Human(Rose) | Manager(Jerry))\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tRose is a human or Jerry is a manager.\nFOL:\tHuman(Rose) | Manager(Jerry)\nANSWER:\tTrue\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Person(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tRose is a human or Jerry is a manager.\nFOL:\tHuman(Rose) | Manager(Jerry)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Person(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tRose is a human or Jerry is a manager.\nFOL:\tHuman(Rose) | Manager(Jerry)\nANSWER:\tTrue\n"], ["TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, PeoplesRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousNationalCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocated(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tall x. (University(x, Beijing) -> TopRank(x, AsiaPacificAndWorld))\nTEXT:\tBeijing is located in southern China.\nFOL:\tLocated(Beijing, SouthernChina)\nANSWER:\tFalse\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, People's Republic of China)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousCapitalCity(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocated(Beijing, Northern China)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHostedOlympics(Beijing, Summer, 2008) & HostedParalympics(Beijing, Summer, 2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\t(HostedOlympics(Beijing, Summer) & HostedOlympics(Beijing, Winter)) & (HostedParalympics(Beijing, Summer) & HostedParalympics(Beijing, Winter))\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\texists x. (University(x, Beijing) & BestIn(x, Asia-Pacific & World))\nTEXT:\tBeijing is located in southern China.\nFOL:\tLocated(Beijing, Southern China)\nANSWER:\tFalse\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, People's Republic of China)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocation(Beijing, Northern China)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, 2008SummerOlympics) & Hosted(Beijing, 2008SummerParalympics)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tall x. (UniversityInBeijing(x) -> ConsistentlyRankAmongBest(x, AsiaPacificAndWorld))\nTEXT:\tBeijing is located in southern China.\nFOL:\tLocation(Beijing, Southern China)\nANSWER:\tFalse\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, PeoplesRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousNationalCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocatedIn(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympicsGames2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tForAll x, Exists y (University(y, Beijing) -> Rank(y, BestInAsiaPacific) & Rank(y, BestInTheWorld))\nTEXT:\tBeijing is located in southern China.\nFOL:\tLocatedIn(Beijing, SouthernChina)\nANSWER:\tFalse\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, PeoplesRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousNationalCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocatedIn(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\texists x. (University(x, Beijing) & TopRank(x, AsiaPacificAndWorld))\nTEXT:\tBeijing is located in southern China.\nFOL:\tLocatedIn(Beijing, SouthernChina)\nANSWER:\tFalse\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, People'sRepublicofChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousNationalCapitalCity(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocated(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, 2008SummerOlympics) & Hosted(Beijing, 2008SummerParalympicsGames)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\texists x. (University(x) & In(x, Beijing) & BestIn(x, AsiaPacific) & BestIn(x, World))\nTEXT:\tBeijing is located in southern China.\nFOL:\tLocated(Beijing, SouthernChina)\nANSWER:\tFalse\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, PeoplesRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocatedIn(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\texists x. (University(x) & In(x, Beijing) & RankAmongBest(x, AsiaPacific) & RankAmongBest(x, World))\nTEXT:\tBeijing is located in southern China.\nFOL:\tLocatedIn(Beijing, SouthernChina)\nANSWER:\tFalse\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, PeoplesRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocatedIn(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympicsGames2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tTopUniversities(Beijing, AsiaPacific) & TopUniversities(Beijing, World)\nTEXT:\tBeijing is located in southern China.\nFOL:\tLocatedIn(Beijing, SouthernChina)\nANSWER:\tFalse\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, People'sRepublicofChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocatedIn(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tTopUniversities(Beijing)\nTEXT:\tBeijing is located in southern China.\nFOL:\tLocatedIn(Beijing, SouthernChina)\nANSWER:\tFalse\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, PeoplesRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocatedIn(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\texists x. (In(Beijing, x) & University(x) & AmongBest(x, AsiaPacificAndWorld))\nTEXT:\tBeijing is located in southern China.\nFOL:\tLocatedIn(Beijing, SouthernChina)\nANSWER:\tFalse\n"], ["TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\texists x. (InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\tall x. (MonkeypoxVirus(x) -> (Animal(x) | Human(x)))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tall x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\nTEXT:\tPeople feel tired when they get a flu.\nFOL:\tall x. (Flu(x) -> FeelingTired(x))\nTEXT:\tNo one gets flu.\nFOL:\tnot exists x. (Flu(x))\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tall x. (Monkeypox(x) -> InfectiousDisease(x) & Cause(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. (MonkeypoxVirus(x) & Animal(x) & Include(x, Humans))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tall x. (Monkeypox(x) -> Include(Symptoms(x), [Fever, Headache, MusclePains, FeelingTired]))\nTEXT:\tPeople feel tired when they get a flu.\nFOL:\tall x. (Flu(x) -> FeelTired(x))\nTEXT:\tNo one gets flu.\nFOL:\t-(exists x. Flu(x))\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tall x. (Monkeypox(x) -> InfectiousDisease(x) & causedBy(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\tall x. ((Animal(x) | Human(x)) -> CanOccur(MonkeypoxVirus, x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tall x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\nTEXT:\tPeople feel tired when they get a flu.\nFOL:\tall x. (Flu(x) -> FeelingTired(x))\nTEXT:\tNo one gets flu.\nFOL:\tall x. (-Flu(x))\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tall x. (Monkeypox(x) -> CausedBy(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. (Animal(x) & Or(Human(x)) & CanOccur(MonkeypoxVirus, x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tall x. (Monkeypox(x) -> IncludesSymptoms(x, [Fever, Headache, MusclePains, FeelingTired]))\nTEXT:\tPeople feel tired when they get a flu.\nFOL:\tall x. (Human(x) & Flu(x) -> FeelingTired(x))\nTEXT:\tNo one gets flu.\nFOL:\tall x. (Human(x) -> -Flu(x))\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tExists x. (Disease(x) & CausedBy(x, MonkeypoxVirus) & Infectious(x))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\tCanOccur(MonkeypoxVirus, Animals) & CanOccur(MonkeypoxVirus, Humans)\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tSymptoms(Monkeypox) = {Fever, Headache, MusclePains, FeelingTired}\nTEXT:\tPeople feel tired when they get a flu.\nFOL:\tall x. (GetsFlu(x) -> FeelsTired(x))\nTEXT:\tNo one gets flu.\nFOL:\tall x. (-GetsFlu(x))\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tMonkeypox(InfectiousDisease) & Cause(MonkeypoxVirus, Monkeypox)\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\tall x. (CertainAnimals(x) | Human(x) -> CanOccur(MonkeypoxVirus, x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tall x. (Monkeypox(x) -> Include(x, Symptoms))\nTEXT:\tPeople feel tired when they get a flu.\nFOL:\tall x. (Human(x) & Have(x, Flu) -> Feel(x, Tired))\nTEXT:\tNo one gets flu.\nFOL:\tall x. (-Have(x, Flu))\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tall x. (Monkeypox(x) -> MonkeypoxVirus(x))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. (MonkeypoxVirus(x) & Animal(x)) | Human(x)\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tall x. (Monkeypox(x) -> Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\nTEXT:\tPeople feel tired when they get a glu.\nFOL:\tall x. (Flu(x) -> FeelingTired(x))\nTEXT:\tNo one gets flu.\nFOL:\t- exists x. (Flu(x))\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\texists x. (InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus) & Monkeypox(x))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. exists y. (OccursIn(x, y) & MonkeypoxVirus(x) & Animals(y) | Humans(y))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\texists x. (SymptonsOf(x, Monkeypox) & Include(x, Fever, Headache, MusclePains, FeelingTired))\nTEXT:\tPeople feel tired when they get a flu.\nFOL:\tall x. (GetFlu(x) -> FeelTired(x))\nTEXT:\tNo one gets flu.\nFOL:\t~exists x. (GetFlu(x))\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tall x. (Monkeypox(x) -> InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\tall x. (MonkeypoxVirus(x) -> OccurIn(x, Animals) | OccurIn(x, Humans))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tall x. (Monkeypox(x) -> Symptoms(x, Fever | Headache | MusclePains | FeelingTired))\nTEXT:\tPeople feel tired when they get a glu.\nFOL:\tall x. (Human(x) & Flu(x) -> FeelingTired(x))\nTEXT:\tNo one gets flu.\nFOL:\t-all x. (Human(x) -> Flu(x))\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tall x. (Monkeypox(x) -> InfectiousDisease(x) & Cause(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. (MonkeypoxVirus(x) & Animals(x)) | Humans(x)\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tall x. (Monkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT:\tPeople feel tired when they get a flu.\nFOL:\tall x. (Flu(x) -> FeelingTired(x))\nTEXT:\tNo one gets flu.\nFOL:\tall x. (-Flu(x))\nANSWER:\tUncertain\n"], ["TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tPolitician(HeinrichScmidt) & German(HeinrichScmidt) & Nazi(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMember(HeinrichScmidt, PrussianStateParliament) & Member(HeinrichScmidt, NaziReichstag)\nTEXT:\tHeinrich Schmidt was either German or Russian.\nFOL:\tGerman(HeinrichScmidt) | Russian(HeinrichScmidt)\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tPolitician(HeinrichScmidt) & German(HeinrichScmidt) & Nazi(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMember(HeinrichScmidt, PrussianStateParliament) & Member(HeinrichScmidt, NaziReichstag)\nTEXT:\tHeinrich Schmidt was either German or Russian.\nFOL:\tGerman(HeinrichScmidt) | Russian(HeinrichScmidt)\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tPolitician(HeinrichScmidt) & German(HeinrichScmidt) & Nazi(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMember(HeinrichScmidt, PrussianStateParliament) & Member(HeinrichScmidt, NaziReichstag)\nTEXT:\tHeinrich Schmidt was either German or Russian.\nFOL:\tGerman(HeinrichScmidt) | Russian(HeinrichScmidt)\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tNaziGermanPolitician(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMember(HeinrichScmidt, PrussianStateParliament) & Member(HeinrichScmidt, NaziReichstag)\nTEXT:\tHeinrich Schmidt was either German or Russian.\nFOL:\tGerman(HeinrichScmidt) | Russian(HeinrichScmidt)\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tGerman(HeinrichScmidt) & Nazi(HeinrichScmidt) & Politician(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOf(HeinrichScmidt, PrussianStateParliament) & MemberOf(HeinrichScmidt, NaziReichstag)\nTEXT:\tHeinrich Schmidt was either German or Russian.\nFOL:\t(German(HeinrichScmidt) & -Russian(HeinrichScmidt)) | (-German(HeinrichScmidt) & Russian(HeinrichScmidt))\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tGermanPolitician(HeinrichSchmidt) & Nazi(HeinrichSchmidt)\nTEXT:\tHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOf(HeinrichSchmidt, PrussianStateParliament) & MemberOf(HeinrichSchmidt, NaziReichstag)\nTEXT:\tHeinrich Schmidt was either German or Russian.\nFOL:\t(German(HeinrichSchmidt) & -Russian(HeinrichSchmidt)) | (-German(HeinrichSchmidt) & Russian(HeinrichSchmidt))\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tPolitician(HeinrichScmidt) & German(HeinrichScmidt) & Nazi(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOfPrussianStateParliament(HeinrichScmidt) & MemberOfNaziReichstag(HeinrichScmidt)\nTEXT:\tHeinrich Schmidt was either German or Russian.\nFOL:\tGerman(HeinrichScmidt) | Russian(HeinrichScmidt)\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tPolitician(HeinrichSchmidt) & Nazi(HeinrichSchmidt) & German(HeinrichSchmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMember(HeinrichSchmidt, PrussianStateParliament) & Member(HeinrichSchmidt, NaziReichstag)\nTEXT:\tHeinrich Schmidt was either German or Russian.\nFOL:\tGerman(HeinrichSchmidt) | Russian(HeinrichSchmidt)\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tGerman(HeinrichScmidt) & NaziPolitician(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOf(HeinrichScmidt, PrussianStateParliament) & MemberOf(HeinrichScmidt, NaziReichstag)\nTEXT:\tHeinrich Schmidt was either German or Russian.\nFOL:\tGerman(HeinrichScmidt) | Russian(HeinrichScmidt)\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tGerman(HeinrichScmidt) & NaziPolitician(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOfPrussianStateParliament(HeinrichScmidt) & MemberOfNaziReichstag(HeinrichScmidt)\nTEXT:\tHeinrich Schmidt was either German or Russian.\nFOL:\tGerman(HeinrichSchmidt) | Russian(HeinrichSchmidt)\nANSWER:\tTrue\n"], ["TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi neither barks nor is a dog.\nFOL:\t-Barks(KiKi) & -Dog(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Animal(x) & Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Animal(x) & Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Animal(x) & Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t((Jumps(KiKi) & -HasLegs(KiKi)) | (-Jumps(KiKi) & HasLegs(KiKi)))\nTEXT:\tKiKi neither barks nor is a dog.\nFOL:\t-Barks(KiKi) & -Dog(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Animal(x) & Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Animal(x) & Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Animal(x) & Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t((Animal(KiKi) & -Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi)))\nTEXT:\tKiKi neither barks nor is a dog.\nFOL:\t(-Barks(KiKi) & -Dog(KiKi))\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Animal(x) & Barks(x) -> NotLike(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Animal(x) & Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Animal(x) & Jumps(x) -> Like(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Animal(x) & Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi neither barks nor is a dog.\nFOL:\t-Barks(KiKi) & -Dog(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Animal(x) & Barks(x) -> NotLikes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Animal(x) & Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Animal(x) & Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Animal(x) & Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi neither barks nor is a dog.\nFOL:\t-Barks(KiKi) & -Dog(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi neither barks nor is a dog.\nFOL:\t-Barks(KiKi) & -Dog(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Animal(x) & Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Animal(x) & Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Animal(x) & Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi neither barks nor is a dog.\nFOL:\t(-Barks(KiKi) & -Dog(KiKi))\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Animal(x) & Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Animal(x) & Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Animal(x) & Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t((-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi)))\nTEXT:\tKiKi neither barks nor is a dog.\nFOL:\t(-Barks(KiKi) & -Dog(KiKi))\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Animal(x) & Barks(x) -> NotLikes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Animal(x) & Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Animal(x) & Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Animal(x) & Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi neither barks nor is a dog.\nFOL:\t(-Barks(KiKi) & -Dog(KiKi))\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t((-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi)))\nTEXT:\tKiKi neither barks nor is a dog.\nFOL:\t-Barks(KiKi) & -Dog(KiKi)\nANSWER:\tUncertain\n"], ["TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (Printed(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> Printed(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is printed text.\nFOL:\tPrinted(1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is printed text.\nFOL:\tPrintedText(1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (DigitalMedia(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> DigitalMedia(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is printed text.\nFOL:\tPrintedText(1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (DigitalMedia(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> DigitalMedia(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is printed text.\nFOL:\tPrintedText(1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (Printed(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> Printed(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is printed text.\nFOL:\tPrinted(1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (DigitalMedia(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> DigitalMedia(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is printed text.\nFOL:\tPrintedText(1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is printed text.\nFOL:\tPrintedText(1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (DigitalMedia(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> DigitalMedia(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is printed text.\nFOL:\tPrintedText(1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (DigitalMedia(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> DigitalMedia(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is printed text.\nFOL:\tPrintedText(1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\tStreamingService(1984) -> HardcoverBook(1984)\nTEXT:\t1984 is printed text.\nFOL:\tPrintedText(1984)\nANSWER:\tUncertain\n"], ["TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (MondayEightPM(x) & GivenOutOnTV(x) & Rose(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (Rose(x) & GivenOutOnTV(x) -> Bachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (Bachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tBreaking Bad is on Monday at 8 pm.\nFOL:\tMondayEightPM(BreakingBad)\nANSWER:\tUncertain\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (Monday8pm(x) & RoseGivenOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RoseGivenOnTV(x) -> Bachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (Bachelor(x) -> PortrayRealLife(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortrayRealLife(x) -> RealityTV(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-BreakingBad(RealityTV)\nTEXT:\tBreaking Bad is on Monday at 8 pm.\nFOL:\tMonday8pm(BreakingBad)\nANSWER:\tUncertain\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (Monday8pm(x) & RosesGivenOutOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tBreaking Bad is on Monday at 8 pm.\nFOL:\tMonday8pm(BreakingBad)\nANSWER:\tUncertain\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (Monday8PM(x) & GivesRoseOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (GivesRoseOnTV(x) -> OnBachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnBachelor(x) -> PortraysRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tBreaking Bad is on Monday at 8 pm.\nFOL:\tMonday8PM(BreakingBad)\nANSWER:\tUncertain\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (MondayAt8pm(x) & RosesGivenOutOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RoseGivenOutOnTV(x) -> Bachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (Bachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tBreaking Bad is on Monday at 8 pm.\nFOL:\tMondayAt8pm(BreakingBad)\nANSWER:\tUncertain\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (MondayAt8pm(x) & RosesGivenOutOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tBreaking Bad is on Monday at 8 pm.\nFOL:\tMondayAt8pm(BreakingBad)\nANSWER:\tUncertain\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (Monday8pm(x) & RosesGivenOutOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RoseGivenOutOnTV(x) -> Bachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (Bachelor(x) -> RealPeopleLives(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (RealPeopleLives(x) -> RealityTV(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTV(BreakingBad)\nTEXT:\tBreaking Bad is on Monday at 8 pm.\nFOL:\tMonday8pm(BreakingBad)\nANSWER:\tUncertain\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (MondayAtEightPM(x) & GivenOutOnTV(x) & Rose(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (Rose(x) & GivenOutOnTV(x) -> Bachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (Bachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tBreaking Bad is on Monday at 8 pm.\nFOL:\tMondayAtEightPM(BreakingBad)\nANSWER:\tUncertain\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (Monday8pm(x) & RosesGivenOutOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnTheBachelor(x) -> PortrayRealLife(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortrayRealLife(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tBreaking Bad is on Monday at 8 pm.\nFOL:\tMonday8pm(BreakingBad)\nANSWER:\tUncertain\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (MondayEightPM(x) & RosesGivenOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RosesGivenOnTV(x) -> Bachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (Bachelor(x) -> PortraysRealLives(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysRealLives(x) -> RealityTV(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTV(BreakingBad)\nTEXT:\tBreaking Bad is on Monday at 8 pm.\nFOL:\tMondayEightPM(BreakingBad)\nANSWER:\tUncertain\n"], ["TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is young.\nFOL:\tYoung(Jerry)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studies or teaches.\nFOL:\tall x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is young.\nFOL:\tYoung(Jerry)\nANSWER:\tTrue\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is young.\nFOL:\tYoung(Jerry)\nANSWER:\tTrue\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studies or teaches.\nFOL:\tall x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is young.\nFOL:\tYoung(Jerry)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is young.\nFOL:\tYoung(Jerry)\nANSWER:\tTrue\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is young.\nFOL:\tYoung(Jerry)\nANSWER:\tTrue\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is young.\nFOL:\tYoung(Jerry)\nANSWER:\tTrue\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is young.\nFOL:\tYoung(Jerry)\nANSWER:\tTrue\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. ((Studies(x) & -Teaches(x)) | (-Studies(x) & Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is young.\nFOL:\tYoung(Jerry)\nANSWER:\tTrue\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is young.\nFOL:\tYoung(Jerry)\nANSWER:\tTrue\n"], ["TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. ((Employee(x) & ScheduleMeeting(x)) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (LunchInCompany(x) -> ScheduleMeeting(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. ((Employee(x) & LunchInCompany(x)) | (Employee(x) & LunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. ((Employee(x) & LunchAtHome(x)) -> WorkRemotely(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. ((Employee(x) & InOtherCountries(x)) -> WorkRemotely(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. ((Manager(x)) -> -WorkRemotely(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames has lunch in the company.\nFOL:\tLunchInCompany(James)\nANSWER:\tUncertain\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Employee(x) & ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (LunchInCompany(x) -> ScheduleMeeting(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & LunchAtHome(x) -> WorkRemotely(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (Employee(x) & InOtherCountry(x) -> WorkRemotely(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorkRemotely(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames has lunch in the company.\nFOL:\tLunchInCompany(James)\nANSWER:\tUncertain\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Employee(x) & ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (HaveLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (HaveLunchInCompany(x) | HaveLunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & HaveLunchAtHome(x) -> WorkRemotely(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (Employee(x) & InOtherCountries(x) -> WorkRemotely(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorkRemotely(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames has lunch in the company.\nFOL:\tHaveLunchInCompany(James)\nANSWER:\tUncertain\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Employee(x) & ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (HaveLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (HaveLunchInCompany(x) | HaveLunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & HaveLunchAtHome(x) -> WorkRemotely(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (Employee(x) & InOtherCountries(x) -> WorkRemotely(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorkRemotely(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames has lunch in the company.\nFOL:\tHaveLunchInCompany(James)\nANSWER:\tUncertain\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. ((Employee(x) & ScheduleMeeting(x, Customers)) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. ((HaveLunchInCompany(x)) -> ScheduleMeeting(x, Customers))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. ((Employee(x)) -> (HaveLunchInCompany(x) | HaveLunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. ((Employee(x) & HaveLunchAtHome(x)) -> WorkRemotely(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. ((Employee(x) & InOtherCountry(x)) -> WorkRemotely(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. ((Manager(x)) -> -WorkRemotely(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames has lunch in the company.\nFOL:\tHaveLunchInCompany(James)\nANSWER:\tUncertain\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Employee(x) & ScheduleMeetingWithCustomers(x) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomers(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (HaveLunchInCompany(x) | HaveLunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & HaveLunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (Employee(x) & InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames has lunch in the company.\nFOL:\tHaveLunchInCompany(James)\nANSWER:\tUncertain\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Employee(x) & ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (HaveLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (HaveLunchInCompany(x) | HaveLunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & HaveLunchAtHome(x) -> WorkRemotely(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (Employee(x) & InOtherCountries(x) -> WorkRemotely(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorkRemotely(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames has lunch in the company.\nFOL:\tHaveLunchInCompany(James)\nANSWER:\tUncertain\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Employee(x) & ScheduleMeetingWithCustomers(x) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomers(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (HaveLunchInCompany(x) | HaveLunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & HaveLunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (Employee(x) & InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames has lunch in the company.\nFOL:\tHaveLunchInCompany(James)\nANSWER:\tUncertain\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Employee(x) & ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (HaveLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (HaveLunchInCompany(x) | HaveLunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & HaveLunchAtHome(x) -> WorkRemotely(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (Employee(x) & InOtherCountries(x) -> WorkRemotely(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorkRemotely(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames has lunch in the company.\nFOL:\tHaveLunchInCompany(James)\nANSWER:\tUncertain\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. ((Employee(x) & ScheduleMeeting(x)) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (HaveLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (HaveLunchInCompany(x) | HaveLunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & HaveLunchAtHome(x) -> WorkRemotely(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. ((Employee(x) & InOtherCountry(x)) -> WorkRemotely(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorkRemotely(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames has lunch in the company.\nFOL:\tHaveLunchInCompany(James)\nANSWER:\tUncertain\n"], ["TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (Monday8pm(x) & RosesGivenOutOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RosesGivenOutOnTV(x) -> Bachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL:\tRosesGivenOutDuring(BreakingBad) -> Monday8pm(BreakingBad)\nANSWER:\tFalse\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (Monday8PM(x) & RosesGivenOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RosesGivenOnTV(x) -> OnTheBachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL:\t(RosesGivenDuring(BreakingBad) -> Monday8PM(BreakingBad))\nANSWER:\tUncertain\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (Monday8pm(x) & RosesGivenOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RosesGivenOnTV(x) -> OnTheBachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysRealPeople(x) -> RealityTVShows(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShows(BreakingBad)\nTEXT:\tIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL:\tRosesGivenDuring(BreakingBad) -> Monday8pm(BreakingBad)\nANSWER:\tUncertain\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (MondayAt8PM(x) & RosesGivenOutOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysLivesOfRealPeople(x) -> RealityTVShows(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL:\tall x. (RosesGivenOutDuring(BreakingBad, x) -> MondayAt8PM(x))\nANSWER:\tFalse\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (Monday8pm(x) & RosesGivenOutOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RosesGivenOutOnTV(x) -> Bachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL:\tRosesGivenOutDuring(BreakingBad) -> Monday8pm(BreakingBad)\nANSWER:\tUncertain\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (Monday8pm(x) & RosesGivenOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RoseGivenOnTV(x) -> OnTheBachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysLivesOfRealPeople(x) -> RealityTV(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-BreakingBad(RealityTV)\nTEXT:\tIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL:\tall x. (RoseGivenDuringBreakingBad(x) -> Monday8pm(x))\nANSWER:\tUncertain\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (MondayEightPM(x) & GivesOutOnTV(x, Roses))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (GivesOutOnTV(x, Roses) -> OnTheBachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-TVRealityShow(BreakingBad)\nTEXT:\tIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL:\tGivesOutDuring(BreakingBad, Roses) -> MondayEightPM(BreakingBad)\nANSWER:\tUncertain\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (MondayAt8pm(x) & TV(x) & RosesGivenOut(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (TV(x) & RosesGivenOut(x) -> Bachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (Bachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL:\tRosesGivenOut(BreakingBad) -> MondayAt8pm(BreakingBad)\nANSWER:\tUncertain\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (MondayAt8pm(x) & RoseGivenOutOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RoseGivenOutOnTV(x) -> Bachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (Bachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL:\tall x. (RoseGivenOutDuring(x, BreakingBad) -> MondayAt8pm(x))\nANSWER:\tUncertain\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (Monday8pm(x) & RosesGivenOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RosesGivenOnTV(x) -> Bachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (Bachelor(x) -> PortrayRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortrayRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL:\tall x. (RosesGivenDuring(x, BreakingBad) -> Monday8pm(x))\nANSWER:\tUncertain\n"], ["TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -ComputerScienceDept(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobUniversity(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (DatabaseCourse(x) -> ComputerScienceDept(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobUniversity(Jack) & -WorkInLab(Jack)\nTEXT:\tJames either takes the database course or has a part-time job offered by the university.\nFOL:\t((DatabaseCourse(James) & -PartTimeJobUniversity(James)) | (-DatabaseCourse(James) & PartTimeJobUniversity(James)))\nANSWER:\tTrue\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobUniversity(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobUniversity(Jack) & -WorkInLab(Jack)\nTEXT:\tJames either takes the database course or has a part-time job offered by the university.\nFOL:\tDatabaseCourse(James) | PartTimeJobUniversity(James)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInTheLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (HavePartTimeJob(x) -> WorkInTheLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInTheLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInTheLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-HavePartTimeJob(Jack) & -WorkInTheLab(Jack)\nTEXT:\tJames either takes the database course or has a part-time job offered by the university.\nFOL:\tTakeDatabaseCourse(James) | HavePartTimeJob(James)\nANSWER:\tTrue\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (LibraryWorker(x) -> -ComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJob(x) -> LibraryWorker(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (LabWorker(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tLabWorker(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJob(Jack) & -LabWorker(Jack)\nTEXT:\tJames either takes the database course or has a part-time job offered by the university.\nFOL:\tDatabaseCourse(James) | PartTimeJob(James)\nANSWER:\tTrue\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobByUniversity(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobByUniversity(Jack) & -WorkInLab(Jack)\nTEXT:\tJames either takes the database course or has a part-time job offered by the university.\nFOL:\tTakeDatabaseCourse(James) | PartTimeJobByUniversity(James)\nANSWER:\tTrue\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (Student(x) & WorkInLibrary(x) -> -FromCSDept(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (Student(x) & PartTimeJob(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (Student(x) & TakeDatabaseCourse(x) -> FromCSDept(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (Student(x) & InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (Student(x) & WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tStudent(James) & WorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJob(Jack) & -WorkInLab(Jack)\nTEXT:\tJames either takes the database course or has a part-time job offered by the university.\nFOL:\tTakeDatabaseCourse(James) | PartTimeJob(James)\nANSWER:\tTrue\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobByUniversity(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobByUniversity(Jack) & -WorkInLab(Jack)\nTEXT:\tJames either takes the database course or has a part-time job offered by the university.\nFOL:\tTakeDatabaseCourse(James) | PartTimeJobByUniversity(James)\nANSWER:\tTrue\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (Student(x) & WorkInLibrary(x) -> -FromCSDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (Student(x) & PartTimeJob(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (Student(x) & TakeDatabaseCourse(x) -> FromCSDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (Student(x) & InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (Student(x) & WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tStudent(James) & WorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJob(Jack) & -WorkInLab(Jack)\nTEXT:\tJames either takes the database course or has a part-time job offered by the university.\nFOL:\t((TakeDatabaseCourse(James) & -PartTimeJob(James)) | (-TakeDatabaseCourse(James) & PartTimeJob(James)))\nANSWER:\tTrue\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobUniversity(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobUniversity(Jack) & -WorkInLab(Jack)\nTEXT:\tJames either takes the database course or has a part-time job offered by the university.\nFOL:\t(DatabaseCourse(James) | PartTimeJobUniversity(James))\nANSWER:\tTrue\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (StudentInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobFromUniversity(x) -> StudentInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobFromUniversity(Jack) & -WorkInLab(Jack)\nTEXT:\tJames either takes the database course or has a part-time job offered by the university.\nFOL:\tTakeDatabaseCourse(James) | PartTimeJobFromUniversity(James)\nANSWER:\tUncertain\n"], ["TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\texists x. (ProfessionalWrestlingStable(x) & FormedIn(x, WWE) & Is(x, DiamondMine))\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeudWith(Imperium, DiamondMine)\nTEXT:\tImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL:\tall x. (ProfessionalWrestlingStable(x) & Includes(x, IvyNile) -> -FeudWith(Imperium, x))\nANSWER:\tFalse\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProfessionalWrestlingStable(DiamondMine) & FormedIn(DiamondMine, WWE)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL:\t-Exists x. (ProfessionalWrestlingStable(x) & Includes(x, IvyNile) & Feud(Imperium, x))\nANSWER:\tFalse\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProfessionalWrestlingStable(DiamondMine)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL:\t-Exists x. (ProfessionalWrestlingStable(x) & Includes(x, IvyNile) & Feud(Imperium, x))\nANSWER:\tFalse\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tWrestlingStable(DiamondMine) & FormedIn(DiamondMine, WWE)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL:\t-Exists x. (WrestlingStable(x) & Includes(x, IvyNile) & Feud(Imperium, x))\nANSWER:\tFalse\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProfessionalWrestlingStable(DiamondMine)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL:\t-Exists x. (ProfessionalWrestlingStable(x) & Includes(x, IvyNile) & Feud(Imperium, x))\nANSWER:\tFalse\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tall x. (DiamondMine(x) -> WrestlingStable(x) & FormedIn(x, WWE))\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL:\tall x. ((WrestlingStable(x) & Includes(x, IvyNile)) -> -Feud(Imperium, x))\nANSWER:\tFalse\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProWrestlingStable(DiamondMine) & FormedIn(DiamondMine, WWE)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL:\t-Exists x. (ProWrestlingStable(x) & Includes(x, IvyNile) & Feud(Imperium, x))\nANSWER:\tFalse\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tWrestlingStable(DiamondMine) & FormedIn(DiamondMine, WWE)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL:\tall x. (WrestlingStable(x) & Includes(x, IvyNile) -> -Feud(Imperium, x))\nANSWER:\tFalse\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProfessionalWrestlingStable(DiamondMine)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL:\t-Exists x. (ProfessionalWrestlingStable(x) & Includes(x, IvyNile) & Feud(Imperium, x))\nANSWER:\tFalse\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProfessionalWrestlingStable(DiamondMine) & FormedIn(DiamondMine, WWE)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL:\t-Exists x. (ProfessionalWrestlingStable(x) & Includes(x, IvyNile) & Feud(Imperium, x))\nANSWER:\tFalse\n"], ["TEXT:\tThe Olympic games is a sporting event.\nFOL:\tSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastPlace(OlympicGames, Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWinMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe last Olympic games were not in Tokyo.\nFOL:\t-LastPlace(OlympicGames, Tokyo)\nANSWER:\tFalse\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tOlympicGames(SportingEvent)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastOlympicGames(Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe last Olympic games were not in Tokyo.\nFOL:\t\u00acLastOlympicGames(Tokyo)\nANSWER:\tFalse\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLast(OlympicGames, Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe last Olympic games were not in Tokyo.\nFOL:\t-Last(OlympicGames, Tokyo)\nANSWER:\tFalse\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastOlympicGames(Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe last Olympic games were not in Tokyo.\nFOL:\t-LastOlympicGames(Tokyo)\nANSWER:\tFalse\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastOlympicGames(Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe last Olympic games were not in Tokyo.\nFOL:\t-LastOlympicGames(Tokyo)\nANSWER:\tFalse\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tIsSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastEvent(OlympicGames, Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe last Olympic games were not in Tokyo.\nFOL:\t-LastEvent(OlympicGames, Tokyo)\nANSWER:\tFalse\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastOlympicGames(Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe last Olympic games were not in Tokyo.\nFOL:\t-LastOlympicGames(Tokyo)\nANSWER:\tFalse\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tOlympicGames(SportingEvent)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastOlympicGames(Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe last Olympic games were not in Tokyo.\nFOL:\t-LastOlympicGames(Tokyo)\nANSWER:\tFalse\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\texists x. (OlympicGames(x) & SportingEvent(x))\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastOlympicGames(Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe last Olympic games were not in Tokyo.\nFOL:\t-LastOlympicGames(Tokyo)\nANSWER:\tFalse\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tall x. (OlympicGames(x) -> SportingEvent(x))\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastOlympicGames(Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe last Olympic games were not in Tokyo.\nFOL:\t-LastOlympicGames(Tokyo)\nANSWER:\tFalse\n"], ["TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi barks and is a dog.\nFOL:\tBarks(KiKi) & Dog(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> NotLike(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Like(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi barks and is a dog.\nFOL:\tBarks(KiKi) & Dog(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Animal(x) & Barks(x) -> NotLike(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Animal(x) & Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Animal(x) & Jumps(x) -> Like(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Animal(x) & Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi barks and is a dog.\nFOL:\tBarks(KiKi) & Dog(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi barks and is a dog.\nFOL:\tBarks(KiKi) & Dog(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi barks and is a dog.\nFOL:\tBarks(KiKi) & Dog(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi barks and is a dog.\nFOL:\tBarks(KiKi) & Dog(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Animal(x) & Barks(x) -> NotLikes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Animal(x) & Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Animal(x) & Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi barks and is a dog.\nFOL:\tBarks(KiKi) & Dog(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi barks and is a dog.\nFOL:\tBarks(KiKi) & Dog(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Animal(x) & Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Animal(x) & Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Animal(x) & Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Animal(x) & Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi barks and is a dog.\nFOL:\tBarks(KiKi) & Dog(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi barks and is a dog.\nFOL:\tBarks(KiKi) & Dog(KiKi)\nANSWER:\tUncertain\n"], ["TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlaysFor(x, y))\nTEXT:\tRobert Lewandowski is a star.\nFOL:\tStar(RobertLewandowski)\nANSWER:\tUncertain\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a star.\nFOL:\tStar(RobertLewandowski)\nANSWER:\tUncertain\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a star.\nFOL:\tStar(RobertLewandowski)\nANSWER:\tUncertain\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a star.\nFOL:\tStar(RobertLewandowski)\nANSWER:\tUncertain\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a star.\nFOL:\tStar(RobertLewandowski)\nANSWER:\tUncertain\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a star.\nFOL:\tStar(RobertLewandowski)\nANSWER:\tUncertain\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a star.\nFOL:\tStar(RobertLewandowski)\nANSWER:\tUncertain\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a star.\nFOL:\tStar(RobertLewandowski)\nANSWER:\tUncertain\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a star.\nFOL:\tStar(RobertLewandowski)\nANSWER:\tUncertain\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a star.\nFOL:\tStar(RobertLewandowski)\nANSWER:\tUncertain\n"], ["TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. ((Studies(x) & -Teaches(x)) | (-Studies(x) & Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\t((Young(Rose) & -Student(Rose)) | (-Young(Rose) & Student(Rose)))\nTEXT:\tJerry is not young.\nFOL:\t-Young(Jerry)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\t(Young(Rose) | Student(Rose))\nTEXT:\tJerry is not young.\nFOL:\t-Young(Jerry)\nANSWER:\tTrue\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is not young.\nFOL:\t-Young(Jerry)\nANSWER:\tTrue\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studies or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is not young.\nFOL:\t-Young(Jerry)\nANSWER:\tTrue\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studies or teaches.\nFOL:\tall x. ((Studies(x) & -Teaches(x)) | (-Studies(x) & Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is not young.\nFOL:\t-Young(Jerry)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is not young.\nFOL:\t-Young(Jerry)\nANSWER:\tTrue\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is not young.\nFOL:\t-Young(Jerry)\nANSWER:\tTrue\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is not young.\nFOL:\t-Young(Jerry)\nANSWER:\tTrue\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is not young.\nFOL:\t-Young(Jerry)\nANSWER:\tTrue\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tJerry is not young.\nFOL:\t-Young(Jerry)\nANSWER:\tTrue\n"], ["TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nANSWER:\tUncertain\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nANSWER:\tUncertain\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nANSWER:\tUncertain\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nANSWER:\tUncertain\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nANSWER:\tUncertain\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammals(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammals(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Humans(x) -> HaveTeeth(x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Humans(x) -> Mammals(x))\nANSWER:\tUncertain\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nANSWER:\tUncertain\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nANSWER:\tUncertain\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nANSWER:\tUncertain\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammals(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammals(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Humans(x) -> HaveTeeth(x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Humans(x) -> Mammals(x))\nANSWER:\tUncertain\n"], ["TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tNewVesselPress(PublishingHouse) & SpecializesIn(NewVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tBook(NeapolitanChronicles) & PublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tBook(PalaceOfFlies) & PublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tHarry Potter was published by New Vessel Press.\nFOL:\tPublishedBy(HarryPotter, NewVesselPress)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> TranslatedIntoEnglish(x))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tHarry Potter was published by New Vessel Press.\nFOL:\tPublishedBy(HarryPotter, NewVesselPress)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\texists x. (PublishingHouse(x) & Specializes(x, TranslatingForeignLiteratureIntoEnglish) & Name(x, NewVesselPress))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tHarry Potter was published by New Vessel Press.\nFOL:\tPublishedBy(HarryPotter, NewVesselPress)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tTranslateIntoEnglish(NewVesselPress)\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (Published(NewVesselPress, x) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublished(NewVesselPress, NeapolitanChronicles)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublished(NewVesselPress, PalaceOfFlies)\nTEXT:\tHarry Potter was published by New Vessel Press.\nFOL:\tPublished(NewVesselPress, HarryPotter)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (PublishingHouse(x) & NewVesselPress(x) -> SpecializesIn(x, TranslatingForeignLiteratureIntoEnglish))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tHarry Potter was published by New Vessel Press.\nFOL:\tPublishedBy(HarryPotter, NewVesselPress)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (NewVesselPress(x) -> PublishingHouse(x) & SpecializesIn(x, TranslatingForeignLiteratureIntoEnglish))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tHarry Potter was published by New Vessel Press.\nFOL:\tPublishedBy(HarryPotter, NewVesselPress)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> TranslatedIntoEnglish(x))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> EnglishBook(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tHarry Potter was published by New Vessel Press.\nFOL:\tPublishedBy(HarryPotter, NewVesselPress)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (NewVesselPress(x) -> PublishingHouse(x) & SpecializesIn(x, TranslatingForeignLiteratureIntoEnglish))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (Published(NewVesselPress, x) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublished(NewVesselPress, NeapolitanChronicles)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublished(NewVesselPress, PalaceOfFlies)\nTEXT:\tHarry Potter was published by New Vessel Press.\nFOL:\tPublished(NewVesselPress, HarryPotter)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\texists x. (PublishingHouse(x) & TranslatesForeignLiteratureIntoEnglish(x))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tHarry Potter was published by New Vessel Press.\nFOL:\tPublishedBy(HarryPotter, NewVesselPress)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\texists x. (PublishingHouse(x) & Specializes(x, TranslatingForeignLiteratureIntoEnglish) & NewVesselPress(x))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> English(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tHarry Potter was published by New Vessel Press.\nFOL:\tPublishedBy(HarryPotter, NewVesselPress)\nANSWER:\tUncertain\n"], ["TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL:\tCupcake(DriedThaiChilies) & Product(DriedThaiChilies, BakedByMelissa)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL:\tCupcake(DriedThaiChilies) & ProductOfBakedByMelissa(DriedThaiChilies)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL:\tCupcake(DriedThaiChilies) & ProductOfBakedByMelissa(DriedThaiChilies)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOf(x, BakedByMelissa) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL:\tCupcake(DriedThaiChilies) & ProductOf(DriedThaiChilies, BakedByMelissa)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL:\tCupcake(DriedThaiChilies) & ProductOfBakedByMelissa(DriedThaiChilies)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL:\tCupcake(DriedThaiChilies) & ProductOfBakedByMelissa(DriedThaiChilies)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcakes(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpots(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcakes(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL:\tCupcakes(DriedThaiChilies) & ProductOfBakedByMelissa(DriedThaiChilies)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(ThaiChilies) | Bakery(ThaiChilies)) -> (Hotpot(ThaiChilies) | Spicy(ThaiChilies))\nTEXT:\tDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL:\tCupcake(ThaiChilies) & ProductOfBakedByMelissa(ThaiChilies)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (BakedByMelissaProduct(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL:\tCupcake(DriedThaiChilies) & BakedByMelissaProduct(DriedThaiChilies)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL:\tCupcake(DriedThaiChilies) & ProductOfBakedByMelissa(DriedThaiChilies)\nANSWER:\tFalse\n"], ["TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> Contains(x, Knowledge))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Reads(x, y) & Book(y) -> Gains(x, Knowledge))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (Gains(x, Knowledge) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tHarry is smarter than before.\nFOL:\tSmarter(Harry)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainsKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Reads(x, y) & Book(y) -> GainsKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (GainsKnowledge(x) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tHarry is smarter than before.\nFOL:\tSmarter(Harry)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainsKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Person(x) & Book(y) & Reads(x, y) -> GainsKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (Person(x) & GainsKnowledge(x) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tHarry is smarter than before.\nFOL:\tSmarter(Harry)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainsKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Reads(x, y) & Book(y) -> GainsKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (GainsKnowledge(x) -> BecomesSmarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tHarry is smarter than before.\nFOL:\tBecomesSmarter(Harry)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> Contains(x, Knowledge))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Read(x, y) & Book(y) -> Gains(x, Knowledge))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (Gains(x, Knowledge) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tRead(Harry, Walden)\nTEXT:\tHarry is smarter than before.\nFOL:\tSmarter(Harry)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Reads(x, y) & Book(y) -> GainKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (GainKnowledge(x) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tHarry is smarter than before.\nFOL:\tSmarter(Harry)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> Contains(x, Knowledge))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Reads(x, y) & Book(y) -> Gains(x, Knowledge))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (Gains(x, Knowledge) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tHarry is smarter than before.\nFOL:\tSmarter(Harry)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainsKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Reads(x, y) & Book(y) -> GainsKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (GainsKnowledge(x) -> BecomesSmarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tHarry is smarter than before.\nFOL:\tBecomesSmarter(Harry)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Read(x, y) & Book(y) -> GainKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (GainKnowledge(x) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tRead(Harry, Walden)\nTEXT:\tHarry is smarter than before.\nFOL:\tSmarter(Harry)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainsKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Reads(x, y) & Book(y) -> GainsKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (GainsKnowledge(x) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tHarry is smarter than before.\nFOL:\tSmarter(Harry)\nANSWER:\tTrue\n"], ["TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, DuMaurierClassic1992)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, DuMaurierClassic1992)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\texists x. (SixWayTie(x, Leaderboard, DuMaurierClassic1992) & From(x, Belgium))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & OnLeaderboard(Descampe, DuMaurierClassic1992)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (OnLeaderboard(x, DuMaurierClassic1992) -> Participated(x, DuMaurierClassic1992))\nTEXT:\tDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL:\tSixWayTie(Descampe, Leaderboard, DuMaurierClassic1992)\nANSWER:\tUncertain\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWin(Steinhauer, DuMaurierClassic1992)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipate(Steinhauer, DuMaurierClassic1992)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\texists x. (SixWayTie(x, LeaderboardDuMaurierClassic1992) & From(x, Belgium))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & OnLeaderboard(Descampe, DuMaurierClassic1992)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (OnLeaderboard(x, DuMaurierClassic1992) -> Participate(x, DuMaurierClassic1992))\nTEXT:\tDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL:\tSixWayTie(Descampe, LeaderboardDuMaurierClassic1992)\nANSWER:\tUncertain\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, duMaurierClassic1992)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, duMaurierClassic1992)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\texists x. (Tie(x, 6) & OnLeaderboard(x, duMaurierClassic1992) & From(x, Belgium))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & OnLeaderboard(Descampe, duMaurierClassic1992)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (OnLeaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT:\tDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL:\tTie(Descampe, 6) & OnLeaderboard(Descampe, duMaurierClassic1992)\nANSWER:\tUncertain\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, DuMaurierClassic1992)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, DuMaurierClassic1992)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\texists x. (SixWayTie(x, Leaderboard) & From(x, Belgium))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & OnLeaderboard(Descampe, DuMaurierClassic1992)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (OnLeaderboard(x, DuMaurierClassic1992) -> Participated(x, DuMaurierClassic1992))\nTEXT:\tDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL:\tSixWayTie(Descampe, Leaderboard)\nANSWER:\tUncertain\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, 1992DuMaurierClassic)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, 1992DuMaurierClassic)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\tSixWayTie(Leaderboard1992DuMaurierClassic) & exists x. (From(x, Belgium) & InSixWayTie(x, Leaderboard1992DuMaurierClassic))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & OnLeaderboard(Descampe, 1992DuMaurierClassic)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (OnLeaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT:\tDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL:\tInSixWayTie(Descampe, Leaderboard1992DuMaurierClassic)\nANSWER:\tUncertain\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, duMaurierClassic1992)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, duMaurierClassic1992)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\texists x. (SixWayTie(x, duMaurierClassic1992) & From(x, Belgium))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & OnLeaderboard(Descampe, duMaurierClassic1992)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (OnLeaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT:\tDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL:\tSixWayTie(Descampe, duMaurierClassic1992)\nANSWER:\tUncertain\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, duMaurierClassic1992)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, duMaurierClassic1992)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\texists x. (SixWayTie(x, duMaurierClassic1992) & From(x, Belgium))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & OnLeaderboard(Descampe, duMaurierClassic1992)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (OnLeaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT:\tDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL:\tSixWayTie(Descampe, duMaurierClassic1992)\nANSWER:\tUncertain\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, duMaurierClassic1992)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, duMaurierClassic1992)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\texists x. (SixWayTie(x, Leaderboard, duMaurierClassic1992) & From(x, Belgium))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & OnLeaderboard(Descampe, duMaurierClassic1992)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (OnLeaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT:\tDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL:\tSixWayTie(Descampe, Leaderboard, duMaurierClassic1992)\nANSWER:\tUncertain\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, DuMaurierClassic1992)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, DuMaurierClassic1992)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\texists x. (SixWayTie(x, Leaderboard) & From(x, Belgium))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & OnLeaderboard(Descampe, DuMaurierClassic1992)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (OnLeaderboard(x, DuMaurierClassic1992) -> Participated(x, DuMaurierClassic1992))\nTEXT:\tDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL:\tSixWayTie(Descampe, Leaderboard)\nANSWER:\tUncertain\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, 1992duMaurierClassic)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipant(Steinhauer, 1992duMaurierClassic)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\texists x. (SixWayTie(x, Leaderboard) & From(x, Belgium))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & OnLeaderboard(Descampe, 1992duMaurierClassic)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (OnLeaderboard(x, 1992duMaurierClassic) -> Participant(x, 1992duMaurierClassic))\nTEXT:\tDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL:\tSixWayTie(Descampe, 1992duMaurierClassic)\nANSWER:\tUncertain\n"], ["TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavorite(x) -> Fluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. ((Koala(x) & Fluffy(x)) -> -Quokka(x))\nTEXT:\tKoalas love to sleep.\nFOL:\tall x. (Koala(x) -> LoveToSleep(x))\nANSWER:\tUncertain\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxsFavoriteAnimals(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxsFavoriteAnimals(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxsFavoriteAnimals(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT:\tKoalas love to sleep.\nFOL:\tall x. (Koala(x) -> LoveToSleep(x))\nANSWER:\tUncertain\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. ((Koala(x) & VeryFluffy(x)) -> -Quokka(x))\nTEXT:\tKoalas love to sleep.\nFOL:\tall x. (Koala(x) -> LoveToSleep(x))\nANSWER:\tUncertain\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavoriteAnimals(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (AustraliaAnimals(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> AustraliaAnimals(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> Fluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & Fluffy(x) -> -Quokka(x))\nTEXT:\tKoalas love to sleep.\nFOL:\tall x. (Koala(x) -> LoveToSleep(x))\nANSWER:\tUncertain\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavoriteAnimal(x) -> Fluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavoriteAnimal(x) -> LoveSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. ((Koala(x) & Fluffy(x)) -> -Quokka(x))\nTEXT:\tKoalas love to sleep.\nFOL:\tall x. (Koala(x) -> LoveSleep(x))\nANSWER:\tUncertain\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavoriteAnimals(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (AustraliaAnimals(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> AustraliaAnimals(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT:\tKoalas love to sleep.\nFOL:\tall x. (Koala(x) -> LoveToSleep(x))\nANSWER:\tUncertain\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavoriteAnimals(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT:\tKoalas love to sleep.\nFOL:\tall x. (Koala(x) -> LoveToSleep(x))\nANSWER:\tUncertain\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourist(x) -> MaxFavouriteAnimal(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourist(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavouriteAnimal(x) -> Fluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavouriteAnimal(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. ((Koala(x) & Fluffy(x)) -> -Quokka(x))\nTEXT:\tKoalas love to sleep.\nFOL:\tall x. (Koala(x) -> LoveToSleep(x))\nANSWER:\tUncertain\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT:\tKoalas love to sleep.\nFOL:\tall x. (Koala(x) -> LoveToSleep(x))\nANSWER:\tUncertain\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxsFavoriteAnimals(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxsFavoriteAnimals(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxsFavoriteAnimals(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT:\tKoalas love to sleep.\nFOL:\tall x. (Koala(x) -> LoveToSleep(x))\nANSWER:\tUncertain\n"], ["TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, PeoplesRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousNationalCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocated(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tExists x. (University(x, Beijing) & RankBest(x, AsiaPacific) & RankBest(x, World))\nTEXT:\tBeijing is the second largest Chinese city by urban population.\nFOL:\tSecondLargestChineseCityByUrbanPopulation(Beijing)\nANSWER:\tUncertain\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, PeoplesRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousNationalCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocatedIn(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\texists x. (University(x) & In(x, Beijing) & Rank(x, Best))\nTEXT:\tBeijing is the second largest Chinese city by urban population.\nFOL:\tSecondLargestByUrbanPopulation(Beijing)\nANSWER:\tUncertain\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, PeoplesRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousCapitalCity(World, Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocated(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tall x. (University(x, Beijing) -> BestInAsiaPacificAndWorld(x))\nTEXT:\tBeijing is the second largest Chinese city by urban population.\nFOL:\tSecondLargestByUrbanPopulation(ChineseCity, Beijing)\nANSWER:\tUncertain\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, People'sRepublicofChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocated(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tForAll x. (University(x, Beijing) -> BestUniversities(x, Asia-Pacific & World))\nTEXT:\tBeijing is the second largest Chinese city by urban population.\nFOL:\tSecondLargestChineseCity(Beijing)\nANSWER:\tUncertain\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapitalOf(Beijing, PeoplesRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousNationalCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocatedIn(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympicsGames2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tall x. (University(x, Beijing) -> (BestInAsiaPacific(x) & BestInTheWorld(x)))\nTEXT:\tBeijing is the second largest Chinese city by urban population.\nFOL:\tSecondLargestByUrbanPopulation(Beijing)\nANSWER:\tUncertain\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, People's Republic of China)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocated(Beijing, Northern China)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, 2008 Summer Olympics, 2008 Summer Paralympics Games)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, Summer Olympics, Winter Olympics, Summer Paralympics, Winter Paralympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tTopUniversities(Beijing, 91, Asia-Pacific, World)\nTEXT:\tBeijing is the second largest Chinese city by urban population.\nFOL:\tSecondLargestUrbanPopulation(Beijing, Chinese city)\nANSWER:\tUncertain\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, People'sRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousNationalCapitalCity(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocated(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tall x. (University(x) & In(x, Beijing) -> RankAmongBest(x, AsiaPacific) & RankAmongBest(x, World))\nTEXT:\tBeijing is the second largest Chinese city by urban population.\nFOL:\tSecondLargestChineseCityByUrbanPopulation(Beijing)\nANSWER:\tUncertain\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, People'sRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocation(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tUniversities(Beijing, 91) & BestUniversities(Beijing, AsiaPacific) & BestUniversities(Beijing, World)\nTEXT:\tBeijing is the second largest Chinese city by urban population.\nFOL:\tSecondLargestCity(Beijing, China)\nANSWER:\tUncertain\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, People'sRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousCapitalCity(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocatedIn(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\texists x. (University(x, Beijing) & BestInAsiaPacific(x) & BestInTheWorld(x))\nTEXT:\tBeijing is the second largest Chinese city by urban population.\nFOL:\tSecondLargestChineseCityByUrbanPopulation(Beijing)\nANSWER:\tUncertain\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, PeoplesRepublicofChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousCapitalCity(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocatedIn(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympicsGames2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tUniversitiesRanking(Beijing, AsiaPacificandWorld)\nTEXT:\tBeijing is the second largest Chinese city by urban population.\nFOL:\tSecondLargestChineseCityByUrbanPopulation(Beijing)\nANSWER:\tUncertain\n"], ["TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\texists x. (LanguageFamily(x) & RomanceLanguage(x))\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (LanguageFamily(x) & In(y, x) -> Related(y, x))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tGerman is a Romance language.\nFOL:\tRomanceLanguage(German)\nANSWER:\tUncertain\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tRomanceLanguageFamily(RomanceLanguages)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (LanguageFamily(x) & In(y, x) -> Related(y, x))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x) & -Related(x, Basque))\nTEXT:\tGerman is a Romance language.\nFOL:\tRomanceLanguage(German)\nANSWER:\tUncertain\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropean(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tLanguageFamily(RomanceLanguage)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (InLanguageFamily(x, y) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tGerman is a Romance language.\nFOL:\tRomanceLanguage(German)\nANSWER:\tUncertain\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tLanguageFamily(RomanceLanguages)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (LanguageFamily(x) & LanguageInFamily(y, x) -> Related(y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tGerman is a Romance language.\nFOL:\tRomanceLanguage(German)\nANSWER:\tUncertain\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tLanguageFamily(RomanceLanguages)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. all z. (LanguageFamily(z) & LanguageIn(x, z) & LanguageIn(y, z) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tGerman is a Romance language.\nFOL:\tRomanceLanguage(German)\nANSWER:\tUncertain\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\texists x. (LanguageFamily(x) & forall y. (Member(y, x) -> RomanceLanguage(y)))\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. all z. (LanguageFamily(x) & Member(y, x) & Member(z, x) -> Related(y, z))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x) & -Related(x, Basque))\nTEXT:\tGerman is a Romance language.\nFOL:\tRomanceLanguage(German)\nANSWER:\tUncertain\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tLanguageFamily(RomanceLanguages)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (InLanguageFamily(x, y) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tGerman is a Romance language.\nFOL:\tRomanceLanguage(German)\nANSWER:\tUncertain\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tLanguageFamily(RomanceLanguages)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (LanguageFamily(x) & LanguageInFamily(y, x) -> Related(y, x))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x) & -Related(x, Basque))\nTEXT:\tGerman is a Romance language.\nFOL:\tRomanceLanguage(German)\nANSWER:\tUncertain\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tLanguageFamily(RomanceLanguages)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (LanguageFamily(x) & Contains(x, y) -> Related(y, x))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tGerman is a Romance language.\nFOL:\tRomanceLanguage(German)\nANSWER:\tUncertain\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tLanguageFamily(RomanceLanguages)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (InLanguageFamily(x, y) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tGerman is a Romance language.\nFOL:\tRomanceLanguage(German)\nANSWER:\tUncertain\n"], ["TEXT:\tA hawk never lands.\nFOL:\tall x. (Hawk(x) -> -Land(x))\nTEXT:\tSome birds are hawks.\nFOL:\texists x. (Bird(x) & Hawk(x))\nTEXT:\tAll birds land\nFOL:\tall x. (Bird(x) -> Land(x))\nANSWER:\tFalse\n", "TEXT:\tA hawk never lands.\nFOL:\tall x. (Hawk(x) -> -Land(x))\nTEXT:\tSome birds are hawks.\nFOL:\texists x. (Bird(x) & Hawk(x))\nTEXT:\tAll birds land.\nFOL:\tall x. (Bird(x) -> Land(x))\nANSWER:\tFalse\n", "TEXT:\tA hawk never lands.\nFOL:\tall x. (Hawk(x) -> -Land(x))\nTEXT:\tSome birds are hawks.\nFOL:\texists x. (Bird(x) & Hawk(x))\nTEXT:\tAll birds land.\nFOL:\tall x. (Bird(x) -> Land(x))\nANSWER:\tFalse\n", "TEXT:\tA hawk never lands.\nFOL:\tall x. (Hawk(x) -> -Land(x))\nTEXT:\tSome birds are hawks.\nFOL:\texists x. (Bird(x) & Hawk(x))\nTEXT:\tAll birds land.\nFOL:\tall x. (Bird(x) -> Land(x))\nANSWER:\tFalse\n", "TEXT:\tA hawk never lands.\nFOL:\tall x. (Hawk(x) -> -Land(x))\nTEXT:\tSome birds are hawks.\nFOL:\texists x. (Bird(x) & Hawk(x))\nTEXT:\tAll birds land\nFOL:\tall x. (Bird(x) -> Land(x))\nANSWER:\tFalse\n", "TEXT:\tA hawk never lands.\nFOL:\tall x. (Hawk(x) -> -Lands(x))\nTEXT:\tSome birds are hawks.\nFOL:\texists x. (Bird(x) & Hawk(x))\nTEXT:\tAll birds land.\nFOL:\tall x. (Bird(x) -> Lands(x))\nANSWER:\tFalse\n", "TEXT:\tA hawk never lands.\nFOL:\tall x. (Hawk(x) -> -Lands(x))\nTEXT:\tSome birds are hawks.\nFOL:\texists x. (Bird(x) & Hawk(x))\nTEXT:\tAll birds land.\nFOL:\tall x. (Bird(x) -> Lands(x))\nANSWER:\tFalse\n", "TEXT:\tA hawk never lands.\nFOL:\tall x. (Hawk(x) -> -Land(x))\nTEXT:\tSome birds are hawks.\nFOL:\texists x. (Bird(x) & Hawk(x))\nTEXT:\tAll birds land\nFOL:\tall x. (Bird(x) -> Land(x))\nANSWER:\tFalse\n", "TEXT:\tA hawk never lands.\nFOL:\tall x. (Hawk(x) -> -Land(x))\nTEXT:\tSome birds are hawks.\nFOL:\texists x. (Bird(x) & Hawk(x))\nTEXT:\tAll birds land.\nFOL:\tall x. (Bird(x) -> Land(x))\nANSWER:\tFalse\n", "TEXT:\tA hawk never lands.\nFOL:\tall x. (Hawk(x) -> -Land(x))\nTEXT:\tSome birds are hawks.\nFOL:\texists x. (Bird(x) & Hawk(x))\nTEXT:\tAll birds land.\nFOL:\tall x. (Bird(x) -> Land(x))\nANSWER:\tFalse\n"], ["TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) & SpendFreeTimeTidyingAndOrganizing(Remy)) | (-GoToBedLateAndWakeUpAfterNoon(Remy) & -SpendFreeTimeTidyingAndOrganizing(Remy)))\nTEXT:\tRemy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL:\tFullyStockedAndImpressiveHomeOffice(Remy) & VisitOfficeSupplyStoreRegularly(Remy)\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (ImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAtHome(x) -> TidyHome(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (TidyHome(x) -> -LateBedAndNoonWakeUp(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((LateBedAndNoonWakeUp(Remy) & TidyHome(Remy)) | (-LateBedAndNoonWakeUp(Remy) & -TidyHome(Remy)))\nTEXT:\tRemy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL:\tImpressiveHomeOffice(Remy) & VisitOfficeSupplyStore(Remy)\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnsLargeDesktopMonitor(x) -> WorksRegularlyAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HasFullyStockedHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorksRegularlyAtHome(x) -> SpendsFreeTimeTidyingHome(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorksRegularlyAtHome(x) -> VisitsOfficeSupplyStoreRegularly(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendsFreeTimeTidyingHome(x) -> NotGoesToBedLateAndWakesUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoesToBedLateAndWakesUpAfterNoon(Remy) & SpendsFreeTimeTidyingHome(Remy)) | (NotGoesToBedLateAndWakesUpAfterNoon(Remy) & NotSpendsFreeTimeTidyingHome(Remy)))\nTEXT:\tRemy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL:\tHasFullyStockedHomeOffice(Remy) & VisitsOfficeSupplyStoreRegularly(Remy)\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendFreeTimeTidyingAndOrganizing(x) -> NotGoToBedLateAndWakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) & SpendFreeTimeTidyingAndOrganizing(Remy)) | (-GoToBedLateAndWakeUpAfterNoon(Remy) & -SpendFreeTimeTidyingAndOrganizing(Remy)))\nTEXT:\tRemy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL:\tHaveFullyStockedAndImpressiveHomeOffice(Remy) & VisitOfficeSupplyStoreRegularly(Remy)\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingHome(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendFreeTimeTidyingAndOrganizingHome(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) & SpendFreeTimeTidyingAndOrganizingHome(Remy)) | (-GoToBedLateAndWakeUpAfterNoon(Remy) & -SpendFreeTimeTidyingAndOrganizingHome(Remy)))\nTEXT:\tRemy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL:\t(HaveFullyStockedAndImpressiveHomeOffice(Remy) & VisitOfficeSupplyStoreRegularly(Remy))\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HaveFullyStockedHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) & SpendFreeTimeTidyingAndOrganizing(Remy)) | (-GoToBedLateAndWakeUpAfterNoon(Remy) & -SpendFreeTimeTidyingAndOrganizing(Remy)))\nTEXT:\tRemy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL:\tHaveFullyStockedHomeOffice(Remy) & VisitOfficeSupplyStoreRegularly(Remy)\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnsLargeDesktopMonitor(x) -> WorksRegularlyAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HasHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorksRegularlyAtHome(x) -> SpendsFreeTimeTidying(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorksRegularlyAtHome(x) -> VisitsOfficeSupplyStore(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendsFreeTimeTidying(x) -> NotGoesToBedLate(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoesToBedLate(Remy) & WakesUpAfterNoon(Remy) & SpendsFreeTimeTidying(Remy)) | (-GoesToBedLate(Remy) & -WakesUpAfterNoon(Remy) & -SpendsFreeTimeTidying(Remy)))\nTEXT:\tRemy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL:\tHasHomeOffice(Remy) & VisitsOfficeSupplyStore(Remy)\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingHomeSpaces(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendFreeTimeTidyingAndOrganizingHomeSpaces(x) -> NotGoToBedLateAndWakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) & SpendFreeTimeTidyingAndOrganizingHomeSpaces(Remy)) | (-GoToBedLateAndWakeUpAfterNoon(Remy) & -SpendFreeTimeTidyingAndOrganizingHomeSpaces(Remy)))\nTEXT:\tRemy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL:\tHaveFullyStockedAndImpressiveHomeOffice(Remy) & VisitOfficeSupplyStoreRegularly(Remy)\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (Owns(x, LargeDesktopMonitor) -> WorksRegularlyAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HasImpressiveHomeOffice(x) -> Owns(x, LargeDesktopMonitor))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorksRegularlyAtHome(x) -> SpendsFreeTimeOrganizingHome(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorksRegularlyAtHome(x) -> VisitsOfficeSupplyStore(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendsFreeTimeOrganizingHome(x) -> -GoesToBedLateAndWakesUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoesToBedLateAndWakesUpAfterNoon(Remy) & SpendsFreeTimeOrganizingHome(Remy)) | (-GoesToBedLateAndWakesUpAfterNoon(Remy) & -SpendsFreeTimeOrganizingHome(Remy)))\nTEXT:\tRemy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL:\tHasImpressiveHomeOffice(Remy) & VisitsOfficeSupplyStore(Remy)\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingHome(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendFreeTimeTidyingAndOrganizingHome(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) & SpendFreeTimeTidyingAndOrganizingHome(Remy)) | \n(-GoToBedLateAndWakeUpAfterNoon(Remy) & -SpendFreeTimeTidyingAndOrganizingHome(Remy)))\nTEXT:\tRemy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL:\tHaveFullyStockedAndImpressiveHomeOffice(Remy) & VisitOfficeSupplyStoreRegularly(Remy)\nANSWER:\tUncertain\n"], ["TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\tSeason(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantsLongVacation(x) -> LovesMost(x, Summer))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tFavoriteSeason(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\texists y. (FavoriteSeason(Mia, y) & y != Summer)\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantsLongVacation(James)\nTEXT:\tMia's favorite season is spring.\nFOL:\tFavoriteSeason(Mia, Spring)\nANSWER:\tUncertain\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\texists x. exists y. exists z. exists w. (Season(x, Spring) & Season(y, Summer) & Season(z, Fall) & Season(w, Winter))\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantLongVacation(x) -> LoveMost(x, Summer))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tFavoriteSeason(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\texists x. (FavoriteSeason(Mia, x) & x != Summer)\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantLongVacation(James)\nTEXT:\tMia's favorite season is spring.\nFOL:\tFavoriteSeason(Mia, Spring)\nANSWER:\tUncertain\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\texists x. (Year(x) & Seasons(x, {Spring, Summer, Fall, Winter}))\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. ((Student(x) & LongVacation(x)) -> LoveMost(x, Summer))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tFavoriteSeason(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\tall x. (FavoriteSeason(Mia, x) -> -FavoriteSeason(Emma, x))\nTEXT:\tJames wants to have a long vacation.\nFOL:\tLongVacation(James)\nTEXT:\tMia's favorite season is spring.\nFOL:\tFavoriteSeason(Mia, Spring)\nANSWER:\tUncertain\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\tSeasonsInYear = {Spring, Summer, Fall, Winter}\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantsLongVacation(x) -> FavoriteSeason(x, Summer))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tFavoriteSeason(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\t-FavoriteSeason(Mia, Summer)\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantsLongVacation(James)\nTEXT:\tMia's favorite season is spring.\nFOL:\tFavoriteSeason(Mia, Spring)\nANSWER:\tUncertain\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\tSeason(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantsLongVacation(x) -> Loves(x, Summer))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tFavoriteSeason(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\texists x. (Season(x) & x != Summer -> FavoriteSeason(Mia, x))\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantsLongVacation(James)\nTEXT:\tMia's favorite season is spring.\nFOL:\tFavoriteSeason(Mia, Spring)\nANSWER:\tUncertain\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\texists x, y, z, w. (Season(x) & Season(y) & Season(z) & Season(w) & x=Spring & y=Summer & z=Fall & w=Winter)\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. ((Student(x) & WantLongVacation(x)) -> LoveMost(x, Summer))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tFavoriteSeason(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\texists x. (FavoriteSeason(Mia, x) & x!=Summer)\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantLongVacation(James)\nTEXT:\tMia's favorite season is spring.\nFOL:\tFavoriteSeason(Mia, Spring)\nANSWER:\tUncertain\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\tSeason(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantsLongVacation(x) -> LovesMost(x, Summer))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tLovesMost(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\tall y. (LovesMost(Emma, y) -> -LovesMost(Mia, y))\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantsLongVacation(James)\nTEXT:\tMia's favorite season is spring.\nFOL:\tLovesMost(Mia, Spring)\nANSWER:\tUncertain\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\texists x. exists y. exists z. exists w. (Season(x) & Season(y) & Season(z) & Season(w) & Different(x, y, z, w))\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantLongVacation(x) -> LoveSummer(x))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tFavoriteSeason(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\texists x. (Season(x) & FavoriteSeason(Mia, x) & Different(x, Summer))\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantLongVacation(James)\nTEXT:\tMia's favorite season is spring.\nFOL:\tFavoriteSeason(Mia, Spring)\nANSWER:\tUncertain\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\tSeason(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantLongVacation(x) -> LoveSummerMost(x))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tFavoriteSeason(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\texists x. (Season(x) & x != Summer & FavoriteSeason(Mia, x))\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantLongVacation(James)\nTEXT:\tMia's favorite season is spring.\nFOL:\tFavoriteSeason(Mia, Spring)\nANSWER:\tUncertain\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\texists x. exists y. exists z. exists w. (Season(x) & Season(y) & Season(z) & Season(w) & x=Spring & y=Summer & z=Fall & w=Winter)\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantsLongVacation(x) -> LovesMost(x, Summer))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tFavoriteSeason(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\tall x. (FavoriteSeason(Emma, x) -> -FavoriteSeason(Mia, x))\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantsLongVacation(James)\nTEXT:\tMia's favorite season is spring.\nFOL:\tFavoriteSeason(Mia, Spring)\nANSWER:\tUncertain\n"], ["TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMovedTo(YaleUniversity, NewHaven)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, $42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27CollegesAndSchools)\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialCollegesAt(YaleUniversity, ListOfColleges)\nTEXT:\tA private Ivy League research university moved to New Haven.\nFOL:\texists x. (PrivateIvyLeagueResearchUniversity(x) & MovedTo(x, NewHaven))\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMovedTo(YaleUniversity, NewHaven)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, 42.3billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27CollegesAndSchools)\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialCollegesAtYale(BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)\nTEXT:\tA private Ivy League research university moved to New Haven.\nFOL:\texists x. (PrivateIvyLeagueResearchUniversity(x) & MovedTo(x, NewHaven))\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(Yale)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMovedTo(Yale, NewHaven)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(Yale, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(Yale, 27CollegesAndSchools)\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialColleges(Yale, ListOfColleges)\nTEXT:\tA private Ivy League research university moved to New Haven.\nFOL:\texists x. (PrivateIvyLeagueResearchUniversity(x) & MovedTo(x, NewHaven))\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMoved(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowmentValue(YaleUniversity, $42.3billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27, {ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, TwelveProfessionalSchools})\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialCollegesAtYale({BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege})\nTEXT:\tA private Ivy League research university moved to New Haven.\nFOL:\texists x. (PrivateIvyLeagueResearchUniversity(x) & Moved(x, NewHaven))\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMovedTo(YaleUniversity, NewHaven)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, $42.3 billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27 ConstituentCollegesAndSchools)\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialCollegesAt(YaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT:\tA private Ivy League research university moved to New Haven.\nFOL:\texists x. (PrivateIvyLeagueResearchUniversity(x) & MovedTo(x, NewHaven))\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMovedTo(YaleUniversity, NewHaven)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowmentValued(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27ConstituentCollegesAndSchools)\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialCollegesAtYale(ListOfColleges)\nTEXT:\tA private Ivy League research university moved to New Haven.\nFOL:\texists x. (PrivateIvyLeagueResearchUniversity(x) & MovedTo(x, NewHaven))\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMovedTo(YaleUniversity, NewHaven)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27ConstituentCollegesAndSchools)\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialColleges(YaleUniversity)\nTEXT:\tA private Ivy League research university moved to New Haven.\nFOL:\texists x. (PrivateIvyLeagueResearchUniversity(x) & MovedTo(x, NewHaven))\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMovedTo(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27ConstituentCollegesAndSchools)\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialCollegesAt(YaleUniversity, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege})\nTEXT:\tA private Ivy League research university moved to New Haven.\nFOL:\texists x. (PrivateIvyLeagueResearchUniversity(x) & MovedTo(x, NewHaven))\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMovedTo(YaleUniversity, NewHaven)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowmentValued(YaleUniversity, $42.3billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27CollegesAndSchools)\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialCollegesAt(Yale, ListOfResidentialColleges)\nTEXT:\tA private Ivy League research university moved to New Haven.\nFOL:\texists x. (PrivateIvyLeagueResearchUniversity(x) & MovedTo(x, NewHaven))\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMovedTo(YaleUniversity, NewHaven)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowmentValue(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27, [ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, TwelveProfessionalSchools])\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialCollegesAtYale([BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT:\tA private Ivy League research university moved to New Haven.\nFOL:\texists x. (PrivateIvyLeagueResearchUniversity(x) & MovedTo(x, NewHaven))\nANSWER:\tTrue\n"], ["TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighlyRankedWTA(x) -> MostActiveMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIga(x) -> HighlyRankedWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRolandGarros2022(x) -> LostToIga(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\t(FemalePlayerRolandGarros2022(x) | MalePlayerRolandGarros2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRolandGarros2022(x) -> LostToNadal(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t(HighlyRankedWTA(Coco) | LostToNadal(Coco)) -> -MalePlayerRolandGarros2022(Coco)\nTEXT:\tCoco Gauff is among the most active players in major tennis.\nFOL:\tMostActiveMajorTennis(Coco)\nANSWER:\tTrue\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighlyRankedByWTA(x) -> MostActivePlayerInMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostTo(x, IgaSwiatek) -> HighlyRankedByWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemaleTennisPlayerAtRG2022(x) -> LostTo(x, IgaSwiatek))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\texists x. (FemaleTennisPlayerAtRG2022(x) | MaleTennisPlayerAtRG2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MaleTennisPlayerAtRG2022(x) -> LostTo(x, RafaelNadal))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((HighlyRankedByWTA(CocoGauff) | LostTo(CocoGauff, RafaelNadal)) -> -MaleTennisPlayerAtRG2022(CocoGauff))\nTEXT:\tCoco Gauff is among the most active players in major tennis.\nFOL:\tMostActivePlayerInMajorTennis(CocoGauff)\nANSWER:\tTrue\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerAtRolandGarros2022(x) -> LostToSwiatek(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\t(FemalePlayerAtRolandGarros2022(x) | MalePlayerAtRolandGarros2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerAtRolandGarros2022(x) -> LostToNadal(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((RankedHighlyByWTA(CocoGauff) | LostToNadal(CocoGauff)) -> -MalePlayerAtRolandGarros2022(CocoGauff))\nTEXT:\tCoco Gauff is among the most active players in major tennis.\nFOL:\tActiveInMajorTennis(CocoGauff)\nANSWER:\tTrue\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIga(x) -> HighlyRankedByWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerAtRolandGarros2022(x) -> LostToIga(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\t((exists x. FemalePlayerAtRolandGarros2022(x)) | (exists x. MalePlayerAtRolandGarros2022(x)))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerAtRolandGarros2022(x) -> LostToRafael(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t(HighlyRankedByWTA(Coco) | LostToRafael(Coco)) -> -MalePlayerAtRolandGarros2022(Coco)\nTEXT:\tCoco Gauff is among the most active players in major tennis.\nFOL:\tActiveInMajorTennis(Coco)\nANSWER:\tTrue\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (RankedHighlyWTA(x) -> ActivePlayerMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostTo(x, Iga\u015awi\u0105tek) -> RankedHighlyWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRolandGarros2022(x) -> LostTo(x, Iga\u015awi\u0105tek))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\texists x. (FemalePlayerRolandGarros2022(x)) | exists x. (MalePlayerRolandGarros2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRolandGarros2022(x) -> LostTo(x, RafaelNadal))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t(RankedHighlyWTA(CocoGauff) | LostTo(CocoGauff, RafaelNadal)) -> -MalePlayerRolandGarros2022(CocoGauff)\nTEXT:\tCoco Gauff is among the most active players in major tennis.\nFOL:\tActivePlayerMajorTennis(CocoGauff)\nANSWER:\tTrue\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (RankedHighlyByWTA(x) -> ActivePlayer(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerAtRG2022(x) -> LostToSwiatek(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\texists x. (FemalePlayerAtRG2022(x)) | exists x. (MalePlayerAtRG2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerAtRG2022(x) -> LostToNadal(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t(RankedHighlyByWTA(Coco) | LostToNadal(Coco)) -> -MalePlayerAtRG2022(Coco)\nTEXT:\tCoco Gauff is among the most active players in major tennis.\nFOL:\tActivePlayer(Coco)\nANSWER:\tTrue\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighlyRankedByWTA(x) -> ActivePlayerInMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIgaSwiatek(x) -> HighlyRankedByWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerAtRG2022(x) -> LostToIgaSwiatek(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\texists x. (FemalePlayerAtRG2022(x) | MalePlayerAtRG2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerAtRG2022(x) -> LostToRafaelNadal(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((HighlyRankedByWTA(CocoGauff) | LostToRafaelNadal(CocoGauff)) -> -MalePlayerAtRG2022(CocoGauff))\nTEXT:\tCoco Gauff is among the most active players in major tennis.\nFOL:\tActivePlayerInMajorTennis(CocoGauff)\nANSWER:\tTrue\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighlyRankedWTA(x) -> ActivePlayerMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIga(x) -> HighlyRankedWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRG2022(x) -> LostToIga(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\texists x. (FemalePlayerRG2022(x) | MalePlayerRG2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRG2022(x) -> LostToRafael(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t(HighlyRankedWTA(Coco) | LostToRafael(Coco)) -> -MalePlayerRG2022(Coco)\nTEXT:\tCoco Gauff is among the most active players in major tennis.\nFOL:\tActivePlayerMajorTennis(Coco)\nANSWER:\tTrue\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (RankedHighlyWTA(x) -> ActivePlayer(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToSwiatek(x) -> RankedHighlyWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemaleTennisPlayerRG2022(x) -> LostToSwiatek(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\tall x. (TennisPlayerRG2022(x) -> FemaleTennisPlayerRG2022(x) | MaleTennisPlayerRG2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MaleTennisPlayerRG2022(x) -> LostToNadal(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((RankedHighlyWTA(CocoGauff) | LostToNadal(CocoGauff)) -> -MaleTennisPlayerRG2022(CocoGauff))\nTEXT:\tCoco Gauff is among the most active players in major tennis.\nFOL:\tActivePlayer(CocoGauff)\nANSWER:\tTrue\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (RankedHighlyWTA(x) -> ActivePlayerMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIga(x) -> RankedHighlyWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRolandGarros2022(x) -> LostToIga(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\tall x. (PlayerRolandGarros2022(x) -> FemalePlayerRolandGarros2022(x) | MalePlayerRolandGarros2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRolandGarros2022(x) -> LostToRafael(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((RankedHighlyWTA(CocoGauff) | LostToRafael(CocoGauff)) -> -MalePlayerRolandGarros2022(CocoGauff))\nTEXT:\tCoco Gauff is among the most active players in major tennis.\nFOL:\tActivePlayerMajorTennis(CocoGauff)\nANSWER:\tUncertain\n"], ["TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighRankWTA(x) -> ActivePlayer(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIga(x) -> HighRankWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRolandGarros2022(x) -> LostToIga(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\tall x. (PlayerRolandGarros2022(x) -> FemalePlayerRolandGarros2022(x) | MalePlayerRolandGarros2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRolandGarros2022(x) -> LostToNadal(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t(HighRankWTA(CocoGauff) | LostToNadal(CocoGauff)) -> -MalePlayerRolandGarros2022(CocoGauff)\nTEXT:\tCoco Gauff has lost to Rafael Nadal.\nFOL:\tLostToNadal(CocoGauff)\nANSWER:\tUncertain\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (RankedHighlyWTA(x) -> ActivePlayerMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToSwiatek(x) -> RankedHighlyWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRolandGarros2022(x) -> LostToSwiatek(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\texists x. ((FemalePlayerRolandGarros2022(x) & -MalePlayerRolandGarros2022(x)) | (-FemalePlayerRolandGarros2022(x) & MalePlayerRolandGarros2022(x)))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRolandGarros2022(x) -> LostToNadal(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((RankedHighlyWTA(CocoGauff) & -LostToNadal(CocoGauff)) | (-RankedHighlyWTA(CocoGauff) & LostToNadal(CocoGauff))) -> -MalePlayerRolandGarros2022(CocoGauff)\nTEXT:\tCoco Gauff has lost to Rafael Nadal.\nFOL:\tLostToNadal(CocoGauff)\nANSWER:\tUncertain\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighlyRankedWTA(x) -> ActivePlayer(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToSwiatek(x) -> HighlyRankedWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRG2022(x) -> LostToSwiatek(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\t(exists x. FemalePlayerRG2022(x)) | (exists x. MalePlayerRG2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRG2022(x) -> LostToNadal(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t(HighlyRankedWTA(CocoGauff) | LostToNadal(CocoGauff)) -> -MalePlayerRG2022(CocoGauff)\nTEXT:\tCoco Gauff has lost to Rafael Nadal.\nFOL:\tLostToNadal(CocoGauff)\nANSWER:\tUncertain\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (RankedHighlyWTA(x) -> MostActive(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIga(x) -> RankedHighlyWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRolandGarros2022(x) -> LostToIga(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\texists x. (FemalePlayerRolandGarros2022(x) | MalePlayerRolandGarros2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRolandGarros2022(x) -> LostToRafael(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((RankedHighlyWTA(Coco) | LostToRafael(Coco)) -> -MalePlayerRolandGarros2022(Coco))\nTEXT:\tCoco Gauff has lost to Rafael Nadal.\nFOL:\tLostToRafael(Coco)\nANSWER:\tUncertain\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIga(x) -> RankedHighlyByWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerAtRolandGarros2022(x) -> LostToIga(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\texists x. (FemalePlayerAtRolandGarros2022(x) | MalePlayerAtRolandGarros2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerAtRolandGarros2022(x) -> LostToNadal(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((RankedHighlyByWTA(CocoGauff) | LostToNadal(CocoGauff)) -> -MalePlayerAtRolandGarros2022(CocoGauff))\nTEXT:\tCoco Gauff has lost to Rafael Nadal.\nFOL:\tLostToNadal(CocoGauff)\nANSWER:\tUncertain\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighlyRankedWTA(x) -> ActivePlayer(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIga(x) -> HighlyRankedWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRolandGarros2022(x) -> LostToIga(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\t(exists x. FemalePlayerRolandGarros2022(x)) | (exists x. MalePlayerRolandGarros2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRolandGarros2022(x) -> LostToNadal(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t(HighlyRankedWTA(CocoGauff) | LostToNadal(CocoGauff)) -> -MalePlayerRolandGarros2022(CocoGauff)\nTEXT:\tCoco Gauff has lost to Rafael Nadal.\nFOL:\tLostToNadal(CocoGauff)\nANSWER:\tUncertain\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (RankedHighlyWTA(x) -> ActivePlayerMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIga(x) -> RankedHighlyWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRolandGarros2022(x) -> LostToIga(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\texists x. (FemalePlayerRolandGarros2022(x) | MalePlayerRolandGarros2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRolandGarros2022(x) -> LostToRafael(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((RankedHighlyWTA(CocoGauff) | LostToRafael(CocoGauff)) -> -MalePlayerRolandGarros2022(CocoGauff))\nTEXT:\tCoco Gauff has lost to Rafael Nadal.\nFOL:\tLostToRafael(CocoGauff)\nANSWER:\tUncertain\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighlyRankedWTA(x) -> ActivePlayer(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostTo(x, Iga) -> HighlyRankedWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRolandGarros2022(x) -> LostTo(x, Iga))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\texists x. (FemalePlayerRolandGarros2022(x) | MalePlayerRolandGarros2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRolandGarros2022(x) -> LostTo(x, Rafael))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t(HighlyRankedWTA(Coco) | LostTo(Coco, Rafael)) -> -MalePlayerRolandGarros2022(Coco)\nTEXT:\tCoco Gauff has lost to Rafael Nadal.\nFOL:\tLostTo(Coco, Rafael)\nANSWER:\tUncertain\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighlyRankedByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToSwiatek(x) -> HighlyRankedByWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerAtRG2022(x) -> LostToSwiatek(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\tall x. (PlayerAtRG2022(x) -> FemalePlayerAtRG2022(x) | MalePlayerAtRG2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerAtRG2022(x) -> LostToNadal(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((HighlyRankedByWTA(CocoGauff) | LostToNadal(CocoGauff)) -> -MalePlayerAtRG2022(CocoGauff))\nTEXT:\tCoco Gauff has lost to Rafael Nadal.\nFOL:\tLostToNadal(CocoGauff)\nANSWER:\tUncertain\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighRankWTA(x) -> ActiveInMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToSwiatek(x) -> HighRankWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRolandGarros2022(x) -> LostToSwiatek(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\t(FemalePlayerRolandGarros2022(x) | MalePlayerRolandGarros2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRolandGarros2022(x) -> LostToNadal(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((HighRankWTA(CocoGauff) | LostToNadal(CocoGauff)) -> -MalePlayerRolandGarros2022(CocoGauff))\nTEXT:\tCoco Gauff has lost to Rafael Nadal.\nFOL:\tLostToNadal(CocoGauff)\nANSWER:\tUncertain\n"], ["TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(NineteenEightyFour) -> HardcoverBook(NineteenEightyFour))\nTEXT:\t1984 is not a streaming service.\nFOL:\t-StreamingService(NineteenEightyFour)\nANSWER:\tTrue\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is not a streaming service.\nFOL:\t-StreamingService(1984)\nANSWER:\tTrue\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is not a streaming service.\nFOL:\t-StreamingService(1984)\nANSWER:\tTrue\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (DigitalMedia(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> DigitalMedia(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is not a streaming service.\nFOL:\t-StreamingService(1984)\nANSWER:\tTrue\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\tStreamingService(NineteenEightyFour) -> HardcoverBook(NineteenEightyFour)\nTEXT:\t1984 is not a streaming service.\nFOL:\t-StreamingService(NineteenEightyFour)\nANSWER:\tTrue\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is not a streaming service.\nFOL:\t-StreamingService(1984)\nANSWER:\tTrue\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is not a streaming service.\nFOL:\t-StreamingService(1984)\nANSWER:\tTrue\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is not a streaming service.\nFOL:\t-StreamingService(1984)\nANSWER:\tTrue\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is not a streaming service.\nFOL:\t-StreamingService(1984)\nANSWER:\tTrue\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is not a streaming service.\nFOL:\t-StreamingService(1984)\nANSWER:\tTrue\n"], ["TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxsFavorite(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxsFavorite(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxsFavorite(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT:\tIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL:\tall x. (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\nANSWER:\tUncertain\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourist(x) -> FavoriteAnimals(Max, x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourist(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (FavoriteAnimals(Max, x) -> Fluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (FavoriteAnimals(Max, x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. ((Koala(x) & Fluffy(x)) -> -Quokka(x))\nTEXT:\tIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL:\tall x. (Koala(x) & Quokka(x) -> (LoveToSleep(x) | Fluffy(x)))\nANSWER:\tTrue\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxsFavoriteAnimals(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxsFavoriteAnimals(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxsFavoriteAnimals(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT:\tIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL:\tall x. (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\nANSWER:\tTrue\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (Animal(x) & LovedByTourists(x) -> MaxFavorite(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (Animal(x) & FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> Animal(x) & FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavorite(x) -> Fluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavorite(x) -> LovesToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & Fluffy(x) -> -Quokka(x))\nTEXT:\tIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL:\tall x. (Koala(x) & Quokka(x) -> (LovesToSleep(x) | Fluffy(x)))\nANSWER:\tUncertain\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavoriteAnimals(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (AustraliaAnimals(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> AustraliaAnimals(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> Fluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & Fluffy(x) -> -Quokka(x))\nTEXT:\tIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL:\tall x. (Koala(x) & Quokka(x) -> (LoveToSleep(x) | Fluffy(x)))\nANSWER:\tTrue\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavoriteAnimals(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT:\tIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL:\tall x. ((Koala(x) & Quokka(x)) -> (LoveToSleep(x) | VeryFluffy(x)))\nANSWER:\tTrue\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavoriteAnimals(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (AustraliaAnimals(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> AustraliaAnimals(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT:\tIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL:\tall x. (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\nANSWER:\tFalse\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> FavoriteAnimalMax(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (FavoriteAnimalMax(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (FavoriteAnimalMax(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. ((Koala(x) & VeryFluffy(x)) -> -Quokka(x))\nTEXT:\tIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL:\tall x. ((Koala(x) & Quokka(x)) -> (LoveToSleep(x) | VeryFluffy(x)))\nANSWER:\tTrue\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavoriteAnimals(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (AustraliaAnimals(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> AustraliaAnimals(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT:\tIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL:\tall x. (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\nANSWER:\tFalse\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT:\tIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL:\tall x. (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\nANSWER:\tFalse\n"], ["TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudentUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. ((InternationalStudentUS(x) & F1Visa(x)) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudentUS(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tApplyCPT(Mike)\nTEXT:\tMike has a J1 visa.\nFOL:\tJ1Visa(Mike)\nANSWER:\tUncertain\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudent(x) -> (F1visa(x) | J1visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. ((InternationalStudent(x) & F1visa(x)) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudent(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tApplyCPT(Mike)\nTEXT:\tMike has a J1 visa.\nFOL:\tJ1visa(Mike)\nANSWER:\tUncertain\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. ((InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudentInUS(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\t(WantsToWorkInUS(Mike) -> ApplyCPT(Mike))\nTEXT:\tMike has a J1 visa.\nFOL:\tJ1Visa(Mike)\nANSWER:\tUncertain\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. ((InternationalStudentInUS(x) & F1Visa(x)) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudentInUS(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tApplyCPT(Mike)\nTEXT:\tMike has a J1 visa.\nFOL:\tJ1Visa(Mike)\nANSWER:\tUncertain\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudentUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. ((InternationalStudentUS(x) & F1Visa(x)) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudentUS(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tApplyCPT(Mike)\nTEXT:\tMike has a J1 visa.\nFOL:\tJ1Visa(Mike)\nANSWER:\tUncertain\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. ((InternationalStudentInUS(x) & F1Visa(x)) -> (NeedsToApplyForCPT(x) | NeedsToApplyForOPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudentInUS(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tNeedsToApplyForCPT(Mike)\nTEXT:\tMike has a J1 visa.\nFOL:\tJ1Visa(Mike)\nANSWER:\tFalse\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. ((InternationalStudentInUS(x) & F1Visa(x)) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudentInUS(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tApplyCPT(Mike)\nTEXT:\tMike has a J1 visa.\nFOL:\tJ1Visa(Mike)\nANSWER:\tFalse\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. ((InternationalStudentInUS(x) & F1Visa(x)) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudentInUS(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tApplyCPT(Mike)\nTEXT:\tMike has a J1 visa.\nFOL:\tJ1Visa(Mike)\nANSWER:\tUncertain\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. ((InternationalStudentInUS(x) & F1Visa(x)) -> (NeedsToApplyForCPT(x) | NeedsToApplyForOPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudentInUS(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tNeedsToApplyForCPT(Mike)\nTEXT:\tMike has a J1 visa.\nFOL:\tJ1Visa(Mike)\nANSWER:\tFalse\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. ((InternationalStudentInUS(x) & F1Visa(x)) -> (NeedsToApplyForCPT(x) | NeedsToApplyForOPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudentInUS(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tWantsToWorkInUS(Mike) -> NeedsToApplyForCPT(Mike)\nTEXT:\tMike has a J1 visa.\nFOL:\tJ1Visa(Mike)\nANSWER:\tUncertain\n"], ["TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tall x. (Man(x) & InClass(x, Michael) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (Person(x) & -JumpWhenShooting(x) -> CanBlock(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Person(Windy) | -CanBlock(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tPeter can block Windy's shooting.\nFOL:\tCanBlock(Peter, Windy)\nANSWER:\tUncertain\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x,y) -> CanBlockShooting(x,y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tMan(Michael) & all x. (Class(x) -> Taller(Michael,x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. (Taller(x,y) & Taller(y,z) -> Taller(x,z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter,Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (Man(x) & -JumpWhenShooting(x) -> CanBlockShooting(Michael,x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Man(CanBlockShooting(Michael,Windy))\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tPeter can block Windy's shooting.\nFOL:\tCanBlockShooting(Peter,Windy)\nANSWER:\tUncertain\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. ((Man(x) & Man(y) & Taller(x, y)) -> CanBlockShooting(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tMan(Michael) & all x. (Classmate(x, Michael) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z.\nFOL:\tall x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. ((Man(x) & -JumpWhenShooting(x)) -> CanBlockShooting(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Man(Michael) | -CanBlockShooting(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. ((Shooter(x) & JumpWhenShooting(x)) -> GreatShooter(x))\nTEXT:\tPeter can block Windy's shooting.\nFOL:\tCanBlockShooting(Peter, Windy)\nANSWER:\tUncertain\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tMan(Michael) & all x. (InClass(x, MichaelsClass) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (Man(x) & -CanJumpWhenShooting(x) -> CanBlockShooting(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Man(CanBlockShooting(Michael, Windy))\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & CanJumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tPeter can block Windy's shooting.\nFOL:\tCanBlockShooting(Peter, Windy)\nANSWER:\tUncertain\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tMan(Michael) & all x. (Classmate(x, Michael) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (Man(x) & -JumpWhenShooting(x) -> CanBlockShooting(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Man(CanBlockShooting(Michael, Windy))\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tPeter can block Windy's shooting.\nFOL:\tCanBlockShooting(Peter, Windy)\nANSWER:\tUncertain\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tall x. (InClass(x, MichaelsClass) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tTaller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. ((Person(x) & -JumpWhenShooting(x)) -> CanBlock(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-CanBlock(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tPeter can block Windy's shooting.\nFOL:\tCanBlock(Peter, Windy)\nANSWER:\tUncertain\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tMan(Michael) & all x. (InClass(x, Michael) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (Man(x) & -JumpWhenShooting(x) -> CanBlock(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Man(CanBlock(Michael, Windy))\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tPeter can block Windy's shooting.\nFOL:\tCanBlock(Peter, Windy)\nANSWER:\tUncertain\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tall x. (Man(x) & Classmate(x, Michael) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z.\nFOL:\tall x. all y. all z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (Person(x) & -JumpWhenShooting(x) -> CanBlockShooting(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Person(Windy) & -CanBlockShooting(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tPeter can block Windy's shooting.\nFOL:\tCanBlockShooting(Peter, Windy)\nANSWER:\tUncertain\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Taller(x, y) -> CanBlock(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tall x. (InClass(x, Michael) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tTaller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. ((Shoot(x) & -JumpWhenShoot(x)) -> CanBlock(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Shoot(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (JumpWhenShoot(x) -> GreatShooter(x))\nTEXT:\tPeter can block Windy's shooting.\nFOL:\tCanBlock(Peter, Windy)\nANSWER:\tUncertain\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tall x. (Classmate(x, Michael) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tTaller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. ((Man(x) & -JumpWhenShooting(x)) -> CanBlockShooting(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-CanBlockShooting(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tPeter can block Windy's shooting.\nFOL:\tCanBlockShooting(Peter, Windy)\nANSWER:\tUncertain\n"], ["TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & PartOf(y, z)) -> LocatedIn(x, z))\nTEXT:\tBarutin is not located in Antarctica.\nFOL:\t-LocatedIn(Barutin, Antarctica)\nANSWER:\tUncertain\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tLocatedIn(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\nTEXT:\tBarutin is not located in Antarctica.\nFOL:\t- LocatedIn(Barutin, Antarctica)\nANSWER:\tUncertain\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludedIn(SnowIsland, SouthShetlandIslands) & IncludedIn(GreenwichIsland, SouthShetlandIslands) & IncludedIn(DeceptionIsland, SouthShetlandIslands)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\nTEXT:\tBarutin is not located in Antarctica.\nFOL:\t- LocatedIn(Barutin, Antarctica)\nANSWER:\tUncertain\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & PartOf(y, z)) -> LocatedIn(x, z))\nTEXT:\tBarutin is not located in Antarctica.\nFOL:\t- LocatedIn(Barutin, Antarctica)\nANSWER:\tUncertain\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, BarutinSettlement)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & PartOf(y, z)) -> LocatedIn(x, z))\nTEXT:\tBarutin is not located in Antarctica.\nFOL:\t- LocatedIn(Barutin, Antarctica)\nANSWER:\tUncertain\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tLocatedIn(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\nTEXT:\tBarutin is not located in Antarctica.\nFOL:\t-LocatedIn(Barutin, Antarctica)\nANSWER:\tUncertain\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tInclude(SouthShetlandIslands, SnowIsland) & Include(SouthShetlandIslands, GreenwichIsland) & Include(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tLocatedIn(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT:\tBarutin is not located in Antarctica.\nFOL:\t-LocatedIn(Barutin, Antarctica)\nANSWER:\tUncertain\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludedIn(SnowIsland, SouthShetlandIslands) & IncludedIn(GreenwichIsland, SouthShetlandIslands) & IncludedIn(DeceptionIsland, SouthShetlandIslands)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tLocatedIn(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\nTEXT:\tBarutin is not located in Antarctica.\nFOL:\t- LocatedIn(Barutin, Antarctica)\nANSWER:\tUncertain\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tPartOf(SnowIsland, SouthShetlandIslands) & PartOf(GreenwichIsland, SouthShetlandIslands) & PartOf(DeceptionIsland, SouthShetlandIslands)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\nTEXT:\tBarutin is not located in Antarctica.\nFOL:\t- LocatedIn(Barutin, Antarctica)\nANSWER:\tUncertain\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tInclude(SouthShetlandIslands, SnowIsland) & Include(SouthShetlandIslands, GreenwichIsland) & Include(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tLocatedIn(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\nTEXT:\tBarutin is not located in Antarctica.\nFOL:\t- LocatedIn(Barutin, Antarctica)\nANSWER:\tUncertain\n"], ["TEXT:\tThe Olympic games is a sporting event.\nFOL:\tSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLast(OlympicGames, Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWinMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe world championships is a sporting event.\nFOL:\tSportingEvent(WorldChampionships)\nANSWER:\tUncertain\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastOlympicGames(Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe world championships is a sporting event.\nFOL:\tSportingEvent(WorldChampionships)\nANSWER:\tUncertain\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastOlympicGames(Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe world championships is a sporting event.\nFOL:\tSportingEvent(WorldChampionships)\nANSWER:\tUncertain\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastOlympicGames(Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe world championships is a sporting event.\nFOL:\tSportingEvent(WorldChampionships)\nANSWER:\tUncertain\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLast(OlympicGames, Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe world championships is a sporting event.\nFOL:\tSportingEvent(WorldChampionships)\nANSWER:\tUncertain\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLast(OlympicGames, Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe world championships is a sporting event.\nFOL:\tSportingEvent(WorldChampionships)\nANSWER:\tUncertain\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastEvent(OlympicGames, Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe world championships is a sporting event.\nFOL:\tSportingEvent(WorldChampionships)\nANSWER:\tUncertain\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastLocation(OlympicGames, Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe world championships is a sporting event.\nFOL:\tSportingEvent(WorldChampionships)\nANSWER:\tUncertain\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastLocation(OlympicGames, Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe world championships is a sporting event.\nFOL:\tSportingEvent(WorldChampionships)\nANSWER:\tUncertain\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLast(OlympicGames, Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe world championships is a sporting event.\nFOL:\tSportingEvent(WorldChampionships)\nANSWER:\tUncertain\n"], ["TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. ((Studies(x) & -Teaches(x)) | (-Studies(x) & Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\t((Young(Rose) & -Student(Rose)) | (-Young(Rose) & Student(Rose)))\nTEXT:\tIt is not true that Rose is a student and Jerry is a human.\nFOL:\t-(Student(Rose) & Human(Jerry))\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Person(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tIt is not true that Rose is a student and Jerry is a human.\nFOL:\t-(Student(Rose) & Human(Jerry))\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. ((Studies(x) & -Teaches(x)) | (-Studies(x) & Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\t(Young(Rose) & -Student(Rose)) | (-Young(Rose) & Student(Rose))\nTEXT:\tIt is not true that Rose is a student and Jerry is a human.\nFOL:\t-(Student(Rose) & Human(Jerry))\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studies or teaches.\nFOL:\tall x. (Person(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tIt is not true that Rose is a student and Jerry is a human.\nFOL:\t-(Student(Rose) & Human(Jerry))\nANSWER:\tFalse\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. ((Studies(x) & -Teaches(x)) | (-Studies(x) & Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\t(Young(Rose) & -Student(Rose)) | (-Young(Rose) & Student(Rose))\nTEXT:\tIt is not true that Rose is a student and Jerry is a human.\nFOL:\t-(Student(Rose) & Human(Jerry))\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Person(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tIt is not true that Rose is a student and Jerry is a human.\nFOL:\t-(Student(Rose) & Human(Jerry))\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tIt is not true that Rose is a student and Jerry is a human.\nFOL:\t-(Student(Rose) & Human(Jerry))\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tIt is not true that Rose is a student and Jerry is a human.\nFOL:\t-(Student(Rose) & Human(Jerry))\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studies or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tIt is not true that Rose is a student and Jerry is a human.\nFOL:\t-(Student(Rose) & Human(Jerry))\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Person(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tIt is not true that Rose is a student and Jerry is a human.\nFOL:\t-(Student(Rose) & Human(Jerry))\nANSWER:\tUncertain\n"], ["TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\t-Teeth(Platypus)\nTEXT:\tPlatypus are mammals.\nFOL:\tMammal(Platypus)\nTEXT:\tHumans have teeth.\nFOL:\tTeeth(Human)\nTEXT:\tPlatypus are mammals with no teeth.\nFOL:\tMammal(Platypus) & -Teeth(Platypus)\nANSWER:\tTrue\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tPlatypus are mammals with no teeth.\nFOL:\tall x. (Platypus(x) -> (Mammal(x) & -HaveTeeth(x)))\nANSWER:\tTrue\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tPlatypus are mammals with no teeth.\nFOL:\tall x. (Platypus(x) -> Mammal(x) & -HaveTeeth(x))\nANSWER:\tTrue\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tPlatypus are mammals with no teeth.\nFOL:\tall x. (Platypus(x) -> Mammal(x) & -HaveTeeth(x))\nANSWER:\tTrue\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tPlatypus are mammals with no teeth.\nFOL:\tall x. (Platypus(x) -> Mammal(x) & -HaveTeeth(x))\nANSWER:\tTrue\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tPlatypus are mammals with no teeth.\nFOL:\tall x. (Platypus(x) -> (Mammal(x) & -HaveTeeth(x)))\nANSWER:\tTrue\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tPlatypus are mammals with no teeth.\nFOL:\tall x. (Platypus(x) -> (Mammal(x) & -HaveTeeth(x)))\nANSWER:\tTrue\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tPlatypus are mammals with no teeth.\nFOL:\tall x. (Platypus(x) -> Mammal(x) & -HaveTeeth(x))\nANSWER:\tTrue\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tPlatypus are mammals with no teeth.\nFOL:\tall x. (Platypus(x) -> Mammal(x) & -HaveTeeth(x))\nANSWER:\tTrue\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tPlatypus are mammals with no teeth.\nFOL:\tall x. (Platypus(x) -> (Mammal(x) & -HaveTeeth(x)))\nANSWER:\tTrue\n"], ["TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tIf Ted is a cow, then Ted is not a pet.\nFOL:\t(Cow(Ted) -> -Pet(Ted))\nANSWER:\tUncertain\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tIf Ted is a cow, then Ted is not a pet.\nFOL:\t(Cow(Ted) -> -Pet(Ted))\nANSWER:\tUncertain\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tIf Ted is a cow, then Ted is not a pet.\nFOL:\t(Cow(Ted) -> -Pet(Ted))\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tIf Ted is a cow, then Ted is not a pet.\nFOL:\t(Cow(Ted) -> -Pet(Ted))\nANSWER:\tUncertain\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tIf Ted is a cow, then Ted is not a pet.\nFOL:\t(Cow(Ted) -> -Pet(Ted))\nANSWER:\tUncertain\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tIf Ted is a cow, then Ted is not a pet.\nFOL:\tCow(Ted) -> -Pet(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tIf Ted is a cow, then Ted is not a pet.\nFOL:\t(Cow(Ted) -> -Pet(Ted))\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tIf Ted is a cow, then Ted is not a pet.\nFOL:\tCow(Ted) -> -Pet(Ted)\nANSWER:\tUncertain\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tIf Ted is a cow, then Ted is not a pet.\nFOL:\tCow(Ted) -> -Pet(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tIf Ted is a cow, then Ted is not a pet.\nFOL:\t(Cow(Ted) -> -Pet(Ted))\nANSWER:\tFalse\n"], ["TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin) & Settlement(Barutin) & In(Barutin, Bulgaria)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocated(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. (Located(x, y) & Located(y, z) -> Located(x, z))\nTEXT:\tThere is at least one cove in Antarctica named after a place in Bulgaria.\nFOL:\texists x. (Cove(x) & Located(x, Antarctica) & exists y. (In(y, Bulgaria) & NamedAfter(x, y)))\nANSWER:\tTrue\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin) & Settlement(Barutin) & Bulgarian(Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & PartOf(y, z)) -> LocatedIn(x, z))\nTEXT:\tThere is at least one cove in Antarctica named after a place in Bulgaria.\nFOL:\texists x. (Cove(x) & LocatedIn(x, Antarctica) & exists y. (Place(y) & Bulgarian(y) & NamedAfter(x, y)))\nANSWER:\tTrue\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tName(BarutinCove, Barutin) & Settlement(Barutin, Bulgaria)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocation(BarutinCove, SouthwestCoast(SnowIsland))\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT:\tThere is at least one cove in Antarctica named after a place in Bulgaria.\nFOL:\texists x. exists y. (Cove(x) & LocatedIn(x, Antarctica) & Name(x, y) & Place(y, Bulgaria))\nANSWER:\tTrue\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, BulgarianSettlementBarutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SouthwestCoastSnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & PartOf(y, z)) -> LocatedIn(x, z))\nTEXT:\tThere is at least one cove in Antarctica named after a place in Bulgaria.\nFOL:\texists x. (Cove(x) & LocatedIn(x, Antarctica) & NamedAfter(x, PlaceInBulgaria))\nANSWER:\tTrue\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin) & BulgarianSettlement(Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & PartOf(y, z)) -> LocatedIn(x, z))\nTEXT:\tThere is at least one cove in Antarctica named after a place in Bulgaria.\nFOL:\texists x. exists y. exists z. (Cove(x) & LocatedIn(x, Antarctica) & NamedAfter(x, y) & BulgarianSettlement(y))\nANSWER:\tTrue\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin) & Settlement(Barutin, Bulgaria)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tLocatedIn(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall A. all B. all C. ((LocatedIn(A, B) & LocatedIn(B, C)) -> LocatedIn(A, C))\nTEXT:\tThere is at least one cove in Antarctica named after a place in Bulgaria.\nFOL:\texists x. (Cove(x) & LocatedIn(x, Antarctica) & NamedAfter(x, y) & Place(y, Bulgaria))\nANSWER:\tTrue\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin) & BulgarianSettlement(Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & PartOf(y, z)) -> LocatedIn(x, z))\nTEXT:\tThere is at least one cove in Antarctica named after a place in Bulgaria.\nFOL:\texists x. (Cove(x) & LocatedIn(x, Antarctica) & NamedAfter(x, y) & BulgarianPlace(y))\nANSWER:\tTrue\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin) & Settlement(Barutin) & Bulgarian(Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT:\tThere is at least one cove in Antarctica named after a place in Bulgaria.\nFOL:\texists x. (Cove(x) & LocatedIn(x, Antarctica) & exists y. (Place(y) & Bulgarian(y) & NamedAfter(x, y)))\nANSWER:\tTrue\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin) & Settlement(Barutin) & In(Bulgaria, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIn(SnowIsland, SouthShetlandIslands) & In(GreenwichIsland, SouthShetlandIslands) & In(DeceptionIsland, SouthShetlandIslands)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tIn(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\nTEXT:\tThere is at least one cove in Antarctica named after a place in Bulgaria.\nFOL:\texists x. (Cove(x) & LocatedIn(x, Antarctica) & exists y. (Place(y) & In(y, Bulgaria) & NamedAfter(x, y)))\nANSWER:\tTrue\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin) & BulgarianSettlement(Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & PartOf(y, z)) -> LocatedIn(x, z))\nTEXT:\tThere is at least one cove in Antarctica named after a place in Bulgaria.\nFOL:\texists x. (Cove(x) & LocatedIn(x, Antarctica) & exists y. (BulgarianPlace(y) & NamedAfter(x, y)))\nANSWER:\tTrue\n"], ["TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL:\t(GrowthCompanyStock(KO) | Volatile(KO)) -> (-CompanyStock(KO) & -Volatile(KO))\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL:\t((GrowthCompanyStock(KO) | Volatile(KO)) -> (-CompanyStock(KO) & -Volatile(KO)))\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL:\t((GrowthCompanyStock(KO) | Volatile(KO)) -> (-CompanyStock(KO) & -Volatile(KO)))\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL:\t((GrowthCompanyStock(KO) | Volatile(KO)) -> (-CompanyStock(KO) & -Volatile(KO)))\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL:\t(GrowthCompanyStock(KO) | Volatile(KO) -> -CompanyStock(KO) & -Volatile(KO))\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL:\t((GrowthCompanyStock(KO) | Volatile(KO)) -> (-CompanyStock(KO) & -Volatile(KO)))\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL:\t((GrowthCompanyStock(KO) | Volatile(KO)) -> (-CompanyStock(KO) & -Volatile(KO)))\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirement(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirement(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL:\t((GrowthCompanyStock(KO) | Volatile(KO)) -> (-CompanyStock(KO) & -Volatile(KO)))\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirement(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirement(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL:\t((GrowthCompanyStock(KO) | Volatile(KO)) -> -CompanyStock(KO) & -Volatile(KO))\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL:\t((GrowthCompanyStock(KO) | Volatile(KO)) -> (-CompanyStock(KO) & -Volatile(KO)))\nANSWER:\tFalse\n"], ["TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is not a turtle.\nFOL:\t-Turtle(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is not a turtle.\nFOL:\t-Turtle(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is not a turtle.\nFOL:\t-Turtle(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is not a turtle.\nFOL:\t-Turtle(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is not a turtle.\nFOL:\t-Turtle(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is not a turtle.\nFOL:\t-Turtle(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is not a turtle.\nFOL:\t-Turtle(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is not a turtle.\nFOL:\t-Turtle(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. Turtle(x)\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is not a turtle.\nFOL:\t-Turtle(Rock)\nANSWER:\tFalse\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is not a turtle.\nFOL:\t-Turtle(Rock)\nANSWER:\tUncertain\n"], ["TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngageSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) | InactiveDisinterestedMember(x))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDances(x) -> -AttendSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveDisinterestedMember(x) -> ChaperoneHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. (WishToFurtherAcademicCareer(x) -> AttendSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendAndEngageSchoolEvents(Bonnie) & AttendSchool(Bonnie)) | (-AttendAndEngageSchoolEvents(Bonnie) & -AttendSchool(Bonnie)))\nTEXT:\tBonnie performs in school talent shows often.\nFOL:\tPerformInSchoolTalentShowsOften(Bonnie)\nANSWER:\tTrue\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformSchoolTalentShowsOften(x) -> AttendEngagedSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. (PerformSchoolTalentShowsOften(x) | InactiveDisinterestedCommunity(x))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDances(x) -> -AttendSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveDisinterestedCommunity(x) -> ChaperoneHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. (YoungChildOrTeenager(x) & WishFurtherAcademicCareer(x) -> AttendSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendEngagedSchoolEvents(Bonnie) & AttendSchool(Bonnie)) | (-AttendEngagedSchoolEvents(Bonnie) & -AttendSchool(Bonnie)))\nTEXT:\tBonnie performs in school talent shows often.\nFOL:\tPerformSchoolTalentShowsOften(Bonnie)\nANSWER:\tTrue\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformTalentShowsOften(x) -> AttendSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. (PerformTalentShowsOften(x) | InactiveDisinterested(x))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. (WishFurtherAcademicCareer(x) -> Student(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendSchoolEvents(Bonnie) & Student(Bonnie)) | (-AttendSchoolEvents(Bonnie) & -Student(Bonnie)))\nTEXT:\tBonnie performs in school talent shows often.\nFOL:\tPerformTalentShowsOften(Bonnie)\nANSWER:\tTrue\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) | InactiveAndDisinterested(x))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. (YoungChildrenOrTeenagers(x) & WishToFurtherAcademicCareer(x) -> StudentWhoAttendSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendAndEngagedWithSchoolEvents(Bonnie) & StudentWhoAttendSchool(Bonnie)) | (-AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentWhoAttendSchool(Bonnie)))\nTEXT:\tBonnie performs in school talent shows often.\nFOL:\tPerformInSchoolTalentShowsOften(Bonnie)\nANSWER:\tTrue\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformTalentShowsOften(x) -> AttendEngagedSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. ((PerformTalentShowsOften(x) & -InactiveDisinterested(x)) | (-PerformTalentShowsOften(x) & InactiveDisinterested(x)))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDances(x) -> -StudentAttendSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. (YoungChildTeenagerAcademicCareer(x) -> StudentAttendSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendEngagedSchoolEvents(Bonnie) & StudentAttendSchool(Bonnie)) | (-AttendEngagedSchoolEvents(Bonnie) & -StudentAttendSchool(Bonnie)))\nTEXT:\tBonnie performs in school talent shows often.\nFOL:\tPerformTalentShowsOften(Bonnie)\nANSWER:\tUncertain\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformInTalentShowsOften(x) -> AttendAndEngagedSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. ((PerformInTalentShowsOften(x) & -InactiveAndDisinterested(x)) | (-PerformInTalentShowsOften(x) & InactiveAndDisinterested(x)))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDances(x) -> -StudentAtSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. (YoungOrTeenagerAndWishToFurtherEducation(x) -> StudentAtSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendAndEngagedSchoolEvents(Bonnie) & StudentAtSchool(Bonnie)) | (-AttendAndEngagedSchoolEvents(Bonnie) & -StudentAtSchool(Bonnie)))\nTEXT:\tBonnie performs in school talent shows often.\nFOL:\tPerformInTalentShowsOften(Bonnie)\nANSWER:\tTrue\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformInTalentShow(x) -> AttendAndEngagedSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. ((PerformInTalentShow(x) & -InactiveAndDisinterested(x)) | (-PerformInTalentShow(x) & InactiveAndDisinterested(x)))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. (YoungAndTeenagersWishFurtherAcademic(x) -> StudentWhoAttendSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendAndEngagedSchoolEvents(Bonnie) & StudentWhoAttendSchool(Bonnie)) | (-AttendAndEngagedSchoolEvents(Bonnie) & -StudentWhoAttendSchool(Bonnie)))\nTEXT:\tBonnie performs in school talent shows often.\nFOL:\tPerformInTalentShow(Bonnie)\nANSWER:\tTrue\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. ((PerformInSchoolTalentShowsOften(x) & -InactiveDisinterestedMember(x)) | (-PerformInSchoolTalentShowsOften(x) & InactiveDisinterestedMember(x)))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDances(x) -> -StudentAtSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveDisinterestedMember(x) -> ChaperoneHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. (WishToFurtherAcademicCareer(x) -> StudentAtSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendAndEngagedWithSchoolEvents(Bonnie) & StudentAtSchool(Bonnie)) | (-AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentAtSchool(Bonnie)))\nTEXT:\tBonnie performs in school talent shows often.\nFOL:\tPerformInSchoolTalentShowsOften(Bonnie)\nANSWER:\tTrue\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) | InactiveAndDisinterested(x))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. (YoungChildrenAndTeenagers(x) & WishToFurtherAcademicCareer(x) -> StudentWhoAttendSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendAndEngagedWithSchoolEvents(Bonnie) & StudentWhoAttendSchool(Bonnie)) | (-AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentWhoAttendSchool(Bonnie)))\nTEXT:\tBonnie performs in school talent shows often.\nFOL:\tPerformInSchoolTalentShowsOften(Bonnie)\nANSWER:\tTrue\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) | InactiveAndDisinterestedCommunityMember(x))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDances(x) -> -StudentAtSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveAndDisinterestedCommunityMember(x) -> ChaperoneHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. ((YoungChild(x) | Teenager(x)) & WishFurtherEducation(x) -> StudentAtSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendAndEngagedSchoolEvents(Bonnie) & StudentAtSchool(Bonnie)) | (-AttendAndEngagedSchoolEvents(Bonnie) & -StudentAtSchool(Bonnie)))\nTEXT:\tBonnie performs in school talent shows often.\nFOL:\tPerformInSchoolTalentShowsOften(Bonnie)\nANSWER:\tTrue\n"], ["TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet.\nFOL:\tPet(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet.\nFOL:\tPet(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet.\nFOL:\tPet(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet.\nFOL:\tPet(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet.\nFOL:\tPet(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet.\nFOL:\tPet(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet.\nFOL:\tPet(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet.\nFOL:\tPet(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet.\nFOL:\tPet(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an alligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet.\nFOL:\tPet(Ted)\nANSWER:\tFalse\n"], ["TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tPlatypus are reptiles.\nFOL:\tall x. (Platypus(x) -> Reptile(x))\nANSWER:\tFalse\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tPlatypus are reptiles.\nFOL:\tall x. (Platypus(x) -> Reptile(x))\nANSWER:\tUncertain\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HasTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HasTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HasTeeth(x))\nTEXT:\tPlatypus are reptiles.\nFOL:\tall x. (Platypus(x) -> Reptile(x))\nANSWER:\tFalse\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HasTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HasTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HasTeeth(x))\nTEXT:\tPlatypus are reptiles.\nFOL:\tall x. (Platypus(x) -> Reptile(x))\nANSWER:\tFalse\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tPlatypus are reptiles.\nFOL:\tall x. (Platypus(x) -> Reptile(x))\nANSWER:\tFalse\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tPlatypus are reptiles.\nFOL:\tall x. (Platypus(x) -> Reptile(x))\nANSWER:\tFalse\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tPlatypus are reptiles.\nFOL:\tall x. (Platypus(x) -> Reptile(x))\nANSWER:\tFalse\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tPlatypus are reptiles.\nFOL:\tall x. (Platypus(x) -> Reptile(x))\nANSWER:\tFalse\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tPlatypus are reptiles.\nFOL:\tall x. (Platypus(x) -> Reptile(x))\nANSWER:\tFalse\n", "TEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammal(x) & HaveTeeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tall x. (Platypus(x) -> -HaveTeeth(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) -> Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) -> HaveTeeth(x))\nTEXT:\tPlatypus are reptiles.\nFOL:\tall x. (Platypus(x) -> Reptile(x))\nANSWER:\tFalse\n"], ["TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelpRecommendations(x) -> -NegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (GreaterRatingThanNine(x) -> ListedInYelpRecommendations(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-TakeOutService(x) & NegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> GreaterRatingThanNine(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\tGreaterRatingThanNine(Subway) | PopularAmongLocalResidents(Subway)\nTEXT:\tSubway does not provide take-out service.\nFOL:\t-TakeOutService(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (YelpRecommend(x) -> NotManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> YelpRecommend(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (NotTakeOutService(x) & ManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocal(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t((RatingGreaterThan9(Subway) & -PopularAmongLocal(Subway)) | (-RatingGreaterThan9(Subway) & PopularAmongLocal(Subway)))\nTEXT:\tSubway does not provide take-out service.\nFOL:\tNotTakeOutService(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelp(x) -> -ManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelp(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocal(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\tRatingGreaterThan9(Subway) | PopularAmongLocal(Subway)\nTEXT:\tSubway does not provide take-out service.\nFOL:\t-ProvideTakeOutService(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelp(x) -> NotManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelp(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (NotProvideTakeout(x) & ManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocal(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t(RatingGreaterThan9(Subway) | PopularAmongLocal(Subway))\nTEXT:\tSubway does not provide take-out service.\nFOL:\tNotProvideTakeout(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (YelpRecommendation(x) -> -NegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-TakeOutService(x) & NegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocals(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t((RatingGreaterThan9(Subway) & -PopularAmongLocals(Subway)) | (-RatingGreaterThan9(Subway) & PopularAmongLocals(Subway)))\nTEXT:\tSubway does not provide take-out service.\nFOL:\t-TakeOutService(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelpRecommendations(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t(RatingGreaterThan9(Subway) | PopularAmongLocalResidents(Subway))\nTEXT:\tSubway does not provide take-out service.\nFOL:\t-ProvideTakeOutService(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelp(x) -> -NegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelp(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-TakeOutService(x) & NegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t(RatingGreaterThan9(Subway) | PopularAmongLocalResidents(Subway))\nTEXT:\tSubway does not provide take-out service.\nFOL:\t-TakeOutService(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelpsRecommendations(x) -> -NegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-ProvideTakeOutService(x) & NegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t((RatingGreaterThan9(Subway) & -PopularAmongResidents(Subway)) | (-RatingGreaterThan9(Subway) & PopularAmongResidents(Subway)))\nTEXT:\tSubway does not provide take-out service.\nFOL:\t-ProvideTakeOutService(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (YelpRecommend(x) -> -ManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> YelpRecommend(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\tRatingGreaterThan9(Subway) | PopularAmongLocalResidents(Subway)\nTEXT:\tSubway does not provide take-out service.\nFOL:\t-TakeOutService(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (RecommendedByYelp(x) -> -ManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> RecommendedByYelp(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t(RatingGreaterThan9(Subway) | PopularAmongLocalResidents(Subway))\nTEXT:\tSubway does not provide take-out service.\nFOL:\t-ProvideTakeOut(Subway)\nANSWER:\tUncertain\n"], ["TEXT:\tThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL:\t((MountainRange(PicurisMountains) & In(PicurisMountains, NewMexico)) | (MountainRange(PicurisMountains) & In(PicurisMountains, Texas)))\nTEXT:\tJuan de Onate visited the Picuris Mountains.\nFOL:\tVisited(JuanDeOnate, PicurisMountains)\nTEXT:\tThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL:\tLocatedIn(HardingPegmatiteMine, PicurisMountains) & Donated(HardingPegmatiteMine)\nTEXT:\tThere are no mountain ranges in texas that have mines which have been donated.\nFOL:\tall x. all y. ((MountainRange(x) & In(x, Texas) & Mine(y) & LocatedIn(y, x)) -> -Donated(y))\nTEXT:\tJuan de Onate visited a mountain range in Texas.\nFOL:\texists x. (Visited(JuanDeOnate, x) & MountainRange(x) & In(x, Texas))\nANSWER:\tUncertain\n", "TEXT:\tThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL:\t(MountainRange(PicurisMountains) & In(PicurisMountains, NewMexico)) | (MountainRange(PicurisMountains) & In(PicurisMountains, Texas))\nTEXT:\tJuan de Onate visited the Picuris Mountains.\nFOL:\tVisited(JuanDeOnate, PicurisMountains)\nTEXT:\tThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL:\tLocated(HardingPegmatiteMine, PicurisMountains) & Donated(HardingPegmatiteMine)\nTEXT:\tThere are no mountain ranges in texas that have mines which have been donated.\nFOL:\tall x. all y. (MountainRange(x) & In(x, Texas) & Located(y, x) & Mine(y) -> -Donated(y))\nTEXT:\tJuan de Onate visited a mountain range in Texas.\nFOL:\texists x. (Visited(JuanDeOnate, x) & MountainRange(x) & In(x, Texas))\nANSWER:\tUncertain\n", "TEXT:\tThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL:\t((MountainRange(PicurisMountains) & In(PicurisMountains, NewMexico)) | (MountainRange(PicurisMountains) & In(PicurisMountains, Texas)))\nTEXT:\tJuan de Onate visited the Picuris Mountains.\nFOL:\tVisited(JuanDeOnate, PicurisMountains)\nTEXT:\tThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL:\tLocated(HardingPegmatiteMine, PicurisMountains) & Donated(HardingPegmatiteMine)\nTEXT:\tThere are no mountain ranges in texas that have mines which have been donated.\nFOL:\tall x. all y. ((MountainRange(x) & In(x, Texas) & Located(y, x) & Mine(y)) -> -Donated(y))\nTEXT:\tJuan de Onate visited a mountain range in Texas.\nFOL:\texists x. (Visited(JuanDeOnate, x) & MountainRange(x) & In(x, Texas))\nANSWER:\tUncertain\n", "TEXT:\tThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL:\t((MountainRange(PicurisMountains) & In(PicurisMountains, NewMexico)) | (MountainRange(PicurisMountains) & In(PicurisMountains, Texas)))\nTEXT:\tJuan de Onate visited the Picuris Mountains.\nFOL:\tVisited(JuanDeOnate, PicurisMountains)\nTEXT:\tThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL:\tDonated(HardingPegmatiteMine) & LocatedIn(HardingPegmatiteMine, PicurisMountains)\nTEXT:\tThere are no mountain ranges in texas that have mines which have been donated.\nFOL:\tall x. all y. ((MountainRange(x) & In(x, Texas) & Mine(y) & LocatedIn(y, x) & Donated(y)) -> False)\nTEXT:\tJuan de Onate visited a mountain range in Texas.\nFOL:\texists x. (MountainRange(x) & In(x, Texas) & Visited(JuanDeOnate, x))\nANSWER:\tFalse\n", "TEXT:\tThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL:\t((MountainRange(PicurisMountains) & In(PicurisMountains, NewMexico)) | (MountainRange(PicurisMountains) & In(PicurisMountains, Texas)))\nTEXT:\tJuan de Onate visited the Picuris Mountains.\nFOL:\tVisited(JuandeOnate, PicurisMountains)\nTEXT:\tThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL:\tDonated(HardingPegmatiteMine) & Located(HardingPegmatiteMine, PicurisMountains)\nTEXT:\tThere are no mountain ranges in texas that have mines which have been donated.\nFOL:\tall x. all y. ((MountainRange(x) & In(x, Texas) & Mine(y) & In(y, x)) -> -Donated(y))\nTEXT:\tJuan de Onate visited a mountain range in Texas.\nFOL:\texists x. (Visited(JuandeOnate, x) & MountainRange(x) & In(x, Texas))\nANSWER:\tFalse\n", "TEXT:\tThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL:\tMountainRange(PicurisMountains) & (In(PicurisMountains, NewMexico) | In(PicurisMountains, Texas))\nTEXT:\tJuan de Onate visited the Picuris Mountains.\nFOL:\tVisited(JuanDeOnate, PicurisMountains)\nTEXT:\tThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL:\tLocated(HardingPegmatiteMine, PicurisMountains) & Donated(HardingPegmatiteMine)\nTEXT:\tThere are no mountain ranges in texas that have mines which have been donated.\nFOL:\tall x. all y. (MountainRange(x) & In(x, Texas) & Located(y, x) -> -Donated(y))\nTEXT:\tJuan de Onate visited a mountain range in Texas.\nFOL:\texists x. (MountainRange(x) & In(x, Texas) & Visited(JuanDeOnate, x))\nANSWER:\tFalse\n", "TEXT:\tThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL:\t((MountainRange(PicurisMountains) & In(PicurisMountains, NewMexico)) | (MountainRange(PicurisMountains) & In(PicurisMountains, Texas)))\nTEXT:\tJuan de Onate visited the Picuris Mountains.\nFOL:\tVisited(JuanDeOnate, PicurisMountains)\nTEXT:\tThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL:\tLocated(HardingPegmatiteMine, PicurisMountains) & Donated(HardingPegmatiteMine)\nTEXT:\tThere are no mountain ranges in texas that have mines which have been donated.\nFOL:\tall x. all y. all z. ((MountainRange(x) & In(x, Texas) & Mine(y) & Located(y, x) & Donated(y)) -> -Existence(z))\nTEXT:\tJuan de Onate visited a mountain range in Texas.\nFOL:\texists x. (MountainRange(x) & In(x, Texas) & Visited(JuanDeOnate, x))\nANSWER:\tUncertain\n", "TEXT:\tThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL:\t((Location(PicurisMountains, NewMexico) & -Location(PicurisMountains, Texas)) | (-Location(PicurisMountains, NewMexico) & Location(PicurisMountains, Texas)))\nTEXT:\tJuan de Onate visited the Picuris Mountains.\nFOL:\tVisited(JuanDeOnate, PicurisMountains)\nTEXT:\tThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL:\tLocation(HardingPegmatiteMine, PicurisMountains) & Donated(HardingPegmatiteMine)\nTEXT:\tThere are no mountain ranges in texas that have mines which have been donated.\nFOL:\tall x. all y. (MountainRange(x) & Location(x, Texas) & Mine(y) & Location(y, x) -> -Donated(y))\nTEXT:\tJuan de Onate visited a mountain range in Texas.\nFOL:\texists x. (MountainRange(x) & Location(x, Texas) & Visited(JuanDeOnate, x))\nANSWER:\tUncertain\n", "TEXT:\tThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL:\t((MountainRange(PicurisMountains) & In(PicurisMountains, NewMexico)) | (MountainRange(PicurisMountains) & In(PicurisMountains, Texas)))\nTEXT:\tJuan de Onate visited the Picuris Mountains.\nFOL:\tVisited(JuanDeOnate, PicurisMountains)\nTEXT:\tThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL:\tDonated(HardingPegmatiteMine) & LocatedIn(HardingPegmatiteMine, PicurisMountains)\nTEXT:\tThere are no mountain ranges in texas that have mines which have been donated.\nFOL:\tall x. all y. (MountainRange(x) & In(x, Texas) & LocatedIn(y, x) -> -Donated(y))\nTEXT:\tJuan de Onate visited a mountain range in Texas.\nFOL:\texists x. (MountainRange(x) & In(x, Texas) & Visited(JuanDeOnate, x))\nANSWER:\tUncertain\n", "TEXT:\tThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL:\t((MountainRange(PicurisMountains) & In(PicurisMountains, NewMexico)) | (MountainRange(PicurisMountains) & In(PicurisMountains, Texas)))\nTEXT:\tJuan de Onate visited the Picuris Mountains.\nFOL:\tVisited(JuanDeOnate, PicurisMountains)\nTEXT:\tThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL:\tLocated(HardingPegmatiteMine, PicurisMountains) & Donated(HardingPegmatiteMine)\nTEXT:\tThere are no mountain ranges in texas that have mines which have been donated.\nFOL:\tall x. all y. (MountainRange(x) & In(x, Texas) & Located(y, x) -> -Donated(y))\nTEXT:\tJuan de Onate visited a mountain range in Texas.\nFOL:\texists x. (Visited(JuanDeOnate, x) & MountainRange(x) & In(x, Texas))\nANSWER:\tUncertain\n"], ["TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> Child(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (HoneymoonParis(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (JulyWedding(x) -> HoneymoonParis(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (JulyWedding(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tChild(John) -> (-HoneymoonParis(John) & -Wedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(WellAttendedWedding(John) -> (JulyWedding(John) | HoneymoonParis(John)))\nTEXT:\tJohn has a wedding that is well-attended.\nFOL:\tWellAttendedWedding(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> HaveChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHaveChild(John) -> -TravelToParisForHoneymoon(John) & -Wedding(John)\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(WellAttendedWedding(John) -> WeddingInJuly(John)) | (WellAttendedWedding(John) -> TravelToParisForHoneymoon(John))\nTEXT:\tJohn has a wedding that is well-attended.\nFOL:\tWellAttendedWedding(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> HaveChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHaveChild(John) -> (-TravelToParisForHoneymoon(John) & -Wedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(Wedding(John) & WellAttended(John)) -> (WeddingInJuly(John) | TravelToParisForHoneymoon(John))\nTEXT:\tJohn has a wedding that is well-attended.\nFOL:\tWedding(John) & WellAttended(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (HasWedding(x) -> HasChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParis(x) -> HasWedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParis(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHasChild(John) -> (-TravelToParis(John) & -HasWedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(WellAttended(John) & HasWedding(John)) -> (WeddingInJuly(John) | TravelToParis(John))\nTEXT:\tJohn has a wedding that is well-attended.\nFOL:\tWellAttended(John) & HasWedding(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHasAtLeastOneChild(John) -> (-TravelToParisForHoneymoon(John) & -HasWedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\tHasWedding(John) & WellAttended(John) -> (WeddingInJuly(John) | TravelToParisForHoneymoon(John))\nTEXT:\tJohn has a wedding that is well-attended.\nFOL:\tHasWedding(John) & WellAttended(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> Child(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (HoneymoonParis(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingJuly(x) -> HoneymoonParis(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tChild(John) -> (-HoneymoonParis(John) & -Wedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(WellAttended(John) & Wedding(John)) -> (WeddingJuly(John) | HoneymoonParis(John))\nTEXT:\tJohn has a wedding that is well-attended.\nFOL:\tWellAttended(John) & Wedding(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHasAtLeastOneChild(John) -> (-TravelToParisForHoneymoon(John) & -HasWedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(HasWedding(John) & WellAttended(John)) -> (WeddingInJuly(John) | TravelToParisForHoneymoon(John))\nTEXT:\tJohn has a wedding that is well-attended.\nFOL:\tHasWedding(John) & WellAttended(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (HasWedding(x) -> HasChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHasChild(John) -> (-TravelToParisForHoneymoon(John) & -HasWedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\tHasWedding(John) & WellAttended(John) -> (WeddingInJuly(John) | TravelToParisForHoneymoon(John))\nTEXT:\tJohn has a wedding that is well-attended.\nFOL:\tHasWedding(John) & WellAttended(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelsToParisForHoneymoon(x) -> HasWedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelsToParisForHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHasAtLeastOneChild(John) -> (-TravelsToParisForHoneymoon(John) & -HasWedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(HasWedding(John) & WellAttended(John)) -> (WeddingInJuly(John) | TravelsToParisForHoneymoon(John))\nTEXT:\tJohn has a wedding that is well-attended.\nFOL:\tHasWedding(John) & WellAttended(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> OneChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParis(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (JulyWedding(x) -> TravelToParis(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (JulyWedding(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tOneChild(John) -> -TravelToParis(John) & -Wedding(John)\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\tWellAttended(John) -> JulyWedding(John) | TravelToParis(John)\nTEXT:\tJohn has a wedding that is well-attended.\nFOL:\tWellAttended(John)\nANSWER:\tUncertain\n"], ["TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL:\tall x. ((ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))\nANSWER:\tFalse\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL:\tall x. ((ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))\nANSWER:\tFalse\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL:\tall x. ((ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))\nANSWER:\tFalse\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL:\tall x. ((ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))\nANSWER:\tFalse\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL:\tall x. ((ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))\nANSWER:\tFalse\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL:\tall x. (((ColorectalCancer(x) & BileDuctCancer(x)) | Cholangiocarcinoma(x)) -> (BileDuctCancer(x) & MildFlu(x)))\nANSWER:\tFalse\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL:\tall x. ((ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))\nANSWER:\tFalse\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL:\tall x. ((ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))\nANSWER:\tFalse\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL:\tall x. ((ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))\nANSWER:\tFalse\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL:\tall x. ((ColorectalCancer(x) & BileDuctCancer(x)) | Cholangiocarcinoma(x) -> (BileDuctCancer(x) & MildFlu(x)))\nANSWER:\tFalse\n"], ["TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (HaveSameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> HaveSameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (NotLiveAtHomeRegularly(x) -> NotDevelopStrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> NotLiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((TwinOrTriplet(Luke) & DevelopsStrongBonds(Luke)) | (-TwinOrTriplet(Luke) & -DevelopsStrongBonds(Luke)))\nTEXT:\tLuke spends a lot of time hanging out and playing with his siblings.\nFOL:\tSpendTimeWithSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (HaveSameAgeSiblings(x) -> (Twin(x) | Triplet(x)))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> HaveSameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((Twin(Luke) | Triplet(Luke)) & StrongBonds(Luke)) | (-(Twin(Luke) | Triplet(Luke)) & -StrongBonds(Luke))\nTEXT:\tLuke spends a lot of time hanging out and playing with his siblings.\nFOL:\tSpendTimeWithSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (NotLiveAtHomeRegularly(x) -> NotStrongFamilyBond(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> NotLiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((TwinOrTriplet(Luke) & StrongFamilyBond(Luke)) | (-TwinOrTriplet(Luke) & -StrongFamilyBond(Luke)))\nTEXT:\tLuke spends a lot of time hanging out and playing with his siblings.\nFOL:\tSpendTimeWithSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (NotLiveAtHomeRegularly(x) -> NotDevelopStrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> NotLiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((TwinOrTriplet(Luke) & DevelopStrongBonds(Luke)) | (-TwinOrTriplet(Luke) & -DevelopStrongBonds(Luke)))\nTEXT:\tLuke spends a lot of time hanging out and playing with his siblings.\nFOL:\tSpendTimeWithSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> (Twin(x) | Triplet(x)))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHomeRegularly(x) -> -StrongFamilyBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((Twin(Luke) | Triplet(Luke)) & StrongFamilyBonds(Luke)) | (-Twin(Luke) & -Triplet(Luke) & -StrongFamilyBonds(Luke))\nTEXT:\tLuke spends a lot of time hanging out and playing with his siblings.\nFOL:\tSpendTimeWithSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. (TwinsOrTriplets(x) -> HangOutWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (NotLiveAtHome(x) -> NotStrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (HangOutWithSiblings(x) -> NotLiveAtHome(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((TwinsOrTriplets(Luke) & StrongBonds(Luke)) | (-TwinsOrTriplets(Luke) & -StrongBonds(Luke)))\nTEXT:\tLuke spends a lot of time hanging out and playing with his siblings.\nFOL:\tHangOutWithSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (NotLiveAtHomeRegularly(x) -> -StrongBondsFamily(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> NotLiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((TwinOrTriplet(Luke) & StrongBondsFamily(Luke)) | (-TwinOrTriplet(Luke) & -StrongBondsFamily(Luke)))\nTEXT:\tLuke spends a lot of time hanging out and playing with his siblings.\nFOL:\tSpendTimeWithSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> (Twin(x) | Triplet(x)))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHomeRegularly(x) -> -StrongFamilyBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((Twin(Luke) | Triplet(Luke)) & StrongFamilyBonds(Luke)) | ((-Twin(Luke) & -Triplet(Luke)) & -StrongFamilyBonds(Luke))\nTEXT:\tLuke spends a lot of time hanging out and playing with his siblings.\nFOL:\tSpendTimeWithSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (NotLiveAtHomeRegularly(x) -> NotStrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> NotLiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((TwinOrTriplet(Luke) & StrongBonds(Luke)) | (-TwinOrTriplet(Luke) & -StrongBonds(Luke)))\nTEXT:\tLuke spends a lot of time hanging out and playing with his siblings.\nFOL:\tSpendTimeWithSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> (Twin(x) | Triplet(x)))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((Twin(Luke) | Triplet(Luke)) & StrongBonds(Luke)) | (-(Twin(Luke) | Triplet(Luke)) & -StrongBonds(Luke))\nTEXT:\tLuke spends a lot of time hanging out and playing with his siblings.\nFOL:\tSpendTimeWithSiblings(Luke)\nANSWER:\tUncertain\n"], ["TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock and a growth company\u2019s stock.\nFOL:\tCompanyStock(KO) & GrowthCompanyStock(KO)\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock and a growth company\u2019s stock.\nFOL:\tCompanyStock(KO) & GrowthCompanyStock(KO)\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock and a growth company\u2019s stock.\nFOL:\tCompanyStock(KO) & GrowthCompanyStock(KO)\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> NotSuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock and a growth company\u2019s stock.\nFOL:\tCompanyStock(KO) & GrowthCompanyStock(KO)\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock and a growth company\u2019s stock.\nFOL:\tCompanyStock(KO) & GrowthCompanyStock(KO)\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock and a growth company\u2019s stock.\nFOL:\tCompanyStock(KO) & GrowthCompanyStock(KO)\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock and a growth company\u2019s stock.\nFOL:\tCompanyStock(KO) & GrowthCompanyStock(KO)\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock and a growth company\u2019s stock.\nFOL:\tCompanyStock(KO) & GrowthCompanyStock(KO)\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock and a growth company\u2019s stock.\nFOL:\tCompanyStock(KO) & GrowthCompanyStock(KO)\nANSWER:\tFalse\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock and a growth company\u2019s stock.\nFOL:\tCompanyStock(KO) & GrowthCompanyStock(KO)\nANSWER:\tFalse\n"], ["TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\texists x. (InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. (MonkeypoxVirus(x) & CanOccurIn(x, AnimalOrHuman))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tSymptoms(Monkeypox) = {Fever, Headache, MusclePains, FeelingTired, ...}\nTEXT:\tPeople feel tired when they get a glu.\nFOL:\tall x. (GotFlu(x) -> FeelsTired(x))\nTEXT:\tThere is an animal.\nFOL:\texists x. (Animal(x))\nANSWER:\tTrue\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tall x. (Monkeypox(x) -> InfectiousDisease(x) & Cause(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. (Occur(MonkeypoxVirus, x) & Animals(x) | Humans(x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Humans(x) -> Mammals(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammals(x) -> Animals(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tall x. (Monkeypox(x) -> Symptoms(x, Fever, Headache, MusclePains, Tired))\nTEXT:\tPeople feel tired when they get a glu.\nFOL:\tall x. (GetFlu(x) -> FeelTired(x))\nTEXT:\tThere is an animal.\nFOL:\texists x. (Animals(x))\nANSWER:\tTrue\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\texists x. (InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. exists y. (CanOccur(x, y) & MonkeypoxVirus(x) & AnimalIncludingHuman(y))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\texists x. (Symptoms(x, Monkeypox) & Include(x, Fever, Headache, MusclePains, FeelingTired))\nTEXT:\tPeople feel tired when they get a glu.\nFOL:\tall x. (People(x) & GetsFlu(x) -> FeelsTired(x))\nTEXT:\tThere is an animal.\nFOL:\texists x. (Animal(x))\nANSWER:\tTrue\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\texists x. (Disease(x) & Infectious(x) & CausedBy(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. (Animal(x) & CanOccurIn(MonkeypoxVirus, x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\texists x. (Symptons(x) & Of(x, Monkeypox) & Include(x, Fever, Headache, MusclePains, FeelingTired))\nTEXT:\tPeople feel tired when they get a glu.\nFOL:\tall x. (People(x) & Get(x, Glu) -> Feel(x, Tired))\nTEXT:\tThere is an animal.\nFOL:\texists x. (Animal(x))\nANSWER:\tTrue\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\texists x. (Disease(x) & Infectious(x) & CausedBy(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. (MonkeypoxVirus(x) & CanOccurIn(x, Animals))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\texists x. (Symptons(x) & Of(x, Monkeypox) & Include(x, Fever, Headache, MusclePains, FeelingTired))\nTEXT:\tPeople feel tired when they get a flu.\nFOL:\tall x. (GetFlu(x) -> FeelTired(x))\nTEXT:\tThere is an animal.\nFOL:\texists x. (Animal(x))\nANSWER:\tTrue\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\texists x. (InfectiousDisease(x) & CauseOf(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. (Animal(x) & CanOccur(MonkeypoxVirus, x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\texists x. (Symptoms(x) & Of(x, Monkeypox) & Include(x, [Fever, Headache, MusclePains, FeelingTired]))\nTEXT:\tPeople feel tired when they get a flu.\nFOL:\tall x. (Get(x, Flu) -> FeelTired(x))\nTEXT:\tThere is an animal.\nFOL:\texists x. (Animal(x))\nANSWER:\tTrue\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\texists x. (Monkeypox(x) & InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. (MonkeypoxVirus(x) & OccurIn(x, Animals) & OccurIn(x, Humans))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tall x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\nTEXT:\tPeople feel tired when they get a glu.\nFOL:\tall x. all y. (People(x) & Get(x, y) & Flu(y) -> FeelingTired(x))\nTEXT:\tThere is an animal.\nFOL:\texists x. (Animal(x))\nANSWER:\tTrue\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\texists x. (Disease(x) & CausedBy(x, MonkeypoxVirus) & Infectious(x) & Monkeypox(x))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. (Animal(x) & CanOccurIn(MonkeypoxVirus, x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\texists x. (Disease(x) & Monkeypox(x) & Symptoms(x, [Fever, Headache, MusclePains, Tired]))\nTEXT:\tPeople feel tired when they get a glu.\nFOL:\tall x. (Human(x) & Get(x, Flu) -> Feel(x, Tired))\nTEXT:\tThere is an animal.\nFOL:\texists x. (Animal(x))\nANSWER:\tTrue\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tExists x. (InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\tExists x. (Occurs(MonkeypoxVirus, x) & Animal(x) | Human(x))\nTEXT:\tHumans are mammals.\nFOL:\tAll x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tAll x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tExists x. (Symptoms(x) & Of(x, Monkeypox) & Include(x, [Fever, Headache, MusclePains, FeelingTired]))\nTEXT:\tPeople feel tired when they get a flu.\nFOL:\tAll x. (Get(x, Flu) -> FeelTired(x))\nTEXT:\tThere is an animal.\nFOL:\tExists x. (Animal(x))\nANSWER:\tTrue\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tExists x. (Monkeypox(x) -> InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\tExists x. (MonkeypoxVirus(x) -> CanOccurIn(x, Animals) | CanOccurIn(x, Humans))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Humans(x) -> Mammals(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammals(x) -> Animals(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tExists x. (Monkeypox(x) -> Symptoms(x, [Fever, Headache, MusclePains, FeelingTired, etc]))\nTEXT:\tPeople feel tired when they get a glu.\nFOL:\tall x. (GetAGlu(x) -> FeelTired(x))\nTEXT:\tThere is an animal.\nFOL:\tExists x. (Animals(x))\nANSWER:\tTrue\n"], ["TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\tFromTheSimpsons(Ben) | Funny(Ben)\nTEXT:\tBen is loved by children.\nFOL:\tLovedByChildren(Ben)\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is loved by children.\nFOL:\tLovedByChildren(Ben)\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is loved by children.\nFOL:\tLovedByChildren(Ben)\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is loved by children.\nFOL:\tLovedByChildren(Ben)\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\tFromTheSimpsons(Ben) | Funny(Ben)\nTEXT:\tBen is loved by children.\nFOL:\tLovedByChildren(Ben)\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is loved by children.\nFOL:\tLovedByChildren(Ben)\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is loved by children.\nFOL:\tLovedByChildren(Ben)\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is loved by children.\nFOL:\tLovedByChildren(Ben)\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is loved by children.\nFOL:\tLovedByChildren(Ben)\nANSWER:\tTrue\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is loved by children.\nFOL:\tLovedByChildren(Ben)\nANSWER:\tTrue\n"], ["TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10List(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellsMoreThanMillion(x) -> Top10List(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMoreThanMillion(LegendOfZelda)\nTEXT:\tThe Legend of Zelda is not in the Top 10 list.\nFOL:\t-Top10List(LegendOfZelda)\nANSWER:\tFalse\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, TheLegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (InTop10(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellMoreThanMillionCopies(x) -> InTop10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellMoreThanMillionCopies(TheLegendOfZelda)\nTEXT:\tThe Legend of Zelda is not in the Top 10 list.\nFOL:\t-InTop10(TheLegendOfZelda)\nANSWER:\tFalse\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, TheLegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10List(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellsMoreThanOneMillion(x) -> Top10List(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMoreThanOneMillion(TheLegendOfZelda)\nTEXT:\tThe Legend of Zelda is not in the Top 10 list.\nFOL:\t-Top10List(TheLegendOfZelda)\nANSWER:\tFalse\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellsMoreThanOneMillionCopies(x) -> Top10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMoreThanOneMillionCopies(LegendOfZelda)\nTEXT:\tThe Legend of Zelda is not in the Top 10 list.\nFOL:\t-Top10(LegendOfZelda)\nANSWER:\tFalse\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, Zelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\t[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SoldMoreThanOneMillion(x) -> Top10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSoldMoreThanOneMillion(Zelda)\nTEXT:\tThe Legend of Zelda is not in the Top 10 list.\nFOL:\t-Top10(Zelda)\nANSWER:\tFalse\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (InTop10(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellMoreThanMillionCopies(x) -> InTop10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellMoreThanMillionCopies(LegendOfZelda)\nTEXT:\tThe Legend of Zelda is not in the Top 10 list.\nFOL:\t-InTop10(LegendOfZelda)\nANSWER:\tFalse\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (InTop10(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellMoreThanMillionCopies(x) -> InTop10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellMoreThanMillionCopies(LegendOfZelda)\nTEXT:\tThe Legend of Zelda is not in the Top 10 list.\nFOL:\t-InTop10(LegendOfZelda)\nANSWER:\tFalse\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, Zelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellsMoreThanOneMillion(x) -> Top10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMoreThanOneMillion(Zelda)\nTEXT:\tThe Legend of Zelda is not in the Top 10 list.\nFOL:\t-Top10(Zelda)\nANSWER:\tFalse\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellsMoreThanOneMillionCopies(x) -> Top10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMoreThanOneMillionCopies(LegendOfZelda)\nTEXT:\tThe Legend of Zelda is not in the Top 10 list.\nFOL:\t-Top10(LegendOfZelda)\nANSWER:\tFalse\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (InTop10List(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SoldMoreThanMillion(x) -> InTop10List(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSoldMoreThanMillion(LegendOfZelda)\nTEXT:\tThe Legend of Zelda is not in the Top 10 list.\nFOL:\t-InTop10List(LegendOfZelda)\nANSWER:\tFalse\n"], ["TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tfor all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tfor all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tfor all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tfor all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tfor all x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tfor all x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tfor all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic is a Grand Slam champion.\nFOL:\tGrandSlamChampion(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHavens(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic is a Grand Slam champion.\nFOL:\tGrandSlamChampion(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic is a Grand Slam champion.\nFOL:\tGrandSlamChampion(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHavens(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic) -> WellPaid(Djokovic))\nTEXT:\tDjokovic is a Grand Slam champion.\nFOL:\tGrandSlamChampion(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic is a Grand Slam champion.\nFOL:\tGrandSlamChampion(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tfor all x. ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tfor all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tfor all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tfor all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tfor all x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tfor all x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tfor all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic is a Grand Slam champion.\nFOL:\tGrandSlamChampion(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tforall x. (Person(x) -> GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tforall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tforall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tforall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tforall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tforall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tforall x. (WellPaid(x) -> LiveInTaxHavens(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic is a Grand Slam champion.\nFOL:\tGrandSlamChampion(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic is a Grand Slam champion.\nFOL:\tGrandSlamChampion(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LivesInTaxHavens(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic is a Grand Slam champion.\nFOL:\tGrandSlamChampion(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic is a Grand Slam champion.\nFOL:\tGrandSlamChampion(Djokovic)\nANSWER:\tUncertain\n"], ["TEXT:\tPlungers suck.\nFOL:\tSuck(Plunger)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuum)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampire)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tall x. (Duster(x) -> -Suck(x))\nTEXT:\tSpace is a vampire.\nFOL:\tVampire(Space)\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plungers)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuums)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampires)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tAppliance(Duster) & -Suck(Duster)\nTEXT:\tSpace is a vampire.\nFOL:\tVampire(Space)\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plunger)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuum)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampire)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tAppliance(Duster) & -Suck(Duster)\nTEXT:\tSpace is a vampire.\nFOL:\tVampire(Space)\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plunger)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuum)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampire)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tAppliance(Duster) & -Suck(Duster)\nTEXT:\tSpace is a vampire.\nFOL:\tVampire(Space)\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plungers)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuums)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampires)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\t-Appliance(Duster) & -Suck(Duster)\nTEXT:\tSpace is a vampire.\nFOL:\tVampire(Space)\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plungers)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuums)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampires)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tAppliance(Duster) & -Suck(Duster)\nTEXT:\tSpace is a vampire.\nFOL:\tVampire(Space)\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plunger)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuum)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampire)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tall x. (Duster(x) -> -Suck(x))\nTEXT:\tSpace is a vampire.\nFOL:\tVampire(Space)\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plunger)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuum)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampire)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tHouseholdAppliance(Duster) & -Suck(Duster)\nTEXT:\tSpace is a vampire.\nFOL:\tVampire(Space)\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plungers)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuums)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampires)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tAppliance(Duster) & -Suck(Duster)\nTEXT:\tSpace is a vampire.\nFOL:\tVampire(Space)\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plunger)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuum)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampire)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tAppliance(Duster) & -Suck(Duster)\nTEXT:\tSpace is a vampire.\nFOL:\tVampire(Space)\nANSWER:\tFalse\n"], ["TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. (InternationalStudent(x) & F1Visa(x) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudent(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tApplyCPT(Mike)\nTEXT:\tMike has an F1 visa.\nFOL:\tF1Visa(Mike)\nANSWER:\tTrue\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudent(x) & InUS(x) -> (F1visa(x) | J1visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. ((InternationalStudent(x) & InUS(x) & F1visa(x) & WantsToWorkInUS(x)) -> NeedsToApplyForCPTorOPT(x))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudent(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tWantsToWorkInUS(Mike) -> NeedsToApplyForCPT(Mike)\nTEXT:\tMike has an F1 visa.\nFOL:\tF1visa(Mike)\nANSWER:\tTrue\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. ((InternationalStudentInUS(x) & F1Visa(x)) -> (WantsToWorkInUS(x) -> ApplyForCPTorOPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudentInUS(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tWantsToWorkInUS(Mike) -> ApplyForCPT(Mike)\nTEXT:\tMike has an F1 visa.\nFOL:\tF1Visa(Mike)\nANSWER:\tTrue\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudentUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. ((InternationalStudentUS(x) & F1Visa(x) & WantsToWorkUS(x)) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudentUS(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tWantsToWorkUS(Mike) -> ApplyCPT(Mike)\nTEXT:\tMike has an F1 visa.\nFOL:\tF1Visa(Mike)\nANSWER:\tTrue\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudent(x) & In(x, US) -> (F1visa(x) | J1visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. (InternationalStudent(x) & In(x, US) & F1visa(x) -> (NeedCPTtoWork(x) | NeedOPTtoWork(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudent(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tNeedCPTtoWork(Mike)\nTEXT:\tMike has an F1 visa.\nFOL:\tF1visa(Mike)\nANSWER:\tTrue\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. ((InternationalStudentInUS(x) & F1Visa(x)) -> (NeedsToApplyCPT(x) | NeedsToApplyOPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudentInUS(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tWantsToWorkInUS(Mike) -> NeedsToApplyCPT(Mike)\nTEXT:\tMike has an F1 visa.\nFOL:\tF1Visa(Mike)\nANSWER:\tTrue\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. (InternationalStudentInUS(x) & F1Visa(x) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudentInUS(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tApplyCPT(Mike)\nTEXT:\tMike has an F1 visa.\nFOL:\tF1Visa(Mike)\nANSWER:\tTrue\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudentUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. (InternationalStudentUS(x) & F1Visa(x) & WantsToWorkUS(x) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudentUS(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tWantsToWorkUS(Mike) -> ApplyCPT(Mike)\nTEXT:\tMike has an F1 visa.\nFOL:\tF1Visa(Mike)\nANSWER:\tTrue\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. ((InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x)) -> ApplyForCPTorOPT(x))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudentInUS(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tWantsToWorkInUS(Mike) -> ApplyForCPT(Mike)\nTEXT:\tMike has an F1 visa.\nFOL:\tF1Visa(Mike)\nANSWER:\tTrue\n", "TEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. (InternationalStudentInUS(x) -> (F1visa(x) | J1visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. ((InternationalStudentInUS(x) & F1visa(x) & WantsToWorkInUS(x)) -> (NeedsToApplyForCPT(x) | NeedsToApplyForOPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudentInUS(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tWantsToWorkInUS(Mike) -> NeedsToApplyForCPT(Mike)\nTEXT:\tMike has an F1 visa.\nFOL:\tF1visa(Mike)\nANSWER:\tUncertain\n"], ["TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignByZahaHadid(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\tDesignByZahaHadid(x) | DesignByKellyWearstler(x)\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignByKellyWearstler(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignByKellyWearstler(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignByMax(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is a mass product design.\nFOL:\tMassProductDesign(DesignByMax)\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\tZahaHadidDesign(x) | KellyWearstlerDesign(x)\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (MaxDesign(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is a mass product design.\nFOL:\tMassProductDesign(MaxDesign)\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (ZahaHadidDesignStyle(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\texists x. (ZahaHadidDesignStyle(x) | KellyWearstlerDesignStyle(x))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (MaxDesign(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is a mass product design.\nFOL:\tMassProductDesign(MaxDesign)\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignStyleZahaHadid(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\tDesignStyleZahaHadid(x) | DesignStyleKellyWearstler(x)\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignMax(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is a mass product design.\nFOL:\tMassProductDesign(MaxDesign)\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignStyleZahaHadid(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\t(DesignStyleZahaHadid(x) | DesignStyleKellyWearstler(x))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignByMax(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is a mass product design.\nFOL:\tMassProductDesign(DesignByMax)\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignByZahaHadid(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\t(DesignByZahaHadid(Design) & -DesignByKellyWearstler(Design)) | (-DesignByZahaHadid(Design) & DesignByKellyWearstler(Design))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignByKellyWearstler(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignByKellyWearstler(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignByMax(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is a mass product design.\nFOL:\tDesignByMax(Design) & MassProductDesign(Design)\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignStyleZahaHadid(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\texists x. (DesignStyleZahaHadid(x)) | exists x. (DesignStyleKellyWearstler(x))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignMax(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is a mass product design.\nFOL:\texists x. (DesignMax(x) & MassProductDesign(x))\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignStyleZahaHadid(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\tDesignStyleZahaHadid(x) | DesignStyleKellyWearstler(x)\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignMax(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is a mass product design.\nFOL:\tDesignMax(x) -> MassProductDesign(x)\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignStyleZahaHadid(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\t(exists x. DesignStyleZahaHadid(x)) | (exists x. DesignStyleKellyWearstler(x))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignMax(x) & Timeless(x) -> MassProductDesign(x) & Evocative(x))\nTEXT:\tA design by Max is a mass product design.\nFOL:\texists x. (DesignMax(x) & MassProductDesign(x))\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignZaha(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\t(DesignZaha(x) | DesignKelly(x))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignKelly(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignKelly(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignMax(x) & Timeless(x) -> MassProductDesign(x) & Evocative(x))\nTEXT:\tA design by Max is a mass product design.\nFOL:\tMassProductDesign(DesignMax)\nANSWER:\tUncertain\n"], ["TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) & -Funny(Ben)) | (-FromTheSimpsons(Ben) & Funny(Ben))\nTEXT:\tBen is either yellow and ugly or neither yellow nor ugly.\nFOL:\t((Yellow(Ben) & Ugly(Ben)) | (-Yellow(Ben) & -Ugly(Ben)))\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is either yellow and ugly or neither yellow nor ugly.\nFOL:\t((Yellow(Ben) & Ugly(Ben)) | (-Yellow(Ben) & -Ugly(Ben)))\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t((FromTheSimpsons(Ben) & -Funny(Ben)) | (-FromTheSimpsons(Ben) & Funny(Ben)))\nTEXT:\tBen is either yellow and ugly or neither yellow nor ugly.\nFOL:\t((Yellow(Ben) & Ugly(Ben)) | (-Yellow(Ben) & -Ugly(Ben)))\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is either yellow and ugly or neither yellow nor ugly.\nFOL:\t((Yellow(Ben) & Ugly(Ben)) | (-Yellow(Ben) & -Ugly(Ben)))\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is either yellow and ugly or neither yellow nor ugly.\nFOL:\t((Yellow(Ben) & Ugly(Ben)) | (-Yellow(Ben) & -Ugly(Ben)))\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is either yellow and ugly or neither yellow nor ugly.\nFOL:\t((Yellow(Ben) & Ugly(Ben)) | (-Yellow(Ben) & -Ugly(Ben)))\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is either yellow and ugly or neither yellow nor ugly.\nFOL:\t((Yellow(Ben) & Ugly(Ben)) | (-Yellow(Ben) & -Ugly(Ben)))\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is either yellow and ugly or neither yellow nor ugly.\nFOL:\t((Yellow(Ben) & Ugly(Ben)) | (-Yellow(Ben) & -Ugly(Ben)))\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t((FromTheSimpsons(Ben) & -Funny(Ben)) | (-FromTheSimpsons(Ben) & Funny(Ben)))\nTEXT:\tBen is either yellow and ugly or neither yellow nor ugly.\nFOL:\t((Yellow(Ben) & Ugly(Ben)) | (-Yellow(Ben) & -Ugly(Ben)))\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is either yellow and ugly or neither yellow nor ugly.\nFOL:\t((Yellow(Ben) & Ugly(Ben)) | (-Yellow(Ben) & -Ugly(Ben)))\nANSWER:\tUncertain\n"], ["TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (PetOwner(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tPetOwner(Tom)\nTEXT:\tTom is a grumpy person.\nFOL:\tGrumpy(Tom)\nANSWER:\tUncertain\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (OwnsPet(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tTom is a grumpy person.\nFOL:\tGrumpy(Tom)\nANSWER:\tUncertain\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (OwnsPet(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tTom is a grumpy person.\nFOL:\tGrumpy(Tom)\nANSWER:\tUncertain\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (PetOwner(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tPetOwner(Tom)\nTEXT:\tTom is a grumpy person.\nFOL:\tGrumpy(Tom)\nANSWER:\tUncertain\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (OwnsPet(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tTom is a grumpy person.\nFOL:\tGrumpy(Tom)\nANSWER:\tUncertain\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (OwnsPet(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tTom is a grumpy person.\nFOL:\tGrumpy(Tom)\nANSWER:\tUncertain\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (PetOwner(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tPetOwner(Tom)\nTEXT:\tTom is a grumpy person.\nFOL:\tGrumpy(Tom)\nANSWER:\tUncertain\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (OwnsPet(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tTom is a grumpy person.\nFOL:\tGrumpy(Tom)\nANSWER:\tUncertain\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (OwnsPet(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tTom is a grumpy person.\nFOL:\tGrumpy(Tom)\nANSWER:\tUncertain\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (OwnsPet(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tTom is a grumpy person.\nFOL:\tGrumpy(Tom)\nANSWER:\tUncertain\n"], ["TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoney(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> WorkInStudentJobsOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUp(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJobsOnCampus(Mary) & NeedToEarnMoney(Mary)) -> (NotPickyEater(Mary) & -NeedToEarnMoney(Mary))\nTEXT:\tMary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\tNotPickyEater(Mary) | (PickyEater(Mary) & SpendTimeEatingAndCatchingUp(Mary))\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJob(x) -> NeedMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeout(x) -> WorkInStudentJob(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeout(x) | EnjoyDiningHall(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJob(Mary) & NeedMoneyForTuition(Mary)) -> (-PickyEater(Mary) & -NeedMoneyForTuition(Mary))\nTEXT:\tMary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\t(-PickyEater(Mary) | (PickyEater(Mary) & SpendTimeEating(Mary)))\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (StudentJob(x) -> NeedMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeout(x) -> StudentJob(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeout(x) | EnjoyDining(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDining(x) -> NotPicky(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDining(x) -> SpendTimeEating(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(StudentJob(Mary) & NeedMoneyForTuition(Mary)) -> (NotPicky(Mary) & -NeedMoneyForTuition(Mary))\nTEXT:\tMary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\tNotPicky(Mary) | (Picky(Mary) -> SpendTimeEating(Mary))\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoney(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeoutFrequentlyInCollege(x) | EnjoyDiningHallMealsAndRecipes(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingWithFriendsInDiningHalls(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJobsOnCampus(Mary) & NeedToEarnMoney(Mary)) -> (-Picky(Mary) & -NeedToEarnMoney(Mary))\nTEXT:\tMary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\t(-Picky(Mary) | (Picky(Mary) & SpendTimeEatingWithFriendsInDiningHalls(Mary)))\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (StudentJobOnCampus(x) -> NeedMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeoutFrequently(x) | EnjoyDiningHall(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHall(x) -> NotPickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHall(x) -> SpendTimeEatingWithFriends(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(StudentJobOnCampus(Mary) & NeedMoneyForTuition(Mary) -> (NotPickyEater(Mary) & -NeedMoneyForTuition(Mary)))\nTEXT:\tMary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\t(NotPickyEater(Mary) | (PickyEater(Mary) -> SpendTimeEatingWithFriends(Mary)))\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkStudentJob(x) -> NeedMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> WorkStudentJob(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMeals(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> SpendTimeEatingWithFriends(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkStudentJob(Mary) & NeedMoneyForTuition(Mary)) -> (-PickyEater(Mary) & -NeedMoneyForTuition(Mary))\nTEXT:\tMary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\t(-PickyEater(Mary) | (PickyEater(Mary) & SpendTimeEatingWithFriends(Mary)))\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoney(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> WorkInStudentJobsOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMeals(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> NotPickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> SpendTimeInDiningHall(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJobsOnCampus(Mary) & NeedToEarnMoney(Mary)) -> (-Picky(Mary) & -NeedToEarnMoney(Mary))\nTEXT:\tMary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\t-NotPickyEater(Mary) | (Picky(Mary) & SpendTimeInDiningHall(Mary))\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> WorkInStudentJobsOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. ((OrderTakeoutFrequently(x) & -EnjoyDiningHallMealsAndRecipes(x)) | (-OrderTakeoutFrequently(x) & EnjoyDiningHallMealsAndRecipes(x)))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEaters(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUp(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJobsOnCampus(Mary) & NeedToEarnMoneyForTuition(Mary)) -> (-PickyEater(Mary) & -NeedToEarnMoneyForTuition(Mary))\nTEXT:\tMary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\t(-PickyEater(Mary) | (PickyEater(Mary) & SpendTimeEatingAndCatchingUp(Mary)))\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeoutFrequentlyInCollege(x) | EnjoyDiningHallMealsAndRecipes(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUp(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJobsOnCampus(Mary) & NeedToEarnMoneyForTuition(Mary)) -> (-Picky(Mary) & -NeedToEarnMoneyForTuition(Mary))\nTEXT:\tMary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\t(-Picky(Mary) | (Picky(Mary) & SpendTimeEatingAndCatchingUp(Mary)))\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> WorkInStudentJobOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. ((OrderTakeoutFrequently(x) & -EnjoyDiningHallMeals(x)) | (-OrderTakeoutFrequently(x) & EnjoyDiningHallMeals(x)))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> NotPickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJobOnCampus(Mary) & NeedToEarnMoney(Mary)) -> (NotPickyEater(Mary) & -NeedToEarnMoney(Mary))\nTEXT:\tMary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\t(NotPickyEater(Mary) & -SpendTimeEating(Mary)) | (PickyEater(Mary) & SpendTimeEating(Mary))\nANSWER:\tUncertain\n"], ["TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT:\tKoalas love to sleep and are quokka.\nFOL:\texists x. (Koala(x) & LoveToSleep(x) & Quokka(x))\nANSWER:\tFalse\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavorite(x) -> Fluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. ((Koala(x) & Fluffy(x)) -> -Quokka(x))\nTEXT:\tKoalas love to sleep and are quokka.\nFOL:\tall x. (Koala(x) -> LoveToSleep(x) & Quokka(x))\nANSWER:\tFalse\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> FavoriteAnimals(Max, x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (FavoriteAnimals(Max, x) -> Fluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (FavoriteAnimals(Max, x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & Fluffy(x) -> -Quokka(x))\nTEXT:\tKoalas love to sleep and are quokka.\nFOL:\texists x. (Koala(x) & LoveToSleep(x) & Quokka(x))\nANSWER:\tFalse\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavoriteAnimals(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> Fluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & Fluffy(x) -> -Quokka(x))\nTEXT:\tKoalas love to sleep and are quokka.\nFOL:\tall x. (Koala(x) -> LoveToSleep(x) & Quokka(x))\nANSWER:\tFalse\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavoriteAnimals(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. ((Koala(x) & VeryFluffy(x)) -> -Quokka(x))\nTEXT:\tKoalas love to sleep and are quokka.\nFOL:\tall x. (Koala(x) -> (LoveToSleep(x) & Quokka(x)))\nANSWER:\tFalse\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavoriteAnimals(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT:\tKoalas love to sleep and are quokka.\nFOL:\texists x. (Koala(x) & LoveToSleep(x) & Quokka(x))\nANSWER:\tFalse\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavoriteAnimals(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT:\tKoalas love to sleep and are quokka.\nFOL:\tall x. (Koala(x) -> LoveToSleep(x) & Quokka(x))\nANSWER:\tFalse\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavoriteAnimals(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (AustraliaAnimals(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> AustraliaAnimals(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. ((Koala(x) & VeryFluffy(x)) -> -Quokka(x))\nTEXT:\tKoalas love to sleep and are quokka.\nFOL:\tall x. (Koala(x) -> (LoveToSleep(x) & Quokka(x)))\nANSWER:\tFalse\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. ((Koala(x) & VeryFluffy(x)) -> -Quokka(x))\nTEXT:\tKoalas love to sleep and are quokka.\nFOL:\tall x. (Koala(x) -> LoveToSleep(x) & Quokka(x))\nANSWER:\tFalse\n", "TEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedByTourists(x) -> MaxFavoriteAnimals(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) -> FromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> Fluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxFavoriteAnimals(x) -> LoveToSleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\tall x. (Koala(x) & Fluffy(x) -> -Quokka(x))\nTEXT:\tKoalas love to sleep and are quokka.\nFOL:\tall x. (Koala(x) -> LoveToSleep(x) & Quokka(x))\nANSWER:\tFalse\n"], ["TEXT:\tBillings is a city in Montana.\nFOL:\tCity(Billings) & In(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCity(Butte) & City(Helena) & City(Missoula) & In(Butte, Montana) & In(Helena, Montana) & In(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\tCity(WhiteSulphurSprings) & City(Butte) & SameState(WhiteSulphurSprings, Butte)\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\tCity(Pierre) & -In(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (City(x) & In(x, Butte) -> -In(x, Pierre))\nTEXT:\tPierre and Bismarck are in the same state.\nFOL:\tCity(Bismarck) & SameState(Pierre, Bismarck)\nANSWER:\tUncertain\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCity(Billings) & In(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCity(Butte) & City(Helena) & City(Missoula) & In(Butte, Montana) & In(Helena, Montana) & In(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\tCity(WhiteSulphurSprings) & City(Butte) & SameState(WhiteSulphurSprings, Butte)\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\tCity(Pierre) & -In(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (City(x) & In(x, Butte) -> -In(x, Pierre))\nTEXT:\tPierre and Bismarck are in the same state.\nFOL:\tCity(Bismarck) & SameState(Pierre, Bismarck)\nANSWER:\tUncertain\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists y. (CityInState(WhiteSulphurSprings, y) & CityInState(Butte, y))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInCity(x, Butte) -> -CityInCity(x, Pierre))\nTEXT:\tPierre and Bismarck are in the same state.\nFOL:\texists y. (CityInState(Pierre, y) & CityInState(Bismarck, y))\nANSWER:\tUncertain\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists x. (CityInState(WhiteSulphurSprings, x) & CityInState(Butte, x))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInCity(x, Butte) -> -CityInCity(x, Pierre))\nTEXT:\tPierre and Bismarck are in the same state.\nFOL:\texists x. (CityInState(Pierre, x) & CityInState(Bismarck, x))\nANSWER:\tUncertain\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\tSameState(WhiteSulphurSprings, Butte)\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInCity(x, Butte) -> -CityInCity(x, Pierre))\nTEXT:\tPierre and Bismarck are in the same state.\nFOL:\tSameState(Pierre, Bismarck)\nANSWER:\tUncertain\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCity(Billings) & In(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tIncludes(Montana, Butte) & Includes(Montana, Helena) & Includes(Montana, Missoula)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\tCity(WhiteSulphurSprings) & City(Butte) & SameState(WhiteSulphurSprings, Butte)\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\tCity(Pierre) & -In(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (City(x) & In(x, Butte) -> -In(x, Pierre))\nTEXT:\tPierre and Bismarck are in the same state.\nFOL:\tCity(Pierre) & City(Bismarck) & SameState(Pierre, Bismarck)\nANSWER:\tUncertain\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\tSameState(WhiteSulphurSprings, Butte)\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInCity(x, Butte) -> -CityInCity(x, Pierre))\nTEXT:\tPierre and Bismarck are in the same state.\nFOL:\tSameState(Pierre, Bismarck)\nANSWER:\tUncertain\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityIn(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityIn(Butte, Montana) & CityIn(Helena, Montana) & CityIn(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\tSameState(WhiteSulphurSprings, Butte)\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityIn(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityIn(x, Butte) -> -CityIn(x, Pierre))\nTEXT:\tPierre and Bismarck are in the same state.\nFOL:\tSameState(Pierre, Bismarck)\nANSWER:\tUncertain\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tInCity(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tInCity(Butte, Montana) & InCity(Helena, Montana) & InCity(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists x. (InCity(WhiteSulphurSprings, x) & InCity(Butte, x))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-InCity(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (InCity(x, Butte) -> -InCity(x, Pierre))\nTEXT:\tPierre and Bismarck are in the same state.\nFOL:\texists x. (InCity(Pierre, x) & InCity(Bismarck, x))\nANSWER:\tUncertain\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists x. (CityInState(WhiteSulphurSprings, x) & CityInState(Butte, x))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInButte(x) -> -CityInPierre(x))\nTEXT:\tPierre and Bismarck are in the same state.\nFOL:\texists x. (CityInState(Pierre, x) & CityInState(Bismarck, x))\nANSWER:\tUncertain\n"], ["TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tIf Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL:\t((Evil(Harry) & Ugly(Harry)) | (-Evil(Harry) & -Ugly(Harry))) -> (-Kind(Harry) & -CEO(Harry))\nANSWER:\tUncertain\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tIf Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL:\t((Evil(Harry) & Ugly(Harry)) | (-Evil(Harry) & -Ugly(Harry))) -> (-Kind(Harry) & -CEO(Harry))\nANSWER:\tFalse\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tIf Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL:\t((Evil(Harry) & Ugly(Harry)) | (-Evil(Harry) & -Ugly(Harry))) -> (-Kind(Harry) & -CEO(Harry))\nANSWER:\tFalse\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. ((Man(x) & Kind(x) & -Evil(x)) | (Man(x) & -Kind(x) & Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tIf Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL:\t((Evil(Harry) & Ugly(Harry) & -Kind(Harry) & -CEO(Harry)) | (-Evil(Harry) & -Ugly(Harry) & -Kind(Harry) & -CEO(Harry)))\nANSWER:\tFalse\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tIf Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL:\t((Evil(Harry) & Ugly(Harry)) | (-Evil(Harry) & -Ugly(Harry))) -> (-Kind(Harry) & -CEO(Harry))\nANSWER:\tFalse\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tIf Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL:\t((Evil(Harry) & Ugly(Harry)) | (-Evil(Harry) & -Ugly(Harry))) -> (-Kind(Harry) & -CEO(Harry))\nANSWER:\tFalse\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tIf Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL:\t((Evil(Harry) & Ugly(Harry)) | (-Evil(Harry) & -Ugly(Harry))) -> (-Kind(Harry) & -CEO(Harry))\nANSWER:\tUncertain\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tIf Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL:\t((Evil(Harry) & Ugly(Harry)) | (-Evil(Harry) & -Ugly(Harry))) -> (-Kind(Harry) & -CEO(Harry))\nANSWER:\tFalse\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tIf Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL:\t((Evil(Harry) & Ugly(Harry)) | (-Evil(Harry) & -Ugly(Harry))) -> (-Kind(Harry) & -CEO(Harry))\nANSWER:\tFalse\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. ((Kind(x) & -Evil(x)) | (-Kind(x) & Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tIf Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL:\t((Evil(Harry) & Ugly(Harry)) | (-Evil(Harry) & -Ugly(Harry))) -> (-Kind(Harry) & -CEO(Harry))\nANSWER:\tFalse\n"], ["TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, People'sRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocatedIn(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\t(exists x. Hosted(Beijing, SummerOlympics(x))) & (exists x. Hosted(Beijing, WinterOlympics(x))) & (exists x. Hosted(Beijing, SummerParalympics(x))) & (exists x. Hosted(Beijing, WinterParalympics(x)))\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\t(exists x. (Universities(x, Beijing) & RankAmongBest(x, AsiaPacificAndWorld)))\nTEXT:\tBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL:\tHosted(Beijing, SummerOlympics2008) & (exists x. Hosted(Beijing, WinterOlympics(x)))\nANSWER:\tUncertain\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, PeoplesRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousCapitalCity(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocated(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tBestUniversities(Beijing, AsiaPacificAndWorld)\nTEXT:\tBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, WinterOlympics)\nANSWER:\tTrue\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, People'sRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousNationalCapitalCity(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocated(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tForall x (Exists y (University(y) & Located(y, Beijing) & HighRanking(y, AsiaPacificAndWorld)))\nTEXT:\tBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, WinterOlympics)\nANSWER:\tUncertain\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, PeoplesRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousNationalCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocated(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\t(exists x. exists y. (Hosted(Beijing, x) & SummerOlympics(x)) & (Hosted(Beijing, y) & WinterOlympics(y))) & (exists x. exists y. (Hosted(Beijing, x) & SummerParalympics(x)) & (Hosted(Beijing, y) & WinterParalympics(y)))\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\texists x. (University(x) & In(x, Beijing) & Rank(x, BestAsiaPacificAndWorld))\nTEXT:\tBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL:\tHosted(Beijing, SummerOlympics2008) & exists y. (Hosted(Beijing, y) & WinterOlympics(y))\nANSWER:\tTrue\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, People'sRepublicofChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousNationalCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocated(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\texists x. (University(x) & Located(x, Beijing) & TopRank(x, AsiaPacific) & TopRank(x, World))\nTEXT:\tBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, WinterOlympics)\nANSWER:\tUncertain\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, People'sRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocatedIn(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tBestUniversities(Beijing, AsiaPacificAndWorld)\nTEXT:\tBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, WinterOlympics)\nANSWER:\tUncertain\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, People's Republic of China)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousNationalCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocated(Beijing, Northern China)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, 2008 Summer Olympics) & Hosted(Beijing, 2008 Summer Paralympics Games)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL:\tHosted(Beijing, Summer Olympics) & Hosted(Beijing, Winter Olympics) & Hosted(Beijing, Summer Paralympics) & Hosted(Beijing, Winter Paralympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tConsistentlyRank(Best, Beijing's 91 universities, Asia-Pacific and the world)\nTEXT:\tBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL:\tHosted(Beijing, 2008 Summer Olympics) & Hosted(Beijing, Winter Olympics)\nANSWER:\tTrue\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, People's Republic of China)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousNationalCapitalCity(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocatedIn(Beijing, Northern China)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, 2008 Summer Olympics) & Hosted(Beijing, 2008 Summer Paralympics Games)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHostedSummerAndWinterOlympics(Beijing) & HostedSummerAndWinterParalympics(Beijing)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\texists x. (University(x) & In(x, Beijing) & RankAmongBest(x, Asia-Pacific & World))\nTEXT:\tBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL:\tHosted(Beijing, 2008 Summer Olympics) & exists x. (WinterOlympics(x) & Hosted(Beijing, x))\nANSWER:\tUncertain\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, People'sRepublicofChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocated(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, SummerParalympics2008)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tUniversities(Beijing, 91) & TopRankingUniversities(Beijing, AsiaPacificAndWorld)\nTEXT:\tBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL:\tHosted(Beijing, SummerOlympics2008) & Hosted(Beijing, WinterOlympics)\nANSWER:\tUncertain\n", "TEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, PeoplesRepublicOfChina)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousNationalCapital(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocated(Beijing, NorthernChina)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, 2008SummerOlympics) & Hosted(Beijing, 2008SummerParalympics)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\tHosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympics) & Hosted(Beijing, WinterParalympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\texists x. (University(x) & In(x, Beijing) & Best(x, AsiaPacific) & Best(x, World))\nTEXT:\tBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL:\tHosted(Beijing, 2008SummerOlympics) & Hosted(Beijing, WinterOlympics)\nANSWER:\tUncertain\n"], ["TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(Kiki) & -HasLegs(Kiki)) -> (Terricolous(Kiki) | HasLegs(Kiki))\nTEXT:\tKiKi is terricolous.\nFOL:\tTerricolous(Kiki)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> NotLike(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Like(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi is terricolous.\nFOL:\tTerricolous(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi is terricolous.\nFOL:\tTerricolous(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi is terricolous.\nFOL:\tTerricolous(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi is terricolous.\nFOL:\tTerricolous(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> NotLikes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(Kiki) & -HasLegs(Kiki)) -> (Terricolous(Kiki) | HasLegs(Kiki))\nTEXT:\tKiKi is terricolous.\nFOL:\tTerricolous(Kiki)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Animal(x) & Barks(x) -> NotLikes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Animal(x) & Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Animal(x) & Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Animal(x) & Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi is terricolous.\nFOL:\tTerricolous(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Animal(x) & Barks(x) -> NotLike(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Animal(x) & Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Animal(x) & Jumps(x) -> Like(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Animal(x) & Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t((NotJumps(KiKi) & NotHasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi)))\nTEXT:\tKiKi is terricolous.\nFOL:\tTerricolous(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT:\tKiKi is terricolous.\nFOL:\tTerricolous(KiKi)\nANSWER:\tUncertain\n", "TEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Animal(x) & Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Animal(x) & Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Animal(x) & Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t((-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi)))\nTEXT:\tKiKi is terricolous.\nFOL:\tTerricolous(KiKi)\nANSWER:\tUncertain\n"], ["TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (Ailton(x) & BornIn(x, 1995))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\texists x. (Ailton(x) & FootballPlayer(x) & LoanedTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\texists x. (Ailton(x) & Brazilian(x) & Footballer(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\texists x. (Nautico(x) & FootballClub(x)) & exists y. (Braga(y) & FootballClub(y))\nTEXT:\tFluminense is a football club.\nFOL:\texists x. (Fluminense(x) & FootballClub(x))\nTEXT:\tNo one playing for Nautico is Brazilian.\nFOL:\tall x. (PlaysFor(x, Nautico) -> -Brazilian(x))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tExists x. ((x = AiltonSilva) & Born(x, 1995) & Alias(x, Ailton))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tExists x. (Alias(x, Ailton) & FootballPlayer(x) & LoanedTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tExists x. ((x = AiltonSilva) & Brazilian(x) & FootballPlayer(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tExists x. ((x = Nautico) & FootballClub(x)) & Exists y. ((y = Braga) & FootballClub(y))\nTEXT:\tFluminense is a football club.\nFOL:\tExists x. ((x = Fluminense) & FootballClub(x))\nTEXT:\tNo one playing for Nautico is Brazilian.\nFOL:\tForAll x. (PlaysFor(x, Nautico) -> Not(Brazilian(x)))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAilton = AiltonSilva & Born(AiltonSilva, 1995)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tAiltonSilva = Ailton & Brazilian(Ailton) & PlaysFor(Ailton, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tNo one playing for Nautico is Brazilian.\nFOL:\tall x. (PlaysFor(x, Nautico) -> -Brazilian(x))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAiltonSilva = Ailton & Born(Ailton, 1995)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tFootballPlayer(AiltonSilva) & Brazilian(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tNo one playing for Nautico is Brazilian.\nFOL:\tall x. (PlaysFor(x, Nautico) -> -Brazilian(x))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\t((AiltonSilva(x) & BornIn(x, 1995)) -> Ailton(x))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tAilton(x) -> (FootballPlayer(x) & LoanedTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tAiltonSilva(x) -> (Brazillian(x) & Footballer(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tNo one playing for Nautico is Brazilian.\nFOL:\tall x. (PlaysFor(x, Nautico) -> -Brazillian(x))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (x = Ailton & Born(x, 1995) & KnownAs(x, 'Ailton'))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\texists x. (x = Ailton & FootballPlayer(x) & LoanedTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\texists x. (x = Ailton & FootballPlayer(x) & Brazilian(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tNo one playing for Nautico is Brazilian.\nFOL:\tall x. (PlaysFor(x, Nautico) -> -Brazilian(x))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (Person(x) & Born(x, 1995) & KnownAs(x, Ailton))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tPerson(AiltonSilva) & Brazilian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tNo one playing for Nautico is Brazilian.\nFOL:\tall x. (PlaysFor(x, Nautico) -> -Brazilian(x))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (x = Ailton & Born(x, 1995) & KnownAs(x, Ailton))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\t(FootballPlayer(Ailton) & LoanedTo(Ailton, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\t(Footballer(AiltonSilva) & Brazilian(AiltonSilva) & PlaysFor(AiltonSilva, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\t(FootballClub(Nautico) & FootballClub(Braga))\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tNo one playing for Nautico is Brazilian.\nFOL:\tall x. (PlaysFor(x, Nautico) -> -Brazilian(x))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAiltonSilva(Born(1995)) & KnownAs(AiltonSilva, Ailton)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tAiltonSilva(Brazilian) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tNo one playing for Nautico is Brazilian.\nFOL:\tall x. (PlaysFor(x, Nautico) -> -Brazilian(x))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAiltonSilva = Ailton & Born(Ailton, 1995)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tBrazilian(Ailton) & PlaysFor(Ailton, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tNo one playing for Nautico is Brazilian.\nFOL:\tall x. (PlaysFor(x, Nautico) -> -Brazilian(x))\nANSWER:\tFalse\n"], ["TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t(-Airline(Greyhound) -> -Plane(Greyhound))\nTEXT:\tA Greyhound is a Boeing 707.\nFOL:\tBoeing707(Greyhound)\nANSWER:\tUncertain\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t(-Airline(Greyhound) -> -Plane(Greyhound))\nTEXT:\tA Greyhound is a Boeing 707.\nFOL:\tBoeing707(Greyhound)\nANSWER:\tUncertain\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t(-Airline(Greyhound) -> -Plane(Greyhound))\nTEXT:\tA Greyhound is a Boeing 707.\nFOL:\tBoeing707(Greyhound)\nANSWER:\tUncertain\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\tall x. (Greyhound(x) & -Airline(x) -> -Plane(x))\nTEXT:\tA Greyhound is a Boeing 707.\nFOL:\tGreyhound(x) -> Boeing707(x)\nANSWER:\tUncertain\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\tall x. (-Airline(Greyhound) -> -Plane(Greyhound))\nTEXT:\tA Greyhound is a Boeing 707.\nFOL:\tBoeing707(Greyhound)\nANSWER:\tUncertain\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\tall x. (Greyhound(x) & -Airline(x) -> -Plane(x))\nTEXT:\tA Greyhound is a Boeing 707.\nFOL:\tGreyhound(x) -> Boeing707(x)\nANSWER:\tUncertain\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t(-Airline(Greyhound) -> -Plane(Greyhound))\nTEXT:\tA Greyhound is a Boeing 707.\nFOL:\tBoeing707(Greyhound)\nANSWER:\tUncertain\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t(-Airline(Greyhound) -> -Plane(Greyhound))\nTEXT:\tA Greyhound is a Boeing 707.\nFOL:\tBoeing707(Greyhound)\nANSWER:\tUncertain\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\tall x. (-Airline(Greyhound) -> -Plane(x))\nTEXT:\tA Greyhound is a Boeing 707.\nFOL:\tBoeing707(Greyhound)\nANSWER:\tUncertain\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t(-Airline(Greyhound) -> -Plane(Greyhound))\nTEXT:\tA Greyhound is a Boeing 707.\nFOL:\tBoeing707(Greyhound)\nANSWER:\tUncertain\n"], ["TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tPolitician(HeinrichScmidt) & NaziGerman(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMember(HeinrichScmidt, PrussianStateParliament) & Member(HeinrichScmidt, NaziReichstag)\nTEXT:\tNo politicans are part of the Nazi Reichstag.\nFOL:\tall x. (Politician(x) -> -Member(x, NaziReichstag))\nANSWER:\tFalse\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tPolitician(HeinrichScmidt) & NaziGerman(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMember(HeinrichScmidt, PrussianStateParliament) & Member(HeinrichScmidt, NaziReichstag)\nTEXT:\tNo politicans are part of the Nazi Reichstag.\nFOL:\tall x. (Politician(x) -> -Member(x, NaziReichstag))\nANSWER:\tFalse\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tPolitician(HeinrichScmidt) & NaziGerman(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOf(HeinrichScmidt, PrussianStateParliament) & MemberOf(HeinrichScmidt, NaziReichstag)\nTEXT:\tNo politicans are part of the Nazi Reichstag.\nFOL:\tall x. (Politician(x) -> -MemberOf(x, NaziReichstag))\nANSWER:\tFalse\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tNaziPolitician(HeinrichScmidt)\nTEXT:\tHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOfPrussianStateParliament(HeinrichScmidt) & MemberOfNaziReichstag(HeinrichScmidt)\nTEXT:\tNo politicans are part of the Nazi Reichstag.\nFOL:\tall x. (Politician(x) -> -MemberOfNaziReichstag(x))\nANSWER:\tFalse\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tPolitician(HeinrichScmidt) & NaziGerman(HeinrichScmidt)\nTEXT:\tHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMember(HeinrichScmidt, PrussianStateParliament) & Member(HeinrichScmidt, NaziReichstag)\nTEXT:\tNo politicians are part of the Nazi Reichstag.\nFOL:\tall x. (Politician(x) -> -Member(x, NaziReichstag))\nANSWER:\tFalse\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tPolitician(HeinrichScmidt) & NaziGerman(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOf(HeinrichScmidt, PrussianStateParliament) & MemberOf(HeinrichScmidt, NaziReichstag)\nTEXT:\tNo politicans are part of the Nazi Reichstag.\nFOL:\tall x. (Politician(x) -> -MemberOf(x, NaziReichstag))\nANSWER:\tFalse\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tPolitician(HeinrichScmidt) & NaziGerman(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMember(HeinrichScmidt, PrussianStateParliament) & Member(HeinrichScmidt, NaziReichstag)\nTEXT:\tNo politicans are part of the Nazi Reichstag.\nFOL:\tall x. (Politician(x) -> -Member(x, NaziReichstag))\nANSWER:\tFalse\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tPolitician(HeinrichScmidt) & NaziGerman(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOf(HeinrichScmidt, PrussianStateParliament) & MemberOf(HeinrichScmidt, NaziReichstag)\nTEXT:\tNo politicans are part of the Nazi Reichstag.\nFOL:\tall x. (Politician(x) -> -MemberOf(x, NaziReichstag))\nANSWER:\tFalse\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tNaziGermanPolitician(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOfPrussianStateParliament(HeinrichScmidt) & MemberOfNaziReichstag(HeinrichScmidt)\nTEXT:\tNo politicans are part of the Nazi Reichstag.\nFOL:\tall x. (Politician(x) -> -MemberOfNaziReichstag(x))\nANSWER:\tFalse\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tPolitician(HeinrichScmidt) & Nazi(HeinrichScmidt) & German(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOf(HeinrichScmidt, PrussianStateParliament) & MemberOf(HeinrichScmidt, NaziReichstag)\nTEXT:\tNo politicans are part of the Nazi Reichstag.\nFOL:\tall x. (Politician(x) -> -MemberOf(x, NaziReichstag))\nANSWER:\tFalse\n"], ["TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (Born(x, 1995) & CommonlyKnownAs(x, Ailton))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tBrazilianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva was loaned out to a football club.\nFOL:\texists x. (FootballClub(x) & LoanedOutTo(AiltonSilva, x))\nANSWER:\tTrue\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAiltonSilva = Ailton\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tFootballPlayer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva was loaned out to a football club.\nFOL:\texists x. (FootballClub(x) & LoanedOutTo(AiltonSilva, x))\nANSWER:\tTrue\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (BornIn(x, 1995) & KnownAs(x, Ailton))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\texists x. (FootballPlayer(x) & KnownAs(x, Ailton) & LoanedOutTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\texists x. (KnownAs(x, Ailton) & Brazillian(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\texists x. (FootballClub(x) & (Nautico(x) | Braga(x)))\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva was loaned out to a football club.\nFOL:\texists x. exists y. (KnownAs(x, Ailton) & LoanedOutTo(x, y) & FootballClub(y))\nANSWER:\tTrue\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tExists x. (Ailton(x) & BornIn1995(x) & KnownAs(x, Ailton))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tExists x. (Ailton(x) & FootballPlayer(x) & LoanedTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tExists x. (AiltonSilva(x) & Brazillian(x) & Footballer(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva was loaned out to a football club.\nFOL:\tExists x. (AiltonSilva(x) & LoanedTo(x, y) & FootballClub(y))\nANSWER:\tTrue\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (Name(x, \"Ailton Silva\") & Born(x, 1995) & Nickname(x, \"Ailton\"))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\texists x. (Nickname(x, \"Ailton\") & FootballPlayer(x) & LoanedTo(x, \"Braga\"))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\texists x. (Name(x, \"Ailton Silva\") & FootballPlayer(x) & PlaysFor(x, \"Nautico\"))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(\"Nautico\") & FootballClub(\"Braga\")\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(\"Fluminense\")\nTEXT:\tAilton Silva was loaned out to a football club.\nFOL:\texists x. exists y. (Name(x, \"Ailton Silva\") & FootballClub(y) & LoanedTo(x, y))\nANSWER:\tTrue\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tExists x. (Born(x, 1995) & KnownAs(x, Ailton) & Is(x, AiltonSilva))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tIs(Ailton, FootballPlayer) & LoanedOutTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tIs(AiltonSilva, BrazilianFootballer) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tIs(Nautico, FootballClub) & Is(Braga, FootballClub)\nTEXT:\tFluminense is a football club.\nFOL:\tIs(Fluminense, FootballClub)\nTEXT:\tAilton Silva was loaned out to a football club.\nFOL:\texists x. (Is(x, FootballClub) & LoanedOutTo(AiltonSilva, x))\nANSWER:\tTrue\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tExists(x) (BornIn(x, 1995) & KnownAs(x, Ailton) & Is(x, AiltonSilva))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tExists(x) (Is(x, Ailton) & FootballPlayer(x) & LoanedTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tExists(x) (Is(x, AiltonSilva) & Brazilian(x) & Footballer(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva was loaned out to a football club.\nFOL:\tExists(x) (Is(x, AiltonSilva) & LoanedTo(x, y) & FootballClub(y))\nANSWER:\tTrue\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (x = AiltonSilva) & BornIn(x, 1995) & CommonlyKnownAs(x, Ailton)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tFootballer(AiltonSilva) & Brazillian(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva was loaned out to a football club.\nFOL:\tLoanedOutTo(AiltonSilva, x) & FootballClub(x)\nANSWER:\tTrue\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (AiltonSilva(x) & BornIn(x, 1995) & CommonlyKnownAs(x, Ailton))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\texists x. (Ailton(x) & FootballPlayer(x) & LoanedOutTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\texists x. (AiltonSilva(x) & Brazilian(x) & Footballer(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\texists x. (Nautico(x) & FootballClub(x) & AlongWith(x, Braga))\nTEXT:\tFluminense is a football club.\nFOL:\texists x. (Fluminense(x) & FootballClub(x))\nTEXT:\tAilton Silva was loaned out to a football club.\nFOL:\texists x. (AiltonSilva(x) & LoanedOutTo(x, y) & FootballClub(y))\nANSWER:\tTrue\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAiltonSilva(Ailton) & BornIn(Ailton, 1995)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico) & Brazillian(AiltonSilva)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva was loaned out to a football club.\nFOL:\tExists x. (FootballClub(x) & LoanedTo(AiltonSilva, x))\nANSWER:\tTrue\n"], ["TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\texists x. (Sitcom(x) & British(x) & Starring(x, Pappys) & Badults(x))\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\tPiloted(Badults, July2013, BBCThree)\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\tWorkingTitle(Badults, TheSecretDudeSociety)\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\tScriptEditor(Badults, AndrewCollins)\nTEXT:\tNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL:\tall x. (MemberOfPappys(x) -> not exists y. (Show(y) & StarredIn(x, y) & (PilotedOn(y, BBCTwo) | PilotedOn(y, BBCThree))))\nANSWER:\tFalse\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\texists x. (Badults(x) & BritishSitcom(x) & Starring(x, Pappys))\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\texists x. (Badults(x) & PilotedIn(x, July2013) & On(x, BBCThree))\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\texists x. (Badults(x) & WorkingTitleUsed(x, TheSecretDudeSociety))\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\texists x. (Badults(x) & ScriptEditor(x, AndrewCollins))\nTEXT:\tNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL:\tall x. (Pappys(x) -> -StarredInShowPilotingOnBBC2Or3(x))\nANSWER:\tFalse\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\texists x. (Sitcom(x) & British(x) & StarredIn(x, Pappys) & Equals(x, Badults))\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\tPilotedIn(Badults, July2013, BBCThree)\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\tWorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\tScriptEditor(Badults, AndrewCollins)\nTEXT:\tNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL:\tall x. (StarredIn(x, Pappys) -> -PilotedOn(x, BBCTwo) & -PilotedOn(x, BBCThree))\nANSWER:\tFalse\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\texists x. (SitcomSeries(x) & British(x) & Starring(x, Pappys) & Equals(x, Badults))\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\tPiloted(Badults, July2013, BBCThree)\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\tWorkingTitle(Badults, TheSecretDudeSociety)\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\tScriptEditor(AndrewCollins, Badults)\nTEXT:\tNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL:\tall x. (Starring(x, Pappys) -> -Piloted(x, BBCThree) & -Piloted(x, BBCTwo))\nANSWER:\tFalse\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\texists x. (SitcomSeries(x) & In(x, Britain) & Starring(x, Pappys))\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\tPiloted(Badults, July2013, BBCThree)\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\tWorkingTitle(Badults, TheSecretDudeSociety)\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\tScriptEditor(AndrewCollins, Badults)\nTEXT:\tNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL:\tall x. (MemberOfPappys(x) -> -PilotedInShow(x, BBCTwoOrThree))\nANSWER:\tFalse\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\tExists x. (Sitcom(x) & British(x) & Stars(x, Pappys))\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\tPiloted(Badults, July2013, BBCThree)\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\tWorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\tScriptEditor(Badults, AndrewCollins)\nTEXT:\tNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL:\tForAll x. ForAll y. ((Stars(x, Pappys) & Piloted(y, _, BBCTwo)) -> False) & ((Stars(x, Pappys) & Piloted(y, _, BBCThree)) -> False)\nANSWER:\tFalse\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\texists x. (Sitcom(x) & British(x) & Stars(x, Pappys) & Equals(x, Badults))\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\tPiloted(Badults, July2013, BBCThree)\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\tWorkingTitle(Badults, TheSecretDudeSociety)\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\tScriptEditor(Badults, AndrewCollins)\nTEXT:\tNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL:\tall x. (Member(x, Pappys) -> -exists y. (Show(y) & Stars(y, x) & (Piloted(y, BBCTwo) | Piloted(y, BBCThree))))\nANSWER:\tFalse\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\tExists x. (Badults(x) & BritishSitcomSeries(x) & Starring(x, Pappys))\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\tExists x. (Badults(x) & PilotedOn(x, BBCThree))\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\tExists x. (Badults(x) & WorkingTitle(x, TheSecretDudeSociety))\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\tExists x. (Badults(x) & ScriptEditor(x, AndrewCollins))\nTEXT:\tNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL:\tall x. (Pappys(x) -> -Exists y. (PilotedOn(y, BBCTwo) | PilotedOn(y, BBCThree) & StarredFor(x, y)))\nANSWER:\tFalse\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\tExists x. (Badults(x) & BritishSitcom(x) & Starring(x, Pappys))\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\tPiloted(Badults, July2013, BBCThree)\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\tWorkingTitle(Badults, TheSecretDudeSociety)\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\tScriptEditor(AndrewCollins, Badults)\nTEXT:\tNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL:\tForall x. (MemberOfPappys(x) -> Not(StarredForShowPilotingOnBBC(x, BBCTwo) & StarredForShowPilotingOnBBC(x, BBCThree)))\nANSWER:\tFalse\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\texists x. (Badults(x) & BritishSitcomSeries(x) & Stars(x, Pappys))\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\texists x. (Badults(x) & Piloted(x, July2013, BBCThree))\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\texists x. (Badults(x) & WorkingTitle(x, TheSecretDudeSociety))\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\texists x. (Badults(x) & ScriptEditor(x, AndrewCollins))\nTEXT:\tNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL:\tall x. (Pappys(x) -> -Exists y. (Stars(y, x) & (Piloted(y, _, BBCTwo) | Piloted(y, _, BBCThree))))\nANSWER:\tFalse\n"], ["TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic does not live in a tax haven.\nFOL:\t-LivesInTaxHaven(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic does not live in a tax haven.\nFOL:\t-LiveInTaxHaven(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHavens(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic does not live in a tax haven.\nFOL:\t-LiveInTaxHavens(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic does not live in a tax haven.\nFOL:\t-LiveInTaxHaven(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic does not live in a tax haven.\nFOL:\t-LiveInTaxHaven(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic) -> WellPaid(Djokovic))\nTEXT:\tDjokovic does not live in a tax haven.\nFOL:\t- LiveInTaxHaven(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHavens(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic does not live in a tax haven.\nFOL:\t-LiveInTaxHavens(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic) -> LiveInWellPaid(Djokovic))\nTEXT:\tDjokovic does not live in a tax haven.\nFOL:\t-LiveInTaxHaven(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic does not live in a tax haven.\nFOL:\t-LiveInTaxHaven(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHavens(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic does not live in a tax haven.\nFOL:\t-LiveInTaxHavens(Djokovic)\nANSWER:\tUncertain\n"], ["TEXT:\tAll squares have four sides.\nFOL:\tall x. (Square(x) -> FourSided(x))\nTEXT:\tAll four-sided things are shapes.\nFOL:\tall x. (FourSided(x) -> Shape(x))\nTEXT:\tAll squares are shapes.\nFOL:\tall x. (Square(x) -> Shape(x))\nANSWER:\tTrue\n", "TEXT:\tAll squares have four sides.\nFOL:\tall x. (Square(x) -> FourSided(x))\nTEXT:\tAll four-sided things are shapes.\nFOL:\tall x. (FourSided(x) -> Shape(x))\nTEXT:\tAll squares are shapes.\nFOL:\tall x. (Square(x) -> Shape(x))\nANSWER:\tTrue\n", "TEXT:\tAll squares have four sides.\nFOL:\tall x. (Square(x) -> FourSides(x))\nTEXT:\tAll four-sided things are shapes.\nFOL:\tall x. (FourSides(x) -> Shape(x))\nTEXT:\tAll squares are shapes.\nFOL:\tall x. (Square(x) -> Shape(x))\nANSWER:\tTrue\n", "TEXT:\tAll squares have four sides.\nFOL:\tall x. (Square(x) -> FourSides(x))\nTEXT:\tAll four-sided things are shapes.\nFOL:\tall x. (FourSides(x) -> Shape(x))\nTEXT:\tAll squares are shapes.\nFOL:\tall x. (Square(x) -> Shape(x))\nANSWER:\tTrue\n", "TEXT:\tAll squares have four sides.\nFOL:\tall x. (Square(x) -> FourSides(x))\nTEXT:\tAll four-sided things are shapes.\nFOL:\tall x. (FourSides(x) -> Shape(x))\nTEXT:\tAll squares are shapes.\nFOL:\tall x. (Square(x) -> Shape(x))\nANSWER:\tTrue\n", "TEXT:\tAll squares have four sides.\nFOL:\tall x. (Square(x) -> FourSided(x))\nTEXT:\tAll four-sided things are shapes.\nFOL:\tall x. (FourSided(x) -> Shape(x))\nTEXT:\tAll squares are shapes.\nFOL:\tall x. (Square(x) -> Shape(x))\nANSWER:\tTrue\n", "TEXT:\tAll squares have four sides.\nFOL:\tall x. (Square(x) -> FourSided(x))\nTEXT:\tAll four-sided things are shapes.\nFOL:\tall x. (FourSided(x) -> Shape(x))\nTEXT:\tAll squares are shapes.\nFOL:\tall x. (Square(x) -> Shape(x))\nANSWER:\tTrue\n", "TEXT:\tAll squares have four sides.\nFOL:\tall x. (Square(x) -> FourSided(x))\nTEXT:\tAll four-sided things are shapes.\nFOL:\tall x. (FourSided(x) -> Shape(x))\nTEXT:\tAll squares are shapes.\nFOL:\tall x. (Square(x) -> Shape(x))\nANSWER:\tTrue\n", "TEXT:\tAll squares have four sides.\nFOL:\tall x. (Square(x) -> FourSides(x))\nTEXT:\tAll four-sided things are shapes.\nFOL:\tall x. (FourSides(x) -> Shape(x))\nTEXT:\tAll squares are shapes.\nFOL:\tall x. (Square(x) -> Shape(x))\nANSWER:\tTrue\n", "TEXT:\tAll squares have four sides.\nFOL:\tall x. (Square(x) -> FourSided(x))\nTEXT:\tAll four-sided things are shapes.\nFOL:\tall x. (FourSided(x) -> Shape(x))\nTEXT:\tAll squares are shapes.\nFOL:\tall x. (Square(x) -> Shape(x))\nANSWER:\tTrue\n"], ["TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(Yale)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMoved(Yale, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowmentValue(Yale, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(Yale, 27, [ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, TwelveProfessionalSchools])\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialCollegesAtYale([BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT:\tPierson College is a residential college at Yale.\nFOL:\tResidentialCollegeAtYale(PiersonCollege)\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMoved(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, {ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, TwelveProfessionalSchools})\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialCollegesAtYale({BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege})\nTEXT:\tPierson College is a residential college at Yale.\nFOL:\tResidentialCollegeAtYale(PiersonCollege)\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivate(YaleUniversity) & IvyLeague(YaleUniversity) & ResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMoved(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, 42.3)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, [27ConstituentColleges, YaleGraduateSchoolOfArtsAndSciences, 12ProfessionalSchools])\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialColleges(Yale, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT:\tPierson College is a residential college at Yale.\nFOL:\tResidentialCollegeAt(Yale, PiersonCollege)\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMoved(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowmentValue(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, ConstituentCollegesAndSchools(27), ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, ProfessionalSchools(12))\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialCollegeAtYale(BenjaminFranklinCollege), ResidentialCollegeAtYale(BerkeleyCollege), ResidentialCollegeAtYale(BranfordCollege), ResidentialCollegeAtYale(DavenportCollege), ResidentialCollegeAtYale(EzraStilesCollege), ResidentialCollegeAtYale(GraceHopperCollege), ResidentialCollegeAtYale(JonathanEdwardsCollege), ResidentialCollegeAtYale(MorseCollege), ResidentialCollegeAtYale(PauliMurrayCollege), ResidentialCollegeAtYale(PiersonCollege), ResidentialCollegeAtYale(SaybrookCollege), ResidentialCollegeAtYale(SillimanCollege), ResidentialCollegeAtYale(TimothyDwightCollege), ResidentialCollegeAtYale(TrumbullCollege)\nTEXT:\tPierson College is a residential college at Yale.\nFOL:\tResidentialCollegeAtYale(PiersonCollege)\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMovedTo(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowmentValue(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, ProfessionalSchools)\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialCollegesAtYale(BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)\nTEXT:\tPierson College is a residential college at Yale.\nFOL:\tResidentialCollegeAtYale(PiersonCollege)\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivate(YaleUniversity) & IvyLeague(YaleUniversity) & ResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMovedTo(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27, CollegesAndSchools) & ResidentialColleges(YaleUniversity) & YaleGraduateSchoolOfArtsAndSciences(YaleUniversity) & ProfessionalSchools(YaleUniversity, 12)\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialColleges(YaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT:\tPierson College is a residential college at Yale.\nFOL:\tResidentialCollegeAt(YaleUniversity, PiersonCollege)\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMoved(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27, CollegesAndSchools)\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialCollegeAtYale(BenjaminFranklinCollege), ResidentialCollegeAtYale(BerkeleyCollege), ResidentialCollegeAtYale(BranfordCollege), ResidentialCollegeAtYale(DavenportCollege), ResidentialCollegeAtYale(EzraStilesCollege), ResidentialCollegeAtYale(GraceHopperCollege), ResidentialCollegeAtYale(JonathanEdwardsCollege), ResidentialCollegeAtYale(MorseCollege), ResidentialCollegeAtYale(PauliMurrayCollege), ResidentialCollegeAtYale(PiersonCollege), ResidentialCollegeAtYale(SaybrookCollege), ResidentialCollegeAtYale(SillimanCollege), ResidentialCollegeAtYale(TimothyDwightCollege), ResidentialCollegeAtYale(TrumbullCollege)\nTEXT:\tPierson College is a residential college at Yale.\nFOL:\tResidentialCollegeAtYale(PiersonCollege)\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeague(YaleUniversity) & ResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMovedTo(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27CollegesAndSchools)\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialCollege(YaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT:\tPierson College is a residential college at Yale.\nFOL:\tResidentialCollege(YaleUniversity, PiersonCollege)\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMovedTo(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, 42.3 billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, {ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, ProfessionalSchools})\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialColleges(YaleUniversity, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege})\nTEXT:\tPierson College is a residential college at Yale.\nFOL:\tResidentialCollegeAtYale(PiersonCollege)\nANSWER:\tTrue\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateUniversity(YaleUniversity) & IvyLeague(YaleUniversity) & ResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMoved(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, 42.3billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27, ConstituentCollegesAndSchools) & Include(ConstituentCollegesAndSchools, ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, ProfessionalSchools)\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialCollegesAtYale(BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)\nTEXT:\tPierson College is a residential college at Yale.\nFOL:\tResidentialCollegeAtYale(PiersonCollege)\nANSWER:\tTrue\n"], ["TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(ThaiChilies) | Bakery(ThaiChilies)) -> (Hotpot(ThaiChilies) | Spicy(ThaiChilies))\nTEXT:\tDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL:\t-ProductOfBakedByMelissa(ThaiChilies) & -Bakery(ThaiChilies)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOf(x, BakedByMelissa) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL:\t-ProductOf(DriedThaiChilies, BakedByMelissa) & -Bakery(DriedThaiChilies)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL:\t-ProductOfBakedByMelissa(DriedThaiChilies) & -Bakery(DriedThaiChilies)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL:\t-ProductOfBakedByMelissa(DriedThaiChilies) & -Bakery(DriedThaiChilies)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL:\t-ProductOfBakedByMelissa(DriedThaiChilies) & -Bakery(DriedThaiChilies)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL:\t-ProductOfBakedByMelissa(DriedThaiChilies) & -Bakery(DriedThaiChilies)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL:\t-ProductOfBakedByMelissa(DriedThaiChilies) & -Bakery(DriedThaiChilies)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL:\t-ProductOfBakedByMelissa(DriedThaiChilies) & -Bakery(DriedThaiChilies)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL:\t-ProductOfBakedByMelissa(DriedThaiChilies) & -Bakery(DriedThaiChilies)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOf(x, BakedByMelissa) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL:\t-ProductOf(DriedThaiChilies, BakedByMelissa) & -Bakery(DriedThaiChilies)\nANSWER:\tTrue\n"], ["TEXT:\tAll fir trees are evergreens.\nFOL:\tall x. (FirTree(x) -> Evergreen(x))\nTEXT:\tSome objects of worship are fir trees.\nFOL:\texists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT:\tSome evergreens are not objects of worship.\nFOL:\texists x. (Evergreen(x) & -ObjectOfWorship(x))\nANSWER:\tUncertain\n", "TEXT:\tAll fir trees are evergreens.\nFOL:\tall x. (FirTree(x) -> Evergreen(x))\nTEXT:\tSome objects of worship are fir trees.\nFOL:\texists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT:\tSome evergreens are not objects of worship.\nFOL:\texists x. (Evergreen(x) & -ObjectOfWorship(x))\nANSWER:\tUncertain\n", "TEXT:\tAll fir trees are evergreens.\nFOL:\tall x. (FirTree(x) -> Evergreen(x))\nTEXT:\tSome objects of worship are fir trees.\nFOL:\texists x. (WorshipObject(x) & FirTree(x))\nTEXT:\tSome evergreens are not objects of worship.\nFOL:\texists x. (Evergreen(x) & -WorshipObject(x))\nANSWER:\tUncertain\n", "TEXT:\tAll fir trees are evergreens.\nFOL:\tall x. (FirTree(x) -> Evergreen(x))\nTEXT:\tSome objects of worship are fir trees.\nFOL:\texists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT:\tSome evergreens are not objects of worship.\nFOL:\texists x. (Evergreen(x) & -ObjectOfWorship(x))\nANSWER:\tUncertain\n", "TEXT:\tAll fir trees are evergreens.\nFOL:\tall x. (FirTree(x) -> Evergreen(x))\nTEXT:\tSome objects of worship are fir trees.\nFOL:\texists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT:\tSome evergreens are not objects of worship.\nFOL:\texists x. (Evergreen(x) & -ObjectOfWorship(x))\nANSWER:\tUncertain\n", "TEXT:\tAll fir trees are evergreens.\nFOL:\tall x. (FirTree(x) -> Evergreen(x))\nTEXT:\tSome objects of worship are fir trees.\nFOL:\texists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT:\tSome evergreens are not objects of worship.\nFOL:\texists x. (Evergreen(x) & -ObjectOfWorship(x))\nANSWER:\tUncertain\n", "TEXT:\tAll fir trees are evergreens.\nFOL:\tall x. (FirTree(x) -> Evergreen(x))\nTEXT:\tSome objects of worship are fir trees.\nFOL:\texists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT:\tSome evergreens are not objects of worship.\nFOL:\texists x. (Evergreen(x) & -ObjectOfWorship(x))\nANSWER:\tUncertain\n", "TEXT:\tAll fir trees are evergreens.\nFOL:\tall x. (FirTree(x) -> Evergreen(x))\nTEXT:\tSome objects of worship are fir trees.\nFOL:\texists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT:\tSome evergreens are not objects of worship.\nFOL:\texists x. (Evergreen(x) & -ObjectOfWorship(x))\nANSWER:\tUncertain\n", "TEXT:\tAll fir trees are evergreens.\nFOL:\tall x. (FirTree(x) -> Evergreen(x))\nTEXT:\tSome objects of worship are fir trees.\nFOL:\texists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT:\tSome evergreens are not objects of worship.\nFOL:\texists x. (Evergreen(x) & -ObjectOfWorship(x))\nANSWER:\tUncertain\n", "TEXT:\tAll fir trees are evergreens.\nFOL:\tall x. (FirTree(x) -> Evergreen(x))\nTEXT:\tSome objects of worship are fir trees.\nFOL:\texists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT:\tSome evergreens are not objects of worship.\nFOL:\texists x. (Evergreen(x) & -ObjectOfWorship(x))\nANSWER:\tUncertain\n"], ["TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NLP_Task(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (NLP_Task(x) & OutputIsTextSequence(x) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNLP_Task(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutputIsTextSequence(MachineTranslation)\nTEXT:\tMachine translation is a language understanding task.\nFOL:\tLanguageUnderstandingTask(MachineTranslation)\nANSWER:\tFalse\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NLP_Task(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (NLP_Task(x) & OutputTextSequence(x) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNLP_Task(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutputTextSequence(MachineTranslation)\nTEXT:\tMachine translation is a language understanding task.\nFOL:\tLanguageUnderstandingTask(MachineTranslation)\nANSWER:\tFalse\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NLP_Task(x) -> LanguageGenerationTask(x) | LanguageUnderstandingTask(x))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (NLP_Task(x) & OutputIsTextSequence(x) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNLP_Task(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutputIsTextSequence(MachineTranslation)\nTEXT:\tMachine translation is a language understanding task.\nFOL:\tLanguageUnderstandingTask(MachineTranslation)\nANSWER:\tFalse\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (NaturalLanguageProcessingTask(x) & OutputTextSequence(x) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNaturalLanguageProcessingTask(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutputTextSequence(MachineTranslation)\nTEXT:\tMachine translation is a language understanding task.\nFOL:\tLanguageUnderstandingTask(MachineTranslation)\nANSWER:\tFalse\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NaturalLanguageProcessingTask(x) -> LanguageGenerationTask(x) | LanguageUnderstandingTask(x))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (NaturalLanguageProcessingTask(x) & Output(x, TextSequence) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNaturalLanguageProcessingTask(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutput(MachineTranslation, TextSequence)\nTEXT:\tMachine translation is a language understanding task.\nFOL:\tLanguageUnderstandingTask(MachineTranslation)\nANSWER:\tFalse\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (NaturalLanguageProcessingTask(x) & OutputTextSequence(x) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNaturalLanguageProcessingTask(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutputTextSequence(MachineTranslation)\nTEXT:\tMachine translation is a language understanding task.\nFOL:\tLanguageUnderstandingTask(MachineTranslation)\nANSWER:\tFalse\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NlpTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (NlpTask(x) & OutputIsTextSequence(x) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNlpTask(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutputIsTextSequence(MachineTranslation)\nTEXT:\tMachine translation is a language understanding task.\nFOL:\tLanguageUnderstandingTask(MachineTranslation)\nANSWER:\tFalse\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NaturalLanguageProcessingTask(x) -> LanguageGenerationTask(x) | LanguageUnderstandingTask(x))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (OutputTextSequence(x) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNaturalLanguageProcessingTask(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutputTextSequence(MachineTranslation)\nTEXT:\tMachine translation is a language understanding task.\nFOL:\tLanguageUnderstandingTask(MachineTranslation)\nANSWER:\tFalse\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NLPtask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (NLPtask(x) & OutputIsTextSequence(x) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNLPtask(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutputIsTextSequence(MachineTranslation)\nTEXT:\tMachine translation is a language understanding task.\nFOL:\tLanguageUnderstandingTask(MachineTranslation)\nANSWER:\tFalse\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NLPtask(x) -> (GenerationTask(x) | UnderstandingTask(x)))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (NLPtask(x) & OutputTextSequence(x) -> GenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNLPtask(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutputTextSequence(MachineTranslation)\nTEXT:\tMachine translation is a language understanding task.\nFOL:\tUnderstandingTask(MachineTranslation)\nANSWER:\tFalse\n"], ["TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (IstanbulPlate(x) -> BeginsWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginsWith34(x) -> -IstanbulPlate(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tIstanbulPlate(Joe)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginsWith35(Tom)\nTEXT:\t[BG] If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT:\tTom's license plate is from Istanbul.\nFOL:\tIstanbulPlate(Tom)\nANSWER:\tFalse\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (PlateFromIstanbul(x) -> BeginsWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginsWith34(x) -> -PlateFromIstanbul(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tPlateFromIstanbul(Joe)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginsWith35(Tom)\nTEXT:\t[BG] If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT:\tTom's license plate is from Istanbul.\nFOL:\tPlateFromIstanbul(Tom)\nANSWER:\tFalse\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (PlateFromIstanbul(x) -> BeginsWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginsWith34(x) -> -PlateFromIstanbul(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tPlateFromIstanbul(Joe)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginsWith35(Tom)\nTEXT:\tIf a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT:\tTom's license plate is from Istanbul.\nFOL:\tPlateFromIstanbul(Tom)\nANSWER:\tFalse\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (IstanbulPlate(x) -> BeginsWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginsWith34(x) -> -IstanbulPlate(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tIstanbulPlate(JoePlate)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginsWith35(TomPlate)\nTEXT:\tIf a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT:\tTom's license plate is from Istanbul.\nFOL:\tIstanbulPlate(TomPlate)\nANSWER:\tFalse\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (VehiclePlateFromIstanbul(x) -> BeginsWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginsWith34(x) -> -VehiclePlateFromIstanbul(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tVehiclePlateFromIstanbul(JoePlate)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginsWith35(TomPlate)\nTEXT:\tIf a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT:\tTom's license plate is from Istanbul.\nFOL:\tVehiclePlateFromIstanbul(TomPlate)\nANSWER:\tFalse\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (RegistrationPlateFromIstanbul(x) -> BeginsWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginsWith34(x) -> -RegistrationPlateFromIstanbul(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tRegistrationPlateFromIstanbul(Joe)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginsWith35(Tom)\nTEXT:\t[BG] If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT:\tTom's license plate is from Istanbul.\nFOL:\tRegistrationPlateFromIstanbul(Tom)\nANSWER:\tFalse\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (PlateFromIstanbul(x) -> BeginsWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginsWith34(x) -> -PlateFromIstanbul(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tPlateFromIstanbul(JoesPlate)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginsWith35(TomsPlate)\nTEXT:\tIf a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT:\tTom's license plate is from Istanbul.\nFOL:\tPlateFromIstanbul(TomsPlate)\nANSWER:\tFalse\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (RegistrationPlateInIstanbul(x) -> BeginsWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginsWith34(x) -> -RegistrationPlateInIstanbul(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tRegistrationPlateInIstanbul(JoesPlate)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginsWith35(TomsPlate)\nTEXT:\tIf a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT:\tTom's license plate is from Istanbul.\nFOL:\tRegistrationPlateInIstanbul(TomsPlate)\nANSWER:\tFalse\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (VehiclePlateFromIstanbul(x) -> BeginsWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginsWith34(x) -> -VehiclePlateFromIstanbul(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tVehiclePlateFromIstanbul(Joe)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginsWith35(Tom)\nTEXT:\tIf a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT:\tTom's license plate is from Istanbul.\nFOL:\tVehiclePlateFromIstanbul(Tom)\nANSWER:\tFalse\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (IstanbulPlate(x) -> BeginsWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginsWith34(x) -> -IstanbulPlate(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tIstanbulPlate(Joe)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginsWith35(Tom)\nTEXT:\t[BG] If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT:\tTom's license plate is from Istanbul.\nFOL:\tIstanbulPlate(Tom)\nANSWER:\tFalse\n"], ["TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformInSchoolTalentShows(x) -> AttendAndEngagedWithSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. (PerformInSchoolTalentShows(x) | InactiveAndDisinterested(x))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. (YoungOrTeenagerWithCareerWishes(x) -> Student(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendAndEngagedWithSchoolEvents(Bonnie) & Student(Bonnie)) | (-AttendAndEngagedWithSchoolEvents(Bonnie) & -Student(Bonnie)))\nTEXT:\tIf Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL:\t((YoungOrTeenagerWithCareerWishes(Bonnie) & ChaperoneHighSchoolDances(Bonnie)) | (-YoungOrTeenagerWithCareerWishes(Bonnie) & -ChaperoneHighSchoolDances(Bonnie))) -> (Student(Bonnie) | InactiveAndDisinterested(Bonnie))\nANSWER:\tUncertain\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformTalentShow(x) -> AttendSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. (PerformTalentShow(x) | InactiveDisinterested(x))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneDances(x) -> -Student(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveDisinterested(x) -> ChaperoneDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. (YoungTeenager(x) -> Student(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendSchoolEvents(Bonnie) & Student(Bonnie)) | (-AttendSchoolEvents(Bonnie) & -Student(Bonnie)))\nTEXT:\tIf Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL:\t((YoungTeenager(Bonnie) & ChaperoneDances(Bonnie)) | (-YoungTeenager(Bonnie))) -> (Student(Bonnie) | InactiveDisinterested(Bonnie))\nANSWER:\tUncertain\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) | InactiveAndDisinterestedMemberOfCommunity(x))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDances(x) -> -StudentAttendsSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. (YoungOrTeenagerWishFurtherAcademicCareer(x) -> StudentAttendsSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendAndEngagedWithSchoolEvents(Bonnie) & StudentAttendsSchool(Bonnie)) | (-AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentAttendsSchool(Bonnie)))\nTEXT:\tIf Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL:\t((YoungOrTeenagerWishFurtherAcademicCareer(Bonnie) & ChaperoneHighSchoolDances(Bonnie)) | (-YoungOrTeenagerWishFurtherAcademicCareer(Bonnie)) -> (StudentAttendsSchool(Bonnie) | InactiveAndDisinterestedMemberOfCommunity(Bonnie)))\nANSWER:\tUncertain\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformInSchoolTalentShow(x) -> AttendAndEngagedWithSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. (PerformInSchoolTalentShow(x) | InactiveAndDisinterestedCommunityMember(x))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDance(x) -> -AttendSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveAndDisinterestedCommunityMember(x) -> ChaperoneHighSchoolDance(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. ((YoungChild(x) | Teenager(x)) & WishToFurtherAcademicCareer(x) -> AttendSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendAndEngagedWithSchoolEvents(Bonnie) & AttendSchool(Bonnie)) | (-AttendAndEngagedWithSchoolEvents(Bonnie) & -AttendSchool(Bonnie)))\nTEXT:\tIf Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL:\t(((YoungChild(Bonnie) | Teenager(Bonnie)) & WishToFurtherAcademicCareer(Bonnie) & ChaperoneHighSchoolDance(Bonnie)) | -((YoungChild(Bonnie) | Teenager(Bonnie)) & WishToFurtherAcademicCareer(Bonnie))) -> (AttendSchool(Bonnie) | InactiveAndDisinterestedCommunityMember(Bonnie))\nANSWER:\tUncertain\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformInTalentShow(x) -> AttendAndEngageSchoolEvent(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. (PerformInTalentShow(x) | InactiveAndDisinterestedMember(x))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDance(x) -> -StudentAttendSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveAndDisinterestedMember(x) -> ChaperoneHighSchoolDance(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. ((YoungChild(x) | Teenager(x)) & WishToFurtherEducation(x) -> StudentAttendSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendAndEngageSchoolEvent(Bonnie) & StudentAttendSchool(Bonnie)) | (-AttendAndEngageSchoolEvent(Bonnie) & -StudentAttendSchool(Bonnie)))\nTEXT:\tIf Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL:\t(((YoungChild(Bonnie) | Teenager(Bonnie)) & WishToFurtherEducation(Bonnie) & ChaperoneHighSchoolDance(Bonnie)) | -((YoungChild(Bonnie) | Teenager(Bonnie)) & WishToFurtherEducation(Bonnie))) -> (StudentAttendSchool(Bonnie) | InactiveAndDisinterestedMember(Bonnie))\nANSWER:\tTrue\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformsInSchoolTalentShowsOften(x) -> AttendsAndEngagesSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. ((PerformsInSchoolTalentShowsOften(x) & -InactiveDisinterestedMember(x)) | (-PerformsInSchoolTalentShowsOften(x) & InactiveDisinterestedMember(x)))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperonesHighSchoolDances(x) -> -StudentAttendsSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveDisinterestedMember(x) -> ChaperonesHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. (YoungChildTeenagerWishToFurtherEducation(x) -> StudentAttendsSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendsAndEngagesSchoolEvents(Bonnie) & StudentAttendsSchool(Bonnie)) | (-AttendsAndEngagesSchoolEvents(Bonnie) & -StudentAttendsSchool(Bonnie)))\nTEXT:\tIf Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL:\t((YoungChildTeenagerWishToFurtherEducation(Bonnie) & ChaperonesHighSchoolDances(Bonnie)) | (-YoungChildTeenagerWishToFurtherEducation(Bonnie) & -ChaperonesHighSchoolDances(Bonnie))) -> (StudentAttendsSchool(Bonnie) | InactiveDisinterestedMember(Bonnie))\nANSWER:\tUncertain\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) | InactiveAndDisinterestedCommunityMember(x))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDances(x) -> -StudentAtSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveAndDisinterestedCommunityMember(x) -> ChaperoneHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. (YoungChildOrTeenagerWishFurtherEducation(x) -> StudentAtSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendAndEngagedSchoolEvents(Bonnie) & StudentAtSchool(Bonnie)) | (-AttendAndEngagedSchoolEvents(Bonnie) & -StudentAtSchool(Bonnie)))\nTEXT:\tIf Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL:\t((YoungChildOrTeenagerWishFurtherEducation(Bonnie) & ChaperoneHighSchoolDances(Bonnie)) | -YoungChildOrTeenagerWishFurtherEducation(Bonnie)) -> (StudentAtSchool(Bonnie) | InactiveAndDisinterestedCommunityMember(Bonnie))\nANSWER:\tUncertain\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) | InactiveAndDisinterestedMember(x))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDances(x) -> -StudentAttendTheSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveAndDisinterestedMember(x) -> ChaperoneHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. (YoungChildrenOrTeenagers(x) & WishToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentAttendTheSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendAndEngagedWithSchoolEvents(Bonnie) & StudentAttendTheSchool(Bonnie)) | (-AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentAttendTheSchool(Bonnie)))\nTEXT:\tIf Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL:\t((YoungChildrenOrTeenagers(Bonnie) & WishToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & ChaperoneHighSchoolDances(Bonnie)) | (-YoungChildrenOrTeenagers(Bonnie) & -WishToFurtherAcademicCareerAndEducationalOpportunities(Bonnie))) -> (StudentAttendTheSchool(Bonnie) | InactiveAndDisinterestedMember(Bonnie))\nANSWER:\tUncertain\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) | InactiveAndDisinterestedMember(x))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsTheSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveAndDisinterestedMember(x) -> ChaperoneHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendAndEngagedWithSchoolEvents(Bonnie) & StudentWhoAttendsTheSchool(Bonnie)) | (-AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentWhoAttendsTheSchool(Bonnie)))\nTEXT:\tIf Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL:\t((YoungChildOrTeenager(Bonnie) & WishToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & ChaperoneHighSchoolDances(Bonnie)) | (-YoungChildOrTeenager(Bonnie) & -WishToFurtherAcademicCareerAndEducationalOpportunities(Bonnie))) -> (StudentWhoAttendsTheSchool(Bonnie) | InactiveAndDisinterestedMember(Bonnie))\nANSWER:\tUncertain\n", "TEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedSchoolEvents(x))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\tall x. ((PerformInSchoolTalentShowsOften(x) & -InactiveDisinterestedMember(x)) | (-PerformInSchoolTalentShowsOften(x) & InactiveDisinterestedMember(x)))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDances(x) -> -StudentAttendSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveDisinterestedMember(x) -> ChaperoneHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. ((YoungChild(x) | Teenager(x)) & WishToFurtherEducation(x) -> StudentAttendSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL:\t((AttendAndEngagedSchoolEvents(Bonnie) & StudentAttendSchool(Bonnie)) | (-AttendAndEngagedSchoolEvents(Bonnie) & -StudentAttendSchool(Bonnie)))\nTEXT:\tIf Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL:\t(((YoungChild(Bonnie) | Teenager(Bonnie)) & WishToFurtherEducation(Bonnie) & ChaperoneHighSchoolDances(Bonnie)) | -((YoungChild(Bonnie) | Teenager(Bonnie)) & WishToFurtherEducation(Bonnie))) -> (StudentAttendSchool(Bonnie) | InactiveDisinterestedMember(Bonnie))\nANSWER:\tUncertain\n"], ["TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x))\nTEXT:\tColorectal cancer is a severe cancer\nFOL:\tSevereCancer(ColorectalCancer)\nANSWER:\tUncertain\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tBileDuctCancer(ColorectalCancer) & LowSurvivalRate(ColorectalCancer) -> -BileDuctCancer(ColorectalCancer)\nTEXT:\tColorectal cancer is a severe cancer\nFOL:\tSevereCancer(ColorectalCancer)\nANSWER:\tUncertain\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT:\tColorectal cancer is a severe cancer.\nFOL:\tSevereCancer(ColorectalCancer)\nANSWER:\tUncertain\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT:\tColorectal cancer is a severe cancer.\nFOL:\tSevereCancer(ColorectalCancer)\nANSWER:\tUncertain\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT:\tColorectal cancer is a severe cancer\nFOL:\tSevereCancer(ColorectalCancer)\nANSWER:\tUncertain\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x))\nTEXT:\tColorectal cancer is a severe cancer.\nFOL:\tSevereCancer(ColorectalCancer)\nANSWER:\tUncertain\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\t(BileDuctCancer(ColorectalCancer) & LowSurvivalRate(ColorectalCancer) -> -BileDuctCancer(ColorectalCancer))\nTEXT:\tColorectal cancer is a severe cancer\nFOL:\tSevereCancer(ColorectalCancer)\nANSWER:\tUncertain\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT:\tColorectal cancer is a severe cancer\nFOL:\tSevereCancer(ColorectalCancer)\nANSWER:\tUncertain\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\t((BileDuctCancer(ColorectalCancer) & LowSurvivalRate(ColorectalCancer)) -> -BileDuctCancer(ColorectalCancer))\nTEXT:\tColorectal cancer is a severe cancer.\nFOL:\tSevereCancer(ColorectalCancer)\nANSWER:\tUncertain\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x))\nTEXT:\tColorectal cancer is a severe cancer\nFOL:\tSevereCancer(ColorectalCancer)\nANSWER:\tUncertain\n"], ["TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\texists x. exists y. exists z. exists t. (Season(x, Spring) & Season(y, Summer) & Season(z, Fall) & Season(t, Winter))\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantsLongVacation(x) -> Loves(x, Summer))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tFavoriteSeason(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\texists x. exists y. (FavoriteSeason(Mia, x) & FavoriteSeason(Emma, y) & (x != y))\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantsLongVacation(James)\nTEXT:\tJames's favorite season is summer.\nFOL:\tFavoriteSeason(James, Summer)\nANSWER:\tTrue\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\tSeason(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantsLongVacation(x) -> Loves(x, Summer))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tFavoriteSeason(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\tall x. (FavoriteSeason(Mia, x) -> x != Summer)\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantsLongVacation(James)\nTEXT:\tJames's favorite season is summer.\nFOL:\tFavoriteSeason(James, Summer)\nANSWER:\tTrue\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\tSeason(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantsLongVacation(x) -> LovesMost(x, Summer))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tLovesMost(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\tall x. (LovesMost(Emma, x) -> -LovesMost(Mia, x))\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantsLongVacation(James)\nTEXT:\tJames's favorite season is summer.\nFOL:\tLovesMost(James, Summer)\nANSWER:\tTrue\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\tSeason(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantsLongVacation(x) -> LovesMost(x, Summer))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tLovesMost(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\texists x. (Season(x) & LovesMost(Mia, x) & x != Summer)\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantsLongVacation(James)\nTEXT:\tJames's favorite season is summer.\nFOL:\tLovesMost(James, Summer)\nANSWER:\tTrue\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\tSeason(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantsLongVacation(x) -> Loves(x, Summer))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tFavoriteSeason(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\t\u2203s. (Season(s) & FavoriteSeason(Mia, s) & s \u2260 Summer)\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantsLongVacation(James)\nTEXT:\tJames's favorite season is summer.\nFOL:\tFavoriteSeason(James, Summer)\nANSWER:\tTrue\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\tSeason(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantLongVacation(x) -> LoveSummerMost(x))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tFavoriteSeason(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\t-FavoriteSeason(Mia, Summer)\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantLongVacation(James)\nTEXT:\tJames's favorite season is summer.\nFOL:\tFavoriteSeason(James, Summer)\nANSWER:\tTrue\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\tSeason(spring) & Season(summer) & Season(fall) & Season(winter)\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantLongVacation(x) -> LoveSummer(x))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tFavoriteSeason(emma, summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\t-FavoriteSeason(mia, summer)\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantLongVacation(james)\nTEXT:\tJames's favorite season is summer.\nFOL:\tFavoriteSeason(james, summer)\nANSWER:\tTrue\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\texists x, y, z, w. (Season(x) & Season(y) & Season(z) & Season(w) & x=Spring & y=Summer & z=Fall & w=Winter)\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. ((Student(x) & WantsLongVacation(x)) -> LovesMost(x, Summer))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tLovesMost(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\tforall x. (LovesMost(Emma, x) -> -LovesMost(Mia, x))\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantsLongVacation(James)\nTEXT:\tJames's favorite season is summer.\nFOL:\tLovesMost(James, Summer)\nANSWER:\tTrue\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\texists x y z w. (Season(x) & Season(y) & Season(z) & Season(w) & Different(x, y, z, w) & YearContains(Spring, Summer, Fall, Winter))\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantsLongVacation(x) -> LovesMost(x, Summer))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tFavorite(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\tall x. (Favorite(Emma, x) -> -Favorite(Mia, x))\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantsLongVacation(James)\nTEXT:\tJames's favorite season is summer.\nFOL:\tFavorite(James, Summer)\nANSWER:\tTrue\n", "TEXT:\tThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\tall x. (Year(x) -> (Season(Spring) | Season(Summer) | Season(Fall) | Season(Winter)))\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantsLongVacation(x) -> LovesMost(x, Summer))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tFavorite(Emma, Summer)\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\t-Favorite(Mia, Summer)\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantsLongVacation(James)\nTEXT:\tJames's favorite season is summer.\nFOL:\tFavorite(James, Summer)\nANSWER:\tTrue\n"], ["TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopular(NetflixShow(\"Stranger Things\"))\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (Popular(NetflixShow(x)) -> BingeWatch(Karen, NetflixShow(x)))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (BingeWatch(Karen, NetflixShow(x)) <-> Download(Karen, NetflixShow(x)))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, NetflixShow(\"Black Mirror\"))\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(\"Black Mirror\")\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (BingeWatch(Karen, NetflixShow(x)) -> ShareTo(Karen, Lisa, NetflixShow(x)))\nTEXT:\tKaren will share \"Stranger Things\" to Lisa.\nFOL:\tShareTo(Karen, Lisa, NetflixShow(\"Stranger Things\"))\nANSWER:\tTrue\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopularNetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (PopularNetflixShow(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (NetflixShow(x) -> (BingeWatch(Karen, x) <-> Download(Karen, x)))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) -> Share(Karen, Lisa, x))\nTEXT:\tKaren will share \"Stranger Things\" to Lisa.\nFOL:\tShare(Karen, Lisa, StrangerThings)\nANSWER:\tTrue\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopularNetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (PopularNetflixShow(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) <-> Download(Karen, x))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) -> ShareTo(Karen, Lisa, x))\nTEXT:\tKaren will share \"Stranger Things\" to Lisa.\nFOL:\tShareTo(Karen, Lisa, StrangerThings)\nANSWER:\tTrue\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopular(StrangerThings) & Netflix(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (Netflix(x) & Popular(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (Netflix(x) & BingeWatch(Karen, x) <-> Download(Karen, x))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflix(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (Netflix(x) & BingeWatch(Karen, x) -> Share(Karen, Lisa, x))\nTEXT:\tKaren will share \"Stranger Things\" to Lisa.\nFOL:\tShare(Karen, Lisa, StrangerThings)\nANSWER:\tTrue\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopularNetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (PopularNetflixShow(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (NetflixShow(x) -> (BingeWatch(Karen, x) <-> Download(Karen, x)))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) -> Share(Karen, Lisa, x))\nTEXT:\tKaren will share \"Stranger Things\" to Lisa.\nFOL:\tShare(Karen, Lisa, StrangerThings)\nANSWER:\tTrue\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopularNetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (PopularNetflixShow(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (BingeWatch(Karen, x) <-> Download(Karen, x))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (BingeWatch(Karen, x) -> ShareTo(Karen, Lisa, x))\nTEXT:\tKaren will share \"Stranger Things\" to Lisa.\nFOL:\tShareTo(Karen, Lisa, StrangerThings)\nANSWER:\tTrue\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopular(NetflixShow(StrangerThings))\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (Popular(NetflixShow(x)) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (BingeWatch(Karen, x) <-> Download(Karen, x))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (BingeWatch(Karen, x) -> Share(Karen, Lisa, x))\nTEXT:\tKaren will share \"Stranger Things\" to Lisa.\nFOL:\tShare(Karen, Lisa, StrangerThings)\nANSWER:\tTrue\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopularNetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (PopularNetflixShow(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (NetflixShow(x) -> (BingeWatch(Karen, x) <-> Download(Karen, x)))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) -> ShareTo(Karen, x, Lisa))\nTEXT:\tKaren will share \"Stranger Things\" to Lisa.\nFOL:\tShareTo(Karen, StrangerThings, Lisa)\nANSWER:\tTrue\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopularNetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (PopularNetflixShow(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (NetflixShow(x) -> (BingeWatch(Karen, x) <-> Download(Karen, x)))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) -> ShareTo(Karen, Lisa, x))\nTEXT:\tKaren will share \"Stranger Things\" to Lisa.\nFOL:\tShareTo(Karen, Lisa, StrangerThings)\nANSWER:\tTrue\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopularNetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (PopularNetflixShow(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) <-> Download(Karen, x))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) -> Share(Karen, Lisa, x))\nTEXT:\tKaren will share \"Stranger Things\" to Lisa.\nFOL:\tShare(Karen, Lisa, StrangerThings)\nANSWER:\tTrue\n"], ["TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighlyRankedWTA(x) -> ActivePlayerMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToSwiatek(x) -> HighlyRankedWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRG2022(x) -> LostToSwiatek(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\texists x. (FemalePlayerRG2022(x) | MalePlayerRG2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRG2022(x) -> LostToNadal(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((HighlyRankedWTA(CocoGauff) | LostToNadal(CocoGauff)) -> -MalePlayerRG2022(CocoGauff))\nTEXT:\tCoco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL:\t-(LostToSwiatek(CocoGauff) | ActivePlayerMajorTennis(CocoGauff))\nANSWER:\tUncertain\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (RankedHighlyByWTA(x) -> ActivePlayerInMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIga(x) -> RankedHighlyByWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerAtRolandGarros2022(x) -> LostToIga(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\texists x. (FemalePlayerAtRolandGarros2022(x) | MalePlayerAtRolandGarros2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerAtRolandGarros2022(x) -> LostToRafael(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t(RankedHighlyByWTA(Coco) | LostToRafael(Coco)) -> -MalePlayerAtRolandGarros2022(Coco)\nTEXT:\tCoco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL:\t-LostToIga(Coco) & -ActivePlayerInMajorTennis(Coco)\nANSWER:\tFalse\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighlyRankedWTA(x) -> ActivePlayer(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIga(x) -> HighlyRankedWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRolandGarros2022(x) -> LostToIga(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\t(forall x. FemalePlayerRolandGarros2022(x)) or (forall y. MalePlayerRolandGarros2022(y))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRolandGarros2022(x) -> LostToRafael(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t(HighlyRankedWTA(CocoGauff) | LostToRafael(CocoGauff)) -> -MalePlayerRolandGarros2022(CocoGauff)\nTEXT:\tCoco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL:\t-LostToIga(CocoGauff) | -ActivePlayer(CocoGauff)\nANSWER:\tUncertain\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighlyRankedWTA(x) -> ActivePlayerMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIga(x) -> HighlyRankedWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRG2022(x) -> LostToIga(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\tall x. (TennisPlayerRG2022(x) -> FemalePlayerRG2022(x) | MalePlayerRG2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRG2022(x) -> LostToRafael(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((HighlyRankedWTA(CocoGauff) | LostToRafael(CocoGauff)) -> -MalePlayerRG2022(CocoGauff))\nTEXT:\tCoco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL:\t(-(LostToIga(CocoGauff) | ActivePlayerMajorTennis(CocoGauff)))\nANSWER:\tUncertain\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (RankedHighlyWTA(x) -> ActiveInMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIga(x) -> RankedHighlyWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRolandGarros2022(x) -> LostToIga(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\texists x. (FemalePlayerRolandGarros2022(x) | MalePlayerRolandGarros2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRolandGarros2022(x) -> LostToRafael(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((RankedHighlyWTA(Coco) | LostToRafael(Coco)) -> -MalePlayerRolandGarros2022(Coco))\nTEXT:\tCoco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL:\t(-LostToIga(Coco) & -ActiveInMajorTennis(Coco))\nANSWER:\tUncertain\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighlyRankedWTA(x) -> ActiveInMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIga(x) -> HighlyRankedWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIga(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\texists x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafael(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((HighlyRankedWTA(CocoGauff) | LostToRafael(CocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(CocoGauff))\nTEXT:\tCoco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL:\t-(LostToIga(CocoGauff) | ActiveInMajorTennis(CocoGauff))\nANSWER:\tFalse\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (RankedHighlyWTA(x) -> ActivePlayerMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIga(x) -> RankedHighlyWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRG2022(x) -> LostToIga(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\t(FemalePlayerRG2022(x) | MalePlayerRG2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRG2022(x) -> LostToRafael(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((RankedHighlyWTA(Coco) | LostToRafael(Coco)) -> -MalePlayerRG2022(Coco))\nTEXT:\tCoco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL:\t(-LostToIga(Coco) & -ActivePlayerMajorTennis(Coco))\nANSWER:\tUncertain\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighlyRankedWTA(x) -> ActivePlayerMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIga(x) -> HighlyRankedWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRolandGarros2022(x) -> LostToIga(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\texists x. ((FemalePlayerRolandGarros2022(x) & -MalePlayerRolandGarros2022(x)) | (-FemalePlayerRolandGarros2022(x) & MalePlayerRolandGarros2022(x)))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRolandGarros2022(x) -> LostToRafa(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((HighlyRankedWTA(Coco) & -LostToRafa(Coco)) | (-HighlyRankedWTA(Coco) & LostToRafa(Coco))) -> -MalePlayerRolandGarros2022(Coco)\nTEXT:\tCoco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL:\t(-LostToIga(Coco) & -ActivePlayerMajorTennis(Coco))\nANSWER:\tUncertain\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighlyRankedByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIgaSwiatek(x) -> HighlyRankedByWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\texists x. (FemaleTennisPlayerAtRolandGarros2022(x)) | exists x. (MaleTennisPlayerAtRolandGarros2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t(HighlyRankedByWTA(CocoGauff) | LostToRafaelNadal(CocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(CocoGauff)\nTEXT:\tCoco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL:\t-LostToIgaSwiatek(CocoGauff) & -MostActiveInMajorTennis(CocoGauff)\nANSWER:\tUncertain\n", "TEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (HighlyRankedWTA(x) -> MostActivePlayer(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (LostToIga(x) -> HighlyRankedWTA(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemalePlayerRolandGarros2022(x) -> LostToIga(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\texists x. (FemalePlayerRolandGarros2022(x) | MalePlayerRolandGarros2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MalePlayerRolandGarros2022(x) -> LostToRafael(x))\nTEXT:\tIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL:\t((HighlyRankedWTA(CocoGauff) | LostToRafael(CocoGauff)) -> -MalePlayerRolandGarros2022(CocoGauff))\nTEXT:\tCoco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL:\t(-LostToIga(CocoGauff) & -MostActivePlayer(CocoGauff))\nANSWER:\tUncertain\n"], ["TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is a CEO.\nFOL:\tCEO(Harry)\nANSWER:\tUncertain\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> Kind(x) | Evil(x))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is a CEO.\nFOL:\tCEO(Harry)\nANSWER:\tUncertain\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is a CEO.\nFOL:\tCEO(Harry)\nANSWER:\tUncertain\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is a CEO.\nFOL:\tCEO(Harry)\nANSWER:\tUncertain\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is a CEO.\nFOL:\tCEO(Harry)\nANSWER:\tUncertain\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is a CEO.\nFOL:\tCEO(Harry)\nANSWER:\tUncertain\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> Kind(x) | Evil(x))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is a CEO.\nFOL:\tCEO(Harry)\nANSWER:\tUncertain\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is a CEO.\nFOL:\tCEO(Harry)\nANSWER:\tUncertain\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is a CEO.\nFOL:\tCEO(Harry)\nANSWER:\tUncertain\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is a CEO.\nFOL:\tCEO(Harry)\nANSWER:\tUncertain\n"], ["TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. Turtle(x)\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL:\t(Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\nANSWER:\tFalse\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL:\t(Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\nANSWER:\tFalse\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL:\t(Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\nANSWER:\tFalse\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL:\t(Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\nANSWER:\tFalse\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL:\t(Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\nANSWER:\tFalse\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL:\t(Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\nANSWER:\tFalse\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL:\t(Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\nANSWER:\tFalse\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL:\t(Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\nANSWER:\tFalse\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL:\t(Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\nANSWER:\tFalse\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL:\t(Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\nANSWER:\tFalse\n"], ["TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> WorkInStudentJobsOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingInDiningHalls(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJobsOnCampus(Mary) & NeedToEarnMoneyForTuition(Mary)) -> (NotPicky(Mary) & -NeedToEarnMoneyForTuition(Mary))\nTEXT:\tMary needs to earn money to help pay for her college tuition.\nFOL:\tNeedToEarnMoneyForTuition(Mary)\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoney(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> WorkInStudentJobsOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. ((OrderTakeoutFrequently(x) & -EnjoyDiningHallMeals(x)) | (-OrderTakeoutFrequently(x) & EnjoyDiningHallMeals(x)))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> NotPickyEaters(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJobsOnCampus(Mary) & NeedToEarnMoney(Mary)) -> (-Picky(Mary) & -NeedToEarnMoney(Mary))\nTEXT:\tMary needs to earn money to help pay for her college tuition.\nFOL:\tNeedToEarnMoney(Mary)\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJob(x) -> NeedMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeout(x) -> WorkInStudentJob(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeout(x) | EnjoyDiningHall(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHall(x) -> NotPickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJob(Mary) & NeedMoneyForTuition(Mary)) -> (NotPickyEater(Mary) & -NeedMoneyForTuition(Mary))\nTEXT:\tMary needs to earn money to help pay for her college tuition.\nFOL:\tNeedMoneyForTuition(Mary)\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkOnCampus(x) -> NeedMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeout(x) -> WorkOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeout(x) | EnjoyDining(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDining(x) -> NotPickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDining(x) -> SpendTimeEatingWithFriends(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkOnCampus(Mary) & NeedMoneyForTuition(Mary)) -> (NotPickyEater(Mary) & -NeedMoneyForTuition(Mary))\nTEXT:\tMary needs to earn money to help pay for her college tuition.\nFOL:\tNeedMoneyForTuition(Mary)\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkStudentJobOnCampus(x) -> NeedEarnMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> WorkStudentJobOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeInDiningHall(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkStudentJobOnCampus(Mary) & NeedEarnMoneyForTuition(Mary)) -> (NotPickyEater(Mary) & -NeedEarnMoneyForTuition(Mary))\nTEXT:\tMary needs to earn money to help pay for her college tuition.\nFOL:\tNeedEarnMoneyForTuition(Mary)\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (StudentJob(x) -> NeedMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeout(x) -> StudentJob(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeout(x) | EnjoyDiningHall(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHall(x) -> NotPicky(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHall(x) -> SpendTimeInDiningHall(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(StudentJob(Mary) & NeedMoneyForTuition(Mary)) -> (NotPicky(Mary) & -NeedMoneyForTuition(Mary))\nTEXT:\tMary needs to earn money to help pay for her college tuition.\nFOL:\tNeedMoneyForTuition(Mary)\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMeals(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> NotPickyEaters(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJobs(Mary) & NeedToEarnMoney(Mary)) -> (-Picky(Mary) & -NeedToEarnMoney(Mary))\nTEXT:\tMary needs to earn money to help pay for her college tuition.\nFOL:\tNeedToEarnMoney(Mary)\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkStudentJob(x) -> NeedMoney(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeout(x) -> WorkStudentJob(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeout(x) | EnjoyDiningHallMeals(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkStudentJob(Mary) & NeedMoney(Mary) -> (-PickyEater(Mary) & -NeedMoney(Mary)))\nTEXT:\tMary needs to earn money to help pay for her college tuition.\nFOL:\tNeedMoney(Mary)\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (StudentJob(x) -> NeedToEarnMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMeals(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> NotPickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> SpendTimeInDiningHalls(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(StudentJob(Mary) & NeedToEarnMoneyForTuition(Mary)) -> (NotPickyEater(Mary) & -NeedToEarnMoneyForTuition(Mary))\nTEXT:\tMary needs to earn money to help pay for her college tuition.\nFOL:\tNeedToEarnMoneyForTuition(Mary)\nANSWER:\tFalse\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> WorkInStudentJobsOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMeals(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> NotPickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> SpendTimeEatingInDiningHall(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJobsOnCampus(Mary) & NeedToEarnMoneyForTuition(Mary)) -> (NotPickyEater(Mary) & -NeedToEarnMoneyForTuition(Mary))\nTEXT:\tMary needs to earn money to help pay for her college tuition.\nFOL:\tNeedToEarnMoneyForTuition(Mary)\nANSWER:\tUncertain\n"], ["TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet and a cow.\nFOL:\tPet(Ted) & Cow(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an alligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet and a cow.\nFOL:\tPet(Ted) & Cow(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet and a cow.\nFOL:\tPet(Ted) & Cow(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet and a cow.\nFOL:\tPet(Ted) & Cow(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet and a cow.\nFOL:\tPet(Ted) & Cow(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet and a cow.\nFOL:\tPet(Ted) & Cow(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet and a cow.\nFOL:\tPet(Ted) & Cow(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet and a cow.\nFOL:\tPet(Ted) & Cow(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an alligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet and a cow.\nFOL:\tPet(Ted) & Cow(Ted)\nANSWER:\tFalse\n", "TEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\texists x. (Pet(x) & Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an alligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet and a cow.\nFOL:\tPet(Ted) & Cow(Ted)\nANSWER:\tFalse\n"], ["TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (Owns(x, LargeDesktopMonitor) -> WorkAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (Has(x, HomeOffice) -> Owns(x, LargeDesktopMonitor))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendFreeTimeTidying(x) -> NotLateSleepAndLateWake(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((LateSleepAndLateWake(Remy) & SpendFreeTimeTidying(Remy)) | (NotLateSleepAndLateWake(Remy) & NotSpendFreeTimeTidying(Remy)))\nTEXT:\tRemy visits the office supply store regularly.\nFOL:\tVisitOfficeSupplyStore(Remy)\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeMonitor(x) -> WorkAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HaveHomeOffice(x) -> OwnLargeMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkAtHome(x) -> TidyAndOrganize(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkAtHome(x) -> VisitOfficeStore(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (TidyAndOrganize(x) -> NotSleepLate(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((SleepLate(Remy) & TidyAndOrganize(Remy)) | (-SleepLate(Remy) & -TidyAndOrganize(Remy)))\nTEXT:\tRemy visits the office supply store regularly.\nFOL:\tVisitOfficeStore(Remy)\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnsLargeDesktopMonitor(x) -> WorksAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HasImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorksAtHome(x) -> TidiesAndOrganizes(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorksAtHome(x) -> VisitsOfficeSupplyStore(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (TidiesAndOrganizes(x) -> -GoesToBedLateAndWakesUpLate(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoesToBedLateAndWakesUpLate(Remy) & TidiesAndOrganizes(Remy)) | (-GoesToBedLateAndWakesUpLate(Remy) & -TidiesAndOrganizes(Remy)))\nTEXT:\tRemy visits the office supply store regularly.\nFOL:\tVisitsOfficeSupplyStore(Remy)\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HaveImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) & SpendFreeTimeTidyingAndOrganizing(Remy)) | (-GoToBedLateAndWakeUpAfterNoon(Remy) & -SpendFreeTimeTidyingAndOrganizing(Remy)))\nTEXT:\tRemy visits the office supply store regularly.\nFOL:\tVisitOfficeSupplyStoreRegularly(Remy)\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeMonitor(x) -> WorkRegularlyAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HaveImpressiveHomeOffice(x) -> OwnLargeMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAtHome(x) -> SpendTimeOrganizingHome(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendTimeOrganizingHome(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) & SpendTimeOrganizingHome(Remy)) | (-GoToBedLateAndWakeUpAfterNoon(Remy) & -SpendTimeOrganizingHome(Remy)))\nTEXT:\tRemy visits the office supply store regularly.\nFOL:\tVisitOfficeSupplyStore(Remy)\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeMonitor(x) -> WorkRegularlyAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HaveImpressiveHomeOffice(x) -> OwnLargeMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAtHome(x) -> SpendTimeTidying(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendTimeTidying(x) -> NotGoToBedLate(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLate(Remy) & WakeUpAfterNoon(Remy) & SpendTimeTidying(Remy)) | (-GoToBedLate(Remy) & -WakeUpAfterNoon(Remy) & -SpendTimeTidying(Remy)))\nTEXT:\tRemy visits the office supply store regularly.\nFOL:\tVisitOfficeSupplyStore(Remy)\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnsLargeDesktopMonitor(x) -> WorksRegularlyAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HasHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorksRegularlyAtHome(x) -> TidiesAndOrganizes(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorksRegularlyAtHome(x) -> VisitsOfficeSupplyStore(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (TidiesAndOrganizes(x) -> -SleepsLateAndWakesUpLate(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((SleepsLateAndWakesUpLate(Remy) & TidiesAndOrganizes(Remy)) | (-SleepsLateAndWakesUpLate(Remy) & -TidiesAndOrganizes(Remy)))\nTEXT:\tRemy visits the office supply store regularly.\nFOL:\tVisitsOfficeSupplyStore(Remy)\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnsLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) & SpendFreeTimeTidyingAndOrganizing(Remy)) | (-GoToBedLateAndWakeUpAfterNoon(Remy) & -SpendFreeTimeTidyingAndOrganizing(Remy)))\nTEXT:\tRemy visits the office supply store regularly.\nFOL:\tVisitOfficeSupplyStoreRegularly(Remy)\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInTheirHomes(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendFreeTimeTidyingAndOrganizingSpacesInTheirHomes(x) -> NotGoToBedLateAndWakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) & SpendFreeTimeTidyingAndOrganizingSpacesInTheirHome(Remy)) | (-GoToBedLateAndWakeUpAfterNoon(Remy) & -SpendFreeTimeTidyingAndOrganizingSpacesInTheirHome(Remy)))\nTEXT:\tRemy visits the office supply store regularly.\nFOL:\tVisitOfficeSupplyStoreRegularly(Remy)\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) & SpendFreeTimeTidyingAndOrganizing(Remy)) | (-GoToBedLateAndWakeUpAfterNoon(Remy) & -SpendFreeTimeTidyingAndOrganizing(Remy)))\nTEXT:\tRemy visits the office supply store regularly.\nFOL:\tVisitOfficeSupplyStoreRegularly(Remy)\nANSWER:\tUncertain\n"], ["TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. (BredBack(x) -> ArtificialSelection(x))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tBredBack(HeckCattle) & Resemble(HeckCattle, Aurochs)\nTEXT:\tHeck cattle are animals.\nFOL:\tAnimal(HeckCattle)\nTEXT:\tAurochs are animals.\nFOL:\tAnimal(Aurochs)\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. exists y. (Animal(x) & BredBack(x) & Resemble(x, y) & Extinct(y))\nTEXT:\tAurochs are extinct.\nFOL:\tExtinct(Aurochs)\nANSWER:\tUncertain\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimals(x))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tBredBack(HeckCattle) & Resemble(HeckCattle, Aurochs)\nTEXT:\tHeck cattle are animals.\nFOL:\tAnimal(HeckCattle)\nTEXT:\tAurochs are animals.\nFOL:\tAnimal(Aurochs)\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. (Animal(x) & ToBeBredBack(x) & exists y. (Animal(y) & Extinct(y) & Resemble(x, y)))\nTEXT:\tAurochs are extinct.\nFOL:\tExtinct(Aurochs)\nANSWER:\tUncertain\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimals(x))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tExist x. (BredBack(x, \"1920s\") & Resemble(x, Aurochs) & Cattle(x, \"Heck\"))\nTEXT:\tHeck cattle are animals.\nFOL:\tCattle(Heck) -> Animal(Heck)\nTEXT:\tAurochs are animals.\nFOL:\tAnimal(Aurochs)\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\tExist x. (Animal(x) & ToBeBredBack(x) -> Resemble(x, ExtinctAnimals))\nTEXT:\tAurochs are extinct.\nFOL:\tExtinct(Aurochs)\nANSWER:\tUncertain\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. (BreedingBack(x) -> ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimals(x))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\texists x. (HeckCattle(x) & BredBack(x, 1920s) & Resemble(x, Aurochs))\nTEXT:\tHeck cattle are animals.\nFOL:\tall x. (HeckCattle(x) -> Animal(x))\nTEXT:\tAurochs are animals.\nFOL:\tall x. (Aurochs(x) -> Animal(x))\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. exists y. (Animal(x) & ToBeBredBack(x) & Resemble(x, y) & Extinct(y))\nTEXT:\tAurochs are extinct.\nFOL:\tall x. (Aurochs(x) -> Extinct(x))\nANSWER:\tUncertain\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimals(x))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tBreedingBack(HeckCattle) & Resemble(HeckCattle, Aurochs)\nTEXT:\tHeck cattle are animals.\nFOL:\tAnimal(HeckCattle)\nTEXT:\tAurochs are animals.\nFOL:\tAnimal(Aurochs)\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. (Animal(x) & ToBeBredBack(x) & resembles(x, y) & Extinct(y))\nTEXT:\tAurochs are extinct.\nFOL:\tExtinct(Aurochs)\nANSWER:\tUncertain\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tHeckCattle -> BredBack & Resemble(Aurochs)\nTEXT:\tHeck cattle are animals.\nFOL:\tHeckCattle -> Animals\nTEXT:\tAurochs are animals.\nFOL:\tAurochs -> Animals\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. (Animals(x) & ToBeBredBack(x) & Resemble(x, ExtinctAnimals))\nTEXT:\tAurochs are extinct.\nFOL:\tAurochs -> Extinct\nANSWER:\tUncertain\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tBredBack(HeckCattle) & Resemble(HeckCattle, Aurochs)\nTEXT:\tHeck cattle are animals.\nFOL:\tAnimal(HeckCattle)\nTEXT:\tAurochs are animals.\nFOL:\tAnimal(Aurochs)\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. (Animal(x) & BredBack(x) & exists y. (Animal(y) & Resemble(x, y) & Extinct(y)))\nTEXT:\tAurochs are extinct.\nFOL:\tExtinct(Aurochs)\nANSWER:\tUncertain\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tArtificialSelection(BreedingBack) & DeliberateSelectiveBreeding(BreedingBack)\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tBredBack(HeckCattle, 1920s) & Resemble(HeckCattle, Aurochs)\nTEXT:\t[BG] Heck cattle are animals.\nFOL:\tAnimal(HeckCattle)\nTEXT:\t[BG] Aurochs are animals.\nFOL:\tAnimal(Aurochs)\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. (Animal(x) & BredBack(x) & exists y. (Animal(y) & Resemble(x, y) & Extinct(y)))\nTEXT:\tAurochs are extinct.\nFOL:\tExtinct(Aurochs)\nANSWER:\tUncertain\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. (BreedingBack(x) -> ArtificialSelection(x) & DeliberateSelectiveBreeding(x))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tBreedingBack(HeckCattle) & Resemble(HeckCattle, Aurochs)\nTEXT:\tHeck cattle are animals.\nFOL:\tAnimal(HeckCattle)\nTEXT:\tAurochs are animals.\nFOL:\tAnimal(Aurochs)\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. exists y. (Animal(x) & Animal(y) & BreedingBack(x) & Resemble(x, y) & Extinct(y))\nTEXT:\tAurochs are extinct.\nFOL:\tExtinct(Aurochs)\nANSWER:\tUncertain\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x, DomesticAnimals))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tBreedingBack(HeckCattle) & Resemble(HeckCattle, Aurochs)\nTEXT:\tHeck cattle are animals.\nFOL:\tAnimal(HeckCattle)\nTEXT:\tAurochs are animals.\nFOL:\tAnimal(Aurochs)\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. exists y. (Animal(x) & Animal(y) & BreedingBack(x) & Resemble(x, y) & Extinct(y))\nTEXT:\tAurochs are extinct.\nFOL:\tExtinct(Aurochs)\nANSWER:\tUncertain\n"], ["TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\texists x. (SitcomSeries(x) & British(x) & Starring(x, Pappy's) & Equals(x, Badults))\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\tPiloted(Badults, July2013, BBCThree)\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\tWorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\tScriptEditor(Badults, AndrewCollins)\nTEXT:\tAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL:\texists x. (WorkingTitle(x, \"The Secret Dude Society\") & ScriptEditor(x, AndrewCollins))\nANSWER:\tTrue\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\texists x. (Badults(x) & BritishSitcomSeries(x) & Stars(x, Pappy's))\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\texists x. (Badults(x) & PilotedIn(x, July2013, BBCThree))\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\texists x. (Badults(x) & WorkingTitle(x, TheSecretDudeSociety))\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\texists x. (Badults(x) & ScriptEditor(x, AndrewCollins))\nTEXT:\tAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL:\texists x. (WorkingTitle(x, TheSecretDudeSociety) & ScriptEditor(x, AndrewCollins))\nANSWER:\tTrue\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\tBritishSitcom(Badults) & Stars(Badults, Pappys)\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\tPiloted(Badults, July2013, BBCThree)\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\tWorkingTitle(Badults, TheSecretDudeSociety)\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\tScriptEditor(Badults, AndrewCollins)\nTEXT:\tAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL:\texists x. (WorkingTitle(x, TheSecretDudeSociety) & ScriptEditor(x, AndrewCollins))\nANSWER:\tTrue\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\texists x. (Badults(x) & BritishSitcomSeries(x) & Starring(x, Pappy's))\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\texists x. (Badults(x) & Piloted(x, July2013, BBCThree))\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\texists x. (Badults(x) & WorkingTitle(x, TheSecretDudeSociety))\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\texists x. (Badults(x) & ScriptEditor(x, AndrewCollins))\nTEXT:\tAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL:\texists x. (Series(x) & WorkingTitle(x, TheSecretDudeSociety) & ScriptEditor(x, AndrewCollins))\nANSWER:\tTrue\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\texists x. (Sitcom(x) & British(x) & Badults(x) & Starring(x, Pappys))\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\tPiloted(Badults, July2013, BBCThree)\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\tWorkingTitle(Badults, TheSecretDudeSociety)\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\tScriptEditor(AndrewCollins, Badults)\nTEXT:\tAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL:\texists x. (WorkingTitle(x, TheSecretDudeSociety) & ScriptEditor(AndrewCollins, x))\nANSWER:\tTrue\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\tBritishSitcomSeries(Badults) & Starring(Badults, Pappy's)\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\tPiloted(Badults, July2013, BBCThree)\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\tWorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\tScriptEditor(AndrewCollins, Badults)\nTEXT:\tAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL:\texists x. (WorkingTitle(x, \"The Secret Dude Society\") & ScriptEditor(AndrewCollins, x))\nANSWER:\tTrue\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\tBritishSitcom(Badults) & Stars(Badults, Pappys)\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\tPiloted(Badults, July2013, BBCThree)\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\tWorkingTitle(Badults, TheSecretDudeSociety)\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\tScriptEditor(Badults, AndrewCollins)\nTEXT:\tAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL:\texists x. (WorkingTitle(x, TheSecretDudeSociety) & ScriptEditor(x, AndrewCollins))\nANSWER:\tTrue\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\texists x. (Series(x) & BritishSitcom(x) & Starring(x, Pappys) & Equal(x, Badults))\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\tPiloted(Badults, July2013, BBCThree)\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\tWorkingTitle(Badults, TheSecretDudeSociety)\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\tScriptEditor(Badults, AndrewCollins)\nTEXT:\tAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL:\texists x. (Series(x) & WorkingTitle(x, TheSecretDudeSociety) & ScriptEditor(x, AndrewCollins))\nANSWER:\tTrue\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\texists x. (Series(x) & BritishSitcom(x) & StarringMembersOf(x, Pappy's) & Equal(x, Badults))\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\tPiloted(Badults, July2013, BBCThree)\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\tWorkingTitle(Badults, TheSecretDudeSociety)\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\tScriptEditor(AndrewCollins, Badults)\nTEXT:\tAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL:\texists x. (ScriptEditor(AndrewCollins, x) & WorkingTitle(x, TheSecretDudeSociety))\nANSWER:\tTrue\n", "TEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\texists x. (Series(x) & BritishSitcom(x) & Stars(x, Pappys))\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\texists x. (Series(x) & Piloted(x, July2013) & On(x, BBCThree))\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\texists x. (Series(x) & WorkingTitle(x, \"The Secret Dude Society\"))\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\texists x. (Series(x) & ScriptEditor(x, AndrewCollins))\nTEXT:\tAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL:\texists x. (Series(x) & WorkingTitle(x, \"The Secret Dude Society\") & ScriptEditor(x, AndrewCollins))\nANSWER:\tTrue\n"], ["TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> Child(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParis(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParis(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tChild(John) -> -TravelToParis(John) & -Wedding(John)\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(WellAttended(John) & Wedding(John)) -> (WeddingInJuly(John) | TravelToParis(John))\nTEXT:\tJohn has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL:\t-WellAttended(John) & -Wedding(John) & -TravelToParis(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> HaveChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (HoneymoonInParis(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> HoneymoonInParis(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHaveChild(John) -> -HoneymoonInParis(John) & -Wedding(John)\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(Wedding(John) & WellAttended(John)) -> (WeddingInJuly(John) | HoneymoonInParis(John))\nTEXT:\tJohn has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL:\t-(Wedding(John) & WellAttended(John)) & -HoneymoonInParis(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> HasChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParisHoneymoon(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParisHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHasChild(John) -> (-TravelToParisHoneymoon(John) & -Wedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(WellAttendedWedding(John) -> (WeddingInJuly(John) | TravelToParisHoneymoon(John)))\nTEXT:\tJohn has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL:\t(-WellAttendedWedding(John) & -TravelToParisHoneymoon(John))\nANSWER:\tTrue\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParisHoneymoon(x) -> HasWedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. all y. (HasWeddingInJuly(x, y) -> TravelToParisHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. exists y. (HasWeddingInJuly(x, y) & WellAttended(y))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHasAtLeastOneChild(John) -> (-TravelToParisHoneymoon(John) & -HasWedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\texists x. (HasWedding(John, x) & WellAttended(x)) -> (HasWeddingInJuly(John, x) | TravelToParisHoneymoon(John))\nTEXT:\tJohn has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL:\t-exists x. (HasWedding(John, x) & WellAttended(x)) & -TravelToParisHoneymoon(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> Child(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (ParisHoneymoon(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (JulyWedding(x) -> ParisHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (JulyWedding(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tChild(John) -> (-ParisHoneymoon(John) & -Wedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(Wedding(John) & WellAttended(John)) -> (JulyWedding(John) | ParisHoneymoon(John))\nTEXT:\tJohn has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL:\t(-Wedding(John) & -WellAttended(John)) & -ParisHoneymoon(John)\nANSWER:\tTrue\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParis(x) -> HasWedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParis(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHasAtLeastOneChild(John) -> (-TravelToParis(John) & -HasWedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(HasWedding(John) & WellAttended(John)) -> (WeddingInJuly(John) | TravelToParis(John))\nTEXT:\tJohn has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL:\t-(HasWedding(John) & WellAttended(John)) & -TravelToParis(John)\nANSWER:\tTrue\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (HaveWedding(x) -> HaveChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParis(x) -> HaveWedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (JulyWedding(x) -> TravelToParis(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (JulyWedding(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHaveChild(John) -> (-TravelToParis(John) & -HaveWedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\tHaveWedding(John) & WellAttended(John) -> (JulyWedding(John) | TravelToParis(John))\nTEXT:\tJohn has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL:\t-WellAttended(John) & -TravelToParis(John)\nANSWER:\tTrue\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (HasWedding(x) -> HasChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelParisHoneymoon(x) -> HasWedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelParisHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHasChild(John) -> (-TravelParisHoneymoon(John) & -HasWedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(HasWedding(John) & WellAttended(John)) -> (WeddingInJuly(John) | TravelParisHoneymoon(John))\nTEXT:\tJohn has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL:\t-HasWedding(John) & -WellAttended(John) & -TravelParisHoneymoon(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> HaveChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\t(HaveChild(John) -> -TravelToParisForHoneymoon(John) & -Wedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(WellAttendedWedding(John) -> WeddingInJuly(John) | -WeddingInJuly(John) & TravelToParisForHoneymoon(John))\nTEXT:\tJohn has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL:\t-WellAttendedWedding(John) & -TravelToParisForHoneymoon(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> HasChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (HoneymoonInParis(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (JulyWedding(x) -> HoneymoonInParis(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (JulyWedding(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHasChild(John) -> (-HoneymoonInParis(John) & -Wedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(WellAttended(John) & Wedding(John)) -> (JulyWedding(John) | HoneymoonInParis(John))\nTEXT:\tJohn has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL:\t-(WellAttended(John) & Wedding(John)) & -HoneymoonInParis(John)\nANSWER:\tTrue\n"], ["TEXT:\tSusan flies to LGA airport.\nFOL:\tFliesTo(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. (FliesFrom(x, y) -> -FliesTo(x, y))\nTEXT:\tJohn flies from LGA airport.\nFOL:\tFliesFrom(John, LGA)\nTEXT:\tJohn flies to LGA airport.\nFOL:\tFliesTo(John, LGA)\nANSWER:\tFalse\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tFliesTo(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. (FliesFrom(x, y) & FliesTo(x, y) -> False)\nTEXT:\tJohn flies from LGA airport.\nFOL:\tFliesFrom(John, LGA)\nTEXT:\tJohn flies to LGA airport.\nFOL:\tFliesTo(John, LGA)\nANSWER:\tFalse\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tFliesTo(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. (FliesFrom(x, y) & FliesTo(x, y) -> False)\nTEXT:\tJohn flies from LGA airport.\nFOL:\tFliesFrom(John, LGA)\nTEXT:\tJohn flies to LGA airport.\nFOL:\tFliesTo(John, LGA)\nANSWER:\tFalse\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tFliesTo(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. (FliesFrom(x, y) -> -FliesTo(x, y))\nTEXT:\tJohn flies from LGA airport.\nFOL:\tFliesFrom(John, LGA)\nTEXT:\tJohn flies to LGA airport.\nFOL:\tFliesTo(John, LGA)\nANSWER:\tFalse\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tFliesTo(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. (FliesFrom(x, y) -> -FliesTo(x, y))\nTEXT:\tJohn flies from LGA airport.\nFOL:\tFliesFrom(John, LGA)\nTEXT:\tJohn flies to LGA airport.\nFOL:\tFliesTo(John, LGA)\nANSWER:\tFalse\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tFliesTo(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. ((DepartsFrom(x, y) & ArrivesAt(x, y)) -> False)\nTEXT:\tJohn flies from LGA airport.\nFOL:\tDepartsFrom(John, LGA)\nTEXT:\tJohn flies to LGA airport.\nFOL:\tFliesTo(John, LGA)\nANSWER:\tFalse\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tFliesTo(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. (FliesFrom(x, y) & FliesTo(x, y) -> False)\nTEXT:\tJohn flies from LGA airport.\nFOL:\tFliesFrom(John, LGA)\nTEXT:\tJohn flies to LGA airport.\nFOL:\tFliesTo(John, LGA)\nANSWER:\tFalse\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tFliesTo(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. (FliesFrom(x, y) -> -FliesTo(x, y))\nTEXT:\tJohn flies from LGA airport.\nFOL:\tFliesFrom(John, LGA)\nTEXT:\tJohn flies to LGA airport.\nFOL:\tFliesTo(John, LGA)\nANSWER:\tFalse\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tArrival(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. (Departure(x, y) -> -Arrival(x, y))\nTEXT:\tJohn flies from LGA airport.\nFOL:\tDeparture(John, LGA)\nTEXT:\tJohn flies to LGA airport.\nFOL:\tArrival(John, LGA)\nANSWER:\tFalse\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tArrival(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. (Departure(x, y) -> -Arrival(x, y))\nTEXT:\tJohn flies from LGA airport.\nFOL:\tDeparture(John, LGA)\nTEXT:\tJohn flies to LGA airport.\nFOL:\tArrival(John, LGA)\nANSWER:\tFalse\n"], ["TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tall x. (RomanceLanguage(x) -> LanguageFamily(x))\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (LanguageFamily(x) & LanguageFamily(y) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tFrench is an Indo-European language.\nFOL:\tIndoEuropeanLanguage(French)\nANSWER:\tTrue\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tall x. (RomanceLanguage(x) -> LanguageFamily(x))\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (LanguageFamily(x) & LanguageFamily(y) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tFrench is an Indo-European language.\nFOL:\tIndoEuropeanLanguage(French)\nANSWER:\tTrue\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropean(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tLanguageFamily(RomanceLanguages)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (InLanguageFamily(x, y) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tFrench is an Indo-European language.\nFOL:\tIndoEuropean(French)\nANSWER:\tTrue\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropean(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\texists x. LanguageFamily(x) & all y. (RomanceLanguage(y) -> InLanguageFamily(y, x))\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. all z. (InLanguageFamily(x, z) & InLanguageFamily(y, z) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x) & -Related(x, Basque))\nTEXT:\tFrench is an Indo-European language.\nFOL:\tIndoEuropean(French)\nANSWER:\tTrue\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tLanguageFamily(RomanceLanguages)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (InLanguageFamily(x, y) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tFrench is an Indo-European language.\nFOL:\tIndoEuropeanLanguage(French)\nANSWER:\tTrue\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropean(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tLanguageFamily(RomanceLanguages)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (LanguageFamily(x) & In(y, x) -> Related(y, x))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tFrench is an Indo-European language.\nFOL:\tIndoEuropean(French)\nANSWER:\tTrue\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropean(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tLanguageFamily(RomanceLanguages)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. all z. ((LanguageFamily(x) & InLanguageFamily(y, x) & InLanguageFamily(z, x)) -> Related(y, z))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tFrench is an Indo-European language.\nFOL:\tIndoEuropean(French)\nANSWER:\tTrue\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tall x. (RomanceLanguage(x) -> LanguageFamily(x))\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (LanguageFamily(x) & LanguageFamily(y) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tFrench is an Indo-European language.\nFOL:\tIndoEuropeanLanguage(French)\nANSWER:\tTrue\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropean(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tLanguageFamily(RomanceLanguages)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (LanguageFamily(x) & LanguageInFamily(y, x) -> Related(y, x))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tFrench is an Indo-European language.\nFOL:\tIndoEuropean(French)\nANSWER:\tTrue\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\texists x. (LanguageFamily(x) & ForAll y. (RomanceLanguage(y) -> In(y, x)))\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. all z. (In(x, z) & In(y, z) & LanguageFamily(z) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tFrench is an Indo-European language.\nFOL:\tIndoEuropeanLanguage(French)\nANSWER:\tTrue\n"], ["TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAilton = AiltonSilva & Born(AiltonSilva, 1995)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva does not play for a football club.\nFOL:\t-Exists x. (FootballClub(x) & PlaysFor(AiltonSilva, x))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAiltonSilva(Ailton) & BornIn(Ailton, 1995)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tBrazilian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva does not play for a football club.\nFOL:\t-Exists x. (FootballClub(x) & PlaysFor(AiltonSilva, x))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tall x. (BornIn(x, 1995) & KnownAs(x, Ailton) -> Silva(x))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tall x. (KnownAs(x, Ailton) -> FootballPlayer(x) & LoanedTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tall x. (Silva(x) -> Brazilian(x) & Footballer(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva foes not play for a football club.\nFOL:\t-PlaysFor(AiltonSilva, FootballClub)\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tBorn(AiltonSilva, 1995) & CommonlyKnownAs(AiltonSilva, Ailton)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tBrazilianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva foes not play for a football club.\nFOL:\t-Exists x. (FootballClub(x) & PlaysFor(AiltonSilva, x))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAiltonSilva = Ailton\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tBrazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva does not play for a football club.\nFOL:\t-Exists x. (FootballClub(x) & PlaysFor(AiltonSilva, x))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tExists(x. Born(x, 1995) & KnownAs(x, Ailton) & Is(x, AiltonSilva))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tExists(x. Is(x, Ailton) & FootballPlayer(x) & LoanedOutTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tExists(x. Is(x, AiltonSilva) & Brazillian(x) & Footballer(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tExists(x. Is(x, Nautico) & FootballClub(x)) & Exists(y. Is(y, Braga) & FootballClub(y))\nTEXT:\tFluminense is a football club.\nFOL:\tExists(x. Is(x, Fluminense) & FootballClub(x))\nTEXT:\tAilton Silva foes not play for a football club.\nFOL:\t-Exists(x. Is(x, AiltonSilva) & PlaysFor(x, y) & FootballClub(y))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (Ailton(x) & BornIn(x, 1995))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\texists x. (Ailton(x) & FootballPlayer(x) & LoanedOutTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\texists x. (Ailton(x) & Brazillian(x) & Footballer(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva foes not play for a football club.\nFOL:\tall x. (Ailton(x) -> -Exists y. (FootballClub(y) & PlaysFor(x, y)))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAiltonSilva(Ailton) & BornIn(Ailton,1995)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva foes not play for a football club.\nFOL:\tall x. (FootballClub(x) -> -PlaysFor(AiltonSilva, x))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAilton = AiltonSilva & Born(AiltonSilva, 1995)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tBrazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva foes not play for a football club.\nFOL:\t-Exists x. (FootballClub(x) & PlaysFor(AiltonSilva, x))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (Born(x, 1995) & KnownAs(x, Ailton))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tall x. (KnownAs(x, Ailton) -> FootballPlayer(x) & LoanedTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tall x. (KnownAs(x, Ailton) -> BrazillianFootballer(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva foes not play for a football club.\nFOL:\tall x. (KnownAs(x, Ailton) -> -PlaysFor(x, FootballClub))\nANSWER:\tFalse\n"], ["TEXT:\tA man is either kind or evil.\nFOL:\tall x. ((Man(x) & Kind(x)) | (Man(x) & Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is kind or a CEO.\nFOL:\t(Kind(Harry) | CEO(Harry))\nANSWER:\tUncertain\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is kind or a CEO.\nFOL:\t(Kind(Harry) | CEO(Harry))\nANSWER:\tTrue\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> Kind(x) | Evil(x))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is kind or a CEO.\nFOL:\tKind(Harry) | CEO(Harry)\nANSWER:\tTrue\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is kind or a CEO.\nFOL:\tKind(Harry) | CEO(Harry)\nANSWER:\tUncertain\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is kind or a CEO.\nFOL:\tKind(Harry) | CEO(Harry)\nANSWER:\tUncertain\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is kind or a CEO.\nFOL:\t(Kind(Harry) | CEO(Harry))\nANSWER:\tTrue\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> Kind(x) | Evil(x))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is kind or a CEO.\nFOL:\tKind(Harry) | CEO(Harry)\nANSWER:\tUncertain\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is kind or a CEO.\nFOL:\t(Kind(Harry) | CEO(Harry))\nANSWER:\tTrue\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is kind or a CEO.\nFOL:\tKind(Harry) | CEO(Harry)\nANSWER:\tTrue\n", "TEXT:\tA man is either kind or evil.\nFOL:\tall x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (Ugly(x) -> -Handsome(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is kind or a CEO.\nFOL:\tKind(Harry) | CEO(Harry)\nANSWER:\tUncertain\n"], ["TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelp(x) -> -NegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelp(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-TakeOutService(x) & NegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\tRatingGreaterThan9(Subway) | PopularAmongResidents(Subway)\nTEXT:\tIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL:\t(TakeOutService(Subway) & NegativeReviews(Subway)) -> (RatingGreaterThan9(Subway) & -TakeOutService(Subway))\nANSWER:\tFalse\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelpRecommendations(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t((RatingGreaterThan9(Subway) & -PopularAmongLocalResidents(Subway)) | (-RatingGreaterThan9(Subway) & PopularAmongLocalResidents(Subway)))\nTEXT:\tIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL:\t(ProvideTakeOutService(Subway) & ManyNegativeReviews(Subway)) -> (RatingGreaterThan9(Subway) & -ProvideTakeOutService(Subway))\nANSWER:\tFalse\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (RecommendedByYelp(x) -> -ManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> RecommendedByYelp(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t((RatingGreaterThan9(Subway) & -PopularAmongLocalResidents(Subway)) | (-RatingGreaterThan9(Subway) & PopularAmongLocalResidents(Subway)))\nTEXT:\tIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL:\t(TakeOutService(Subway) & ManyNegativeReviews(Subway)) -> (RatingGreaterThan9(Subway) & -TakeOutService(Subway))\nANSWER:\tFalse\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThanNine(x) -> ListedInYelpRecommendations(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (NoTakeOutService(x) & ManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThanNine(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t((RatingGreaterThanNine(Subway) & -PopularAmongLocalResidents(Subway)) | (-RatingGreaterThanNine(Subway) & PopularAmongLocalResidents(Subway)))\nTEXT:\tIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL:\t(ProvidesTakeOutService(Subway) & ManyNegativeReviews(Subway) -> (RatingGreaterThanNine(Subway) & -ProvidesTakeOutService(Subway)))\nANSWER:\tFalse\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (RecommendedInYelp(x) -> -ManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> RecommendedInYelp(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\tRatingGreaterThan9(Subway) | PopularAmongLocalResidents(Subway)\nTEXT:\tIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL:\t(TakeOutService(Subway) & ManyNegativeReviews(Subway)) -> (RatingGreaterThan9(Subway) & -TakeOutService(Subway))\nANSWER:\tFalse", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelp(x) -> -NegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelp(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-TakeOutService(x) & NegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocals(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t(RatingGreaterThan9(Subway) | PopularAmongLocals(Subway))\nTEXT:\tIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL:\t(TakeOutService(Subway) & NegativeReviews(Subway) -> (RatingGreaterThan9(Subway) & -TakeOutService(Subway)))\nANSWER:\tFalse\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelpRecommendations(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t(RatingGreaterThan9(Subway) | PopularAmongResidents(Subway))\nTEXT:\tIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL:\t(TakeOutService(Subway) & ManyNegativeReviews(Subway)) -> (RatingGreaterThan9(Subway) & -TakeOutService(Subway))\nANSWER:\tFalse\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelpRecommendations(x) -> -NegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelpRecommendations(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-TakeOutService(x) & NegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t(RatingGreaterThan9(Subway) | PopularAmongLocalResidents(Subway))\nTEXT:\tIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL:\t(TakeOutService(Subway) & NegativeReviews(Subway)) -> (RatingGreaterThan9(Subway) & -TakeOutService(Subway))\nANSWER:\tFalse\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelp(x) -> -NegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelp(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-TakeOutService(x) & NegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t(RatingGreaterThan9(Subway) | PopularAmongLocalResidents(Subway))\nTEXT:\tIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL:\t(TakeOutService(Subway) & NegativeReviews(Subway)) -> (RatingGreaterThan9(Subway) & -TakeOutService(Subway))\nANSWER:\tFalse\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (RecommendedInYelp(x) -> -ManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> RecommendedInYelp(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\tRatingGreaterThan9(Subway) | PopularAmongLocalResidents(Subway)\nTEXT:\tIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL:\t(TakeOutService(Subway) & ManyNegativeReviews(Subway)) -> (RatingGreaterThan9(Subway) & -TakeOutService(Subway))\nANSWER:\tFalse\n"], ["TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tLanguageFamily(RomanceLanguages)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (InSameLanguageFamily(x, y) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tBasque is a Romance language.\nFOL:\tRomanceLanguage(Basque)\nANSWER:\tFalse\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tLanguageFamily(RomanceLanguages)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (LanguageFamily(x) & Member(y, x) -> Related(y, x))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tBasque is a Romance language.\nFOL:\tRomanceLanguage(Basque)\nANSWER:\tFalse\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\texists x. (LanguageFamily(x) & Forall y. (RomanceLanguage(y) -> In(y, x)))\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. all z. (LanguageFamily(x) & In(y, x) & In(z, x) -> Related(y, z))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tBasque is a Romance language.\nFOL:\tRomanceLanguage(Basque)\nANSWER:\tFalse\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tLanguageFamily(RomanceLanguages)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. ((LanguageFamily(x) & Member(y, x)) -> Related(y, x))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tBasque is a Romance language.\nFOL:\tRomanceLanguage(Basque)\nANSWER:\tFalse\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tLanguageFamily(RomanceLanguages)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (InLanguageFamily(x, y) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tBasque is a Romance language.\nFOL:\tRomanceLanguage(Basque)\nANSWER:\tFalse\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tLanguageFamily(RomanceLanguages)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (InLanguageFamily(x, y) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tBasque is a Romance language.\nFOL:\tRomanceLanguage(Basque)\nANSWER:\tFalse\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tall x. (RomanceLanguage(x) -> LanguageFamily(x))\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (LanguageFamily(x) & LanguageFamily(y) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tBasque is a Romance language.\nFOL:\tRomanceLanguage(Basque)\nANSWER:\tFalse\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tall x. (RomanceLanguage(x) -> InLanguageFamily(x))\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (InLanguageFamily(x) & InLanguageFamily(y) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tBasque is a Romance language.\nFOL:\tRomanceLanguage(Basque)\nANSWER:\tFalse\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropean(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tall x. (RomanceLanguage(x) -> LanguageFamily(x))\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (LanguageFamily(x) & LanguageFamily(y) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tBasque is a Romance language.\nFOL:\tRomanceLanguage(Basque)\nANSWER:\tFalse\n", "TEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropean(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tall x. (RomanceLanguage(x) -> LanguageFamily(x))\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. all y. (LanguageFamily(x) & LanguageFamily(y) -> Related(x, y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tRomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelated(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\tall x. (-Related(Basque, x))\nTEXT:\tBasque is a Romance language.\nFOL:\tRomanceLanguage(Basque)\nANSWER:\tFalse\n"], ["TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL:\t(-(Turtle(Rock) & Squirrel(Rock)) -> (Cute(Rock) | Skittish(Rock)))\nANSWER:\tTrue\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. ((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL:\t(-Turtle(Rock) & -Squirrel(Rock)) -> (Cute(Rock) | Skittish(Rock))\nANSWER:\tTrue\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL:\t(-Turtle(Rock) & -Squirrel(Rock)) -> (Cute(Rock) | Skittish(Rock))\nANSWER:\tTrue\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL:\t(-(Turtle(Rock) & Squirrel(Rock)) -> (Cute(Rock) | Skittish(Rock)))\nANSWER:\tTrue\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. ((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL:\t(-Turtle(Rock) | -Squirrel(Rock)) -> (Cute(Rock) | Skittish(Rock))\nANSWER:\tTrue\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. Turtle(x)\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. Animal(x) -> (Rabbit(x) | Squirrel(x))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL:\t(-Turtle(Rock) & -Squirrel(Rock)) -> (Cute(Rock) | Skittish(Rock))\nANSWER:\tTrue\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL:\t-(Turtle(Rock) & Squirrel(Rock)) -> (Cute(Rock) | Skittish(Rock))\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. Turtle(x)\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL:\t(-Turtle(Rock) | -Squirrel(Rock)) -> (Cute(Rock) | Skittish(Rock))\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL:\t-(Turtle(Rock) & Squirrel(Rock)) -> (Cute(Rock) | Skittish(Rock))\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL:\t(-Turtle(Rock) | -Squirrel(Rock)) -> (Cute(Rock) | Skittish(Rock))\nANSWER:\tTrue\n"], ["TEXT:\tPlungers suck.\nFOL:\tSuck(Plunger)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuum)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampire)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tHouseholdAppliance(Duster) & -Suck(Duster)\nTEXT:\tSpace sucks.\nFOL:\tSuck(Space)\nANSWER:\tTrue\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plunger)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuum)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampire)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\t-ApplianceSucks(Duster)\nTEXT:\tSpace sucks.\nFOL:\tSuck(Space)\nANSWER:\tTrue\n", "TEXT:\tPlungers suck.\nFOL:\tSucks(Plungers)\nTEXT:\tVacuums suck.\nFOL:\tSucks(Vacuums)\nTEXT:\tVampires suck.\nFOL:\tSucks(Vampires)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\t- Sucks(Duster)\nTEXT:\tSpace sucks.\nFOL:\tSucks(Space)\nANSWER:\tTrue\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plungers)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuums)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampires)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\t- Suck(Duster)\nTEXT:\tSpace sucks.\nFOL:\tSuck(Space)\nANSWER:\tTrue\n", "TEXT:\tPlungers suck.\nFOL:\tSucks(Plungers)\nTEXT:\tVacuums suck.\nFOL:\tSucks(Vacuums)\nTEXT:\tVampires suck.\nFOL:\tSucks(Vampires)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\t-ApplianceSucks(Duster)\nTEXT:\tSpace sucks.\nFOL:\tSucks(Space)\nANSWER:\tTrue\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plungers)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuums)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampires)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuums(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tAppliance(Duster) & -Suck(Duster)\nTEXT:\tSpace sucks.\nFOL:\tSuck(Space)\nANSWER:\tTrue\n", "TEXT:\tPlungers suck.\nFOL:\tSucks(Plungers)\nTEXT:\tVacuums suck.\nFOL:\tSucks(Vacuums)\nTEXT:\tVampires suck.\nFOL:\tSucks(Vampires)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuums(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tall x. (Duster(x) -> -Sucks(x))\nTEXT:\tSpace sucks.\nFOL:\tSucks(Space)\nANSWER:\tTrue\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plunger)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuum)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampire)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tAppliance(Duster) & -Suck(Duster)\nTEXT:\tSpace sucks.\nFOL:\tSuck(Space)\nANSWER:\tTrue\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plungers)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuums)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampires)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuums(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\t- Suck(Duster)\nTEXT:\tSpace sucks.\nFOL:\tSuck(Space)\nANSWER:\tTrue\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plungers)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuums)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampires)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\t-HouseholdAppliance(Duster) & -Suck(Duster)\nTEXT:\tSpace sucks.\nFOL:\tSuck(Space)\nANSWER:\tTrue\n"], ["TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic lives in a tax haven.\nFOL:\tLiveInTaxHaven(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic lives in a tax haven.\nFOL:\tLiveInTaxHaven(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic) -> WellPaid(Djokovic))\nTEXT:\tDjokovic lives in a tax haven.\nFOL:\tLiveInTaxHaven(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic lives in a tax haven.\nFOL:\tLiveInTaxHaven(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic) -> WellPaid(Djokovic))\nTEXT:\tDjokovic lives in a tax haven.\nFOL:\tLiveInTaxHaven(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic lives in a tax haven.\nFOL:\tLiveInTaxHaven(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic lives in a tax haven.\nFOL:\tLiveInTaxHaven(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tforall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tforall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tforall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tforall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tforall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tforall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tforall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic lives in a tax haven.\nFOL:\tLiveInTaxHaven(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic lives in a tax haven.\nFOL:\tLiveInTaxHaven(Djokovic)\nANSWER:\tUncertain\n", "TEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\tall x. ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\tall x. (Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\tall x. (Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\nTEXT:\tDjokovic lives in a tax haven.\nFOL:\tLiveInTaxHaven(Djokovic)\nANSWER:\tUncertain\n"], ["TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProfessionalWrestlingStable(DiamondMine)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads a professional wrestling stable.\nFOL:\texists x. (ProfessionalWrestlingStable(x) & Leads(RoderickStrong, x))\nANSWER:\tTrue\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\texists x. (Stable(x) & WWE(x) & DiamondMine(x))\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads a professional wrestling stable.\nFOL:\texists x. (Stable(x) & Leads(RoderickStrong, x))\nANSWER:\tTrue\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProfessionalWrestlingStable(DiamondMine) & FormedIn(DiamondMine, WWE)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads a professional wrestling stable.\nFOL:\texists x. (ProfessionalWrestlingStable(x) & Leads(RoderickStrong, x))\nANSWER:\tTrue\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProfessionalWrestlingStable(DiamondMine) & FormedIn(DiamondMine, WWE)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludedIn(CreedBrothers, DiamondMine) & IncludedIn(IvyNile, DiamondMine)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads a professional wrestling stable.\nFOL:\texists x. (ProfessionalWrestlingStable(x) & Leads(RoderickStrong, x))\nANSWER:\tTrue\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProfessionalWrestlingStable(DiamondMine) & FormedIn(DiamondMine, WWE)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads a professional wrestling stable.\nFOL:\texists x. (Leads(RoderickStrong, x) & ProfessionalWrestlingStable(x))\nANSWER:\tTrue\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tall x. (DiamondMine(x) -> ProfessionalWrestlingStable(x))\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads a professional wrestling stable.\nFOL:\texists x. (ProfessionalWrestlingStable(x) & Leads(RoderickStrong, x))\nANSWER:\tTrue\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProfessionalWrestlingStable(DiamondMine)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIn(DiamondMine, CreedBrothers) & In(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads a professional wrestling stable.\nFOL:\texists x. (ProfessionalWrestlingStable(x) & Leads(RoderickStrong, x))\nANSWER:\tTrue\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProfessionalWrestlingStable(DiamondMine)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads a professional wrestling stable.\nFOL:\texists x. (ProfessionalWrestlingStable(x) & Leads(RoderickStrong, x))\nANSWER:\tTrue\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProfessionalWrestlingStable(DiamondMine) & FormedIn(DiamondMine, WWE)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads a professional wrestling stable.\nFOL:\texists x. (ProfessionalWrestlingStable(x) & Leads(RoderickStrong, x))\nANSWER:\tTrue\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\texists x. (WrestlingStable(x) & FormedInWWE(x) & DiamondMine(x))\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads a professional wrestling stable.\nFOL:\texists x. (WrestlingStable(x) & Leads(RoderickStrong, x))\nANSWER:\tTrue\n"], ["TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelp(x) -> -NegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelp(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (Restaurant(x) & -TakeOutService(x) & NegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t(RatingGreaterThan9(Subway) | PopularAmongLocalResidents(Subway))\nTEXT:\tSubway provides take-out service and does not receive many negative reviews.\nFOL:\tTakeOutService(Subway) & -NegativeReviews(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelp(x) -> -NegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelp(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-TakeOutService(x) & NegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\tRatingGreaterThan9(Subway) | PopularAmongResidents(Subway)\nTEXT:\tSubway provides take-out service and does not receive many negative reviews.\nFOL:\tTakeOutService(Subway) & -NegativeReviews(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelpRecommendations(x) -> -NegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelpRecommendations(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-TakeOutService(x) & NegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t(RatingGreaterThan9(Subway) | PopularAmongLocalResidents(Subway))\nTEXT:\tSubway provides take-out service and does not receive many negative reviews.\nFOL:\tTakeOutService(Subway) & -NegativeReviews(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelp(x) -> -ManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelp(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\tRatingGreaterThan9(Subway) | PopularAmongLocalResidents(Subway)\nTEXT:\tSubway provides take-out service and does not receive many negative reviews.\nFOL:\tProvideTakeOutService(Subway) & -ManyNegativeReviews(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (RecommendedOnYelp(x) -> -NegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> RecommendedOnYelp(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (NoTakeOutService(x) & NegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocals(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t(RatingGreaterThan9(Subway) | PopularAmongLocals(Subway))\nTEXT:\tSubway provides take-out service and does not receive many negative reviews.\nFOL:\tProvideTakeOutService(Subway) & -NegativeReviews(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelpRecommendations(x) -> NotManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThanNine(x) -> ListedInYelpRecommendations(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (NotProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThanNine(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t(RatingGreaterThanNine(Subway) | PopularAmongLocalResidents(Subway))\nTEXT:\tSubway provides take-out service and does not receive many negative reviews.\nFOL:\tProvideTakeOutService(Subway) & NotManyNegativeReviews(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelpRecommendations(x) -> NotReceiveManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelpRecommendations(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (NotProvideTakeOutService(x) & ReceiveManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t((RatingGreaterThan9(Subway) & -PopularAmongLocalResidents(Subway)) | (-RatingGreaterThan9(Subway) & PopularAmongLocalResidents(Subway)))\nTEXT:\tSubway provides take-out service and does not receive many negative reviews.\nFOL:\tProvideTakeOutService(Subway) & NotReceiveManyNegativeReviews(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelpRecommendations(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t((RatingGreaterThan9(Subway) & -PopularAmongLocalResidents(Subway)) | (-RatingGreaterThan9(Subway) & PopularAmongLocalResidents(Subway)))\nTEXT:\tSubway provides take-out service and does not receive many negative reviews.\nFOL:\tTakeOutService(Subway) & -ManyNegativeReviews(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelp(x) -> -NegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelp(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-TakeOutService(x) & NegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t((RatingGreaterThan9(Subway) & -PopularAmongLocalResidents(Subway)) | (-RatingGreaterThan9(Subway) & PopularAmongLocalResidents(Subway)))\nTEXT:\tSubway provides take-out service and does not receive many negative reviews.\nFOL:\tTakeOutService(Subway) & -NegativeReviews(Subway)\nANSWER:\tUncertain\n", "TEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tall x. (ListedInYelpRecommendations(x) -> -ReceiveManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (RatingGreaterThan9(x) -> ListedInYelpRecommendations(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\texists x. (-ProvideTakeOutService(x) & ReceiveManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\tRatingGreaterThan9(Subway) | PopularAmongLocalResidents(Subway)\nTEXT:\tSubway provides take-out service and does not receive many negative reviews.\nFOL:\tProvideTakeOutService(Subway) & -ReceiveManyNegativeReviews(Subway)\nANSWER:\tUncertain\n"], ["TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlaysFor(x, y))\nTEXT:\tRobert Lewandowski plays for Bayern Munchen.\nFOL:\tPlaysFor(RobertLewandowski, BayernMunchen)\nANSWER:\tFalse\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski plays for Bayern Munchen.\nFOL:\tPlayFor(RobertLewandowski, BayernMunchen)\nANSWER:\tFalse\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski plays for Bayern Munchen.\nFOL:\tPlayFor(RobertLewandowski, BayernMunchen)\nANSWER:\tFalse\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlaysFor(x, y))\nTEXT:\tRobert Lewandowski plays for Bayern Munchen.\nFOL:\tPlaysFor(RobertLewandowski, BayernMunchen)\nANSWER:\tFalse\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski plays for Bayern Munchen.\nFOL:\tPlayFor(RobertLewandowski, BayernMunchen)\nANSWER:\tFalse\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski plays for Bayern Munchen.\nFOL:\tPlayFor(RobertLewandowski, BayernMunchen)\nANSWER:\tFalse\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeftTeam(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski plays for Bayern Munchen.\nFOL:\tPlayFor(RobertLewandowski, BayernMunchen)\nANSWER:\tFalse\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski plays for Bayern Munchen.\nFOL:\tPlayFor(RobertLewandowski, BayernMunchen)\nANSWER:\tFalse\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski plays for Bayern Munchen.\nFOL:\tPlayFor(RobertLewandowski, BayernMunchen)\nANSWER:\tFalse\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski plays for Bayern Munchen.\nFOL:\tPlayFor(RobertLewandowski, BayernMunchen)\nANSWER:\tFalse\n"], ["TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL:\t(-American(Yuri) & BasketballPlayer(Yuri)) -> BasketballPlayer(Yuri)\nANSWER:\tTrue\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL:\t(-American(Yuri) & BasketballPlayer(Yuri)) -> BasketballPlayer(Yuri)\nANSWER:\tTrue\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> WearLargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (WearLargeShoes(x) -> WearLargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-WearLargeClothes(Yuri)\nTEXT:\tIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL:\t(-American(Yuri) & BasketballPlayer(Yuri)) -> BasketballPlayer(Yuri)\nANSWER:\tTrue\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL:\t(-American(Yuri) & BasketballPlayer(Yuri)) -> BasketballPlayer(Yuri)\nANSWER:\tTrue\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL:\t(-American(Yuri) & BasketballPlayer(Yuri)) -> BasketballPlayer(Yuri)\nANSWER:\tTrue\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL:\t(-American(Yuri) & BasketballPlayer(Yuri)) -> BasketballPlayer(Yuri)\nANSWER:\tTrue\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> WearLargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-WearLargeSizeClothes(Yuri)\nTEXT:\tIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL:\t(-American(Yuri) & BasketballPlayer(Yuri)) -> BasketballPlayer(Yuri)\nANSWER:\tTrue\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL:\t(-American(Yuri) & BasketballPlayer(Yuri)) -> BasketballPlayer(Yuri)\nANSWER:\tTrue\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeSizeClothes(Yuri)\nTEXT:\tIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL:\t(-BasketballPlayer(Yuri) & -American(Yuri)) -> BasketballPlayer(Yuri)\nANSWER:\tFalse\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL:\t(-American(Yuri) & BasketballPlayer(Yuri)) -> BasketballPlayer(Yuri)\nANSWER:\tTrue\n"], ["TEXT:\tPlungers suck.\nFOL:\tSucks(Plungers)\nTEXT:\tVacuums suck.\nFOL:\tSucks(Vacuums)\nTEXT:\tVampires suck.\nFOL:\tSucks(Vampires)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tHouseholdAppliance(Duster) & -Sucks(Duster)\nTEXT:\tIf something is a household appliance, it sucks.\nFOL:\tall x. (HouseholdAppliance(x) -> Sucks(x))\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plunger)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuum)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampire)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tHouseholdAppliance(Duster) & -Suck(Duster)\nTEXT:\tIf something is a household appliance, it sucks.\nFOL:\tall x. (HouseholdAppliance(x) -> Suck(x))\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plunger)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuum)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampire)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tHouseholdAppliance(Duster) & -Suck(Duster)\nTEXT:\tIf something is a household appliance, it sucks.\nFOL:\tall x. (HouseholdAppliance(x) -> Suck(x))\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plunger)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuum)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampire)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tHouseholdAppliance(Duster) & -Suck(Duster)\nTEXT:\tIf something is a household appliance, it sucks.\nFOL:\tall x. (HouseholdAppliance(x) -> Suck(x))\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plunger)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuum)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampire)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tHouseholdAppliance(Duster) & -Suck(Duster)\nTEXT:\tIf something is a household appliance, it sucks.\nFOL:\tall x. (HouseholdAppliance(x) -> Suck(x))\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plunger)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuum)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampire)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tHouseholdAppliance(Duster) & -Suck(Duster)\nTEXT:\tIf something is a household appliance, it sucks.\nFOL:\tall x. (HouseholdAppliance(x) -> Suck(x))\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plungers)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuums)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampires)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tHouseholdAppliance(Duster) & -Suck(Duster)\nTEXT:\tIf something is a household appliance, it sucks.\nFOL:\tall x. (HouseholdAppliance(x) -> Suck(x))\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plunger)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuum)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampire)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tHouseholdAppliance(Duster) & -Suck(Duster)\nTEXT:\tIf something is a household appliance, it sucks.\nFOL:\tall x. (HouseholdAppliance(x) -> Suck(x))\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plungers)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuums)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampires)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tHouseholdAppliance(Duster) & -Suck(Duster)\nTEXT:\tIf something is a household appliance, it sucks.\nFOL:\tall x. (HouseholdAppliance(x) -> Suck(x))\nANSWER:\tFalse\n", "TEXT:\tPlungers suck.\nFOL:\tSuck(Plungers)\nTEXT:\tVacuums suck.\nFOL:\tSuck(Vacuums)\nTEXT:\tVampires suck.\nFOL:\tSuck(Vampires)\nTEXT:\tSpace is a vacuum.\nFOL:\tVacuum(Space)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tHouseholdAppliance(Duster) & -Suck(Duster)\nTEXT:\tIf something is a household appliance, it sucks.\nFOL:\tall x. (HouseholdAppliance(x) -> Suck(x))\nANSWER:\tFalse\n"], ["TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopularNetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (PopularNetflixShow(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. ((NetflixShow(x) & BingeWatch(Karen, x)) <-> Download(Karen, x))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. ((NetflixShow(x) & BingeWatch(Karen, x)) -> ShareToLisa(Karen, x))\nTEXT:\tKaren will share \"Black Mirror\" to Lisa.\nFOL:\tShareToLisa(Karen, BlackMirror)\nANSWER:\tFalse\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopular(Netflix, StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (Popular(Netflix, x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (BingeWatch(Karen, x) <-> Download(Karen, x))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflix(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (BingeWatch(Karen, x) -> Share(Karen, Lisa, x))\nTEXT:\tKaren will share \"Black Mirror\" to Lisa.\nFOL:\tShare(Karen, Lisa, BlackMirror)\nANSWER:\tFalse\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopularNetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (PopularNetflixShow(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) <-> Download(Karen, x))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) -> ShareTo(Karen, Lisa, x))\nTEXT:\tKaren will share \"Black Mirror\" to Lisa.\nFOL:\tShareTo(Karen, Lisa, BlackMirror)\nANSWER:\tFalse\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopularNetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (PopularNetflixShow(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (NetflixShow(x) -> (BingeWatch(Karen, x) <-> Download(Karen, x)))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (BingeWatch(Karen, x) -> ShareTo(Karen, Lisa, x))\nTEXT:\tKaren will share \"Black Mirror\" to Lisa.\nFOL:\tShareTo(Karen, Lisa, BlackMirror)\nANSWER:\tFalse\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopular(NetflixShow(StrangerThings))\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (Popular(NetflixShow(x)) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (BingeWatch(Karen, x) <-> Download(Karen, x))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, NetflixShow(BlackMirror))\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (BingeWatch(Karen, x) -> ShareTo(Karen, Lisa, x))\nTEXT:\tKaren will share \"Black Mirror\" to Lisa.\nFOL:\tShareTo(Karen, Lisa, NetflixShow(BlackMirror))\nANSWER:\tFalse\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopularNetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (PopularNetflixShow(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (NetflixShow(x) -> (BingeWatch(Karen, x) <-> Download(Karen, x)))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) -> Share(Karen, Lisa, x))\nTEXT:\tKaren will share \"Black Mirror\" to Lisa.\nFOL:\tShare(Karen, Lisa, BlackMirror)\nANSWER:\tFalse\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopularNetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (PopularNetflixShow(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (NetflixShow(x) -> (BingeWatch(Karen, x) <-> Download(Karen, x)))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) -> ShareTo(Karen, Lisa, x))\nTEXT:\tKaren will share \"Black Mirror\" to Lisa.\nFOL:\tShareTo(Karen, Lisa, BlackMirror)\nANSWER:\tFalse\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopular(NetflixShow(\"Stranger Things\"))\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (Popular(NetflixShow(x)) -> BingeWatch(Karen, NetflixShow(x)))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (BingeWatch(Karen, NetflixShow(x)) <-> Download(Karen, NetflixShow(x)))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, NetflixShow(\"Black Mirror\"))\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(\"Black Mirror\")\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (BingeWatch(Karen, NetflixShow(x)) -> Share(Karen, Lisa, NetflixShow(x)))\nTEXT:\tKaren will share \"Black Mirror\" to Lisa.\nFOL:\tShare(Karen, Lisa, NetflixShow(\"Black Mirror\"))\nANSWER:\tFalse\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopularNetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (PopularNetflixShow(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (NetflixShow(x) -> (BingeWatch(Karen, x) <-> Download(Karen, x)))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (BingeWatch(Karen, x) -> ShareTo(Karen, Lisa, x))\nTEXT:\tKaren will share \"Black Mirror\" to Lisa.\nFOL:\tShareTo(Karen, Lisa, BlackMirror)\nANSWER:\tFalse\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopularNetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (PopularNetflixShow(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (NetflixShow(x) -> (BingeWatch(Karen, x) <-> Download(Karen, x)))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) -> Share(Karen, Lisa, x))\nTEXT:\tKaren will share \"Black Mirror\" to Lisa.\nFOL:\tShare(Karen, Lisa, BlackMirror)\nANSWER:\tFalse\n"], ["TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -FromComputerScienceDept(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobUni(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (TakeDatabaseCourse(x) -> FromComputerScienceDept(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobUni(Jack) & -WorkInLab(Jack)\nTEXT:\tJames has a part-time job offered by the university.\nFOL:\tPartTimeJobUni(James)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobByUniversity(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobByUniversity(Jack) & -WorkInLab(Jack)\nTEXT:\tJames has a part-time job offered by the university.\nFOL:\tPartTimeJobByUniversity(James)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (Student(x) & WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (Student(x) & HavePartTimeJob(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (Student(x) & TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (Student(x) & InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (Student(x) & WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tStudent(James) & WorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJob(Jack) & -WorkInLab(Jack)\nTEXT:\tJames has a part-time job offered by the university.\nFOL:\tHavePartTimeJob(James)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (Student(x) & WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (Student(x) & HavePartTimeJob(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (Student(x) & TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (Student(x) & InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (Student(x) & WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tStudent(James) & WorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJob(Jack) & -WorkInLab(Jack)\nTEXT:\tJames has a part-time job offered by the university.\nFOL:\tPartTimeJob(James)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -ComputerScienceDept(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobUniversity(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (TakeDatabaseCourse(x) -> ComputerScienceDept(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobUniversity(Jack) & -WorkInLab(Jack)\nTEXT:\tJames has a part-time job offered by the university.\nFOL:\tPartTimeJobUniversity(James)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJob(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJob(Jack) & -WorkInLab(Jack)\nTEXT:\tJames has a part-time job offered by the university.\nFOL:\tPartTimeJob(James)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -FromCSDept(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJob(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (TakeDatabaseCourse(x) -> FromCSDept(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJob(Jack) & -WorkInLab(Jack)\nTEXT:\tJames has a part-time job offered by the university.\nFOL:\tPartTimeJob(James)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (Student(x) & WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (Student(x) & PartTimeJob(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (Student(x) & DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (Student(x) & InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (Student(x) & WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tStudent(James) & WorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJob(Jack) & -WorkInLab(Jack)\nTEXT:\tJames has a part-time job offered by the university.\nFOL:\tPartTimeJob(James)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJob(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJob(Jack) & -WorkInLab(Jack)\nTEXT:\tJames has a part-time job offered by the university.\nFOL:\tPartTimeJob(James)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (Student(x) & WorksInLibrary(x) -> -FromCSDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (Student(x) & PartTimeJob(x) -> WorksInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (Student(x) & TakesDatabaseCourse(x) -> FromCSDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (Student(x) & InstructedByDavid(x) -> TakesDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (Student(x) & WorksInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tStudent(James) & WorksInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJob(Jack) & -WorksInLab(Jack)\nTEXT:\tJames has a part-time job offered by the university.\nFOL:\tPartTimeJob(James)\nANSWER:\tUncertain\n"], ["TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOf(x, BakedByMelissa) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are a product of Baked by Melissa.\nFOL:\tProductOf(DriedThaiChilies, BakedByMelissa)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are a product of Baked by Melissa.\nFOL:\tProductOfBakedByMelissa(DriedThaiChilies)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are a product of Baked by Melissa.\nFOL:\tProductOfBakedByMelissa(DriedThaiChilies)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOf(x, BakedByMelissa) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are a product of Baked by Melissa.\nFOL:\tProductOf(DriedThaiChilies, BakedByMelissa)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOf(x, BakedByMelissa) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are a product of Baked by Melissa.\nFOL:\tProductOf(DriedThaiChilies, BakedByMelissa)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are a product of Baked by Melissa.\nFOL:\tProductOfBakedByMelissa(DriedThaiChilies)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are a product of Baked by Melissa.\nFOL:\tProductOfBakedByMelissa(DriedThaiChilies)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are a product of Baked by Melissa.\nFOL:\tProductOfBakedByMelissa(DriedThaiChilies)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are a product of Baked by Melissa.\nFOL:\tProductOfBakedByMelissa(DriedThaiChilies)\nANSWER:\tFalse\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(ThaiChilies) | Bakery(ThaiChilies)) -> (Hotpot(ThaiChilies) | Spicy(ThaiChilies)))\nTEXT:\tDried Thai chilies are a product of Baked by Melissa.\nFOL:\tProductOfBakedByMelissa(ThaiChilies)\nANSWER:\tFalse\n"], ["TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t(-Fly(Rock) & -Bird(Rock)) -> (-Flies(Rock) & -Breathes(Rock))\nTEXT:\tRock is a monkey.\nFOL:\tMonkey(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> Wings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t(-Fly(Rock) & -Bird(Rock)) -> (-Breathe(Rock) & -Fly(Rock))\nTEXT:\tRock is a monkey.\nFOL:\tMonkey(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((-Fly(Rock) & -Bird(Rock)) -> (-Flies(Rock) & -Breathes(Rock)))\nTEXT:\tRock is a monkey.\nFOL:\tMonkey(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> Wings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t(-Fly(Rock) & -Bird(Rock)) -> (-Flies(Rock) & -Breathes(Rock))\nTEXT:\tRock is a monkey.\nFOL:\tMonkey(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> Monkey(x) | Bird(x))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t(-Fly(Rock) & -Bird(Rock)) -> (-Flies(Rock) & -Breathes(Rock))\nTEXT:\tRock is a monkey.\nFOL:\tMonkey(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> Wings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t(-Fly(Rock) & -Bird(Rock)) -> (-Breathe(Rock) & -Fly(Rock))\nTEXT:\tRock is a monkey.\nFOL:\tMonkey(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> Wings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((-Fly(Rock) & -Bird(Rock)) -> (-Flies(Rock) & -Breathes(Rock)))\nTEXT:\tRock is a monkey.\nFOL:\tMonkey(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t(-Fly(Rock) & -Bird(Rock)) -> (-Flies(Rock) & -Breathes(Rock))\nTEXT:\tRock is a monkey.\nFOL:\tMonkey(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t(-Fly(Rock) & -Bird(Rock)) -> (-Flies(Rock) & -Breathes(Rock))\nTEXT:\tRock is a monkey.\nFOL:\tMonkey(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock)))\nTEXT:\tRock is a monkey.\nFOL:\tMonkey(Rock)\nANSWER:\tUncertain\n"], ["TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellsMoreThanMillion(x) -> Top10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMoreThanMillion(LegendOfZelda)\nTEXT:\tThe Legend of Zelda is in the Top 10 list.\nFOL:\tTop10(LegendOfZelda)\nANSWER:\tTrue\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (InTop10List(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellsMoreThanOneMillion(x) -> InTop10List(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMoreThanOneMillion(LegendOfZelda)\nTEXT:\tThe Legend of Zelda is in the Top 10 list.\nFOL:\tInTop10List(LegendOfZelda)\nANSWER:\tTrue\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellsMoreThanOneMillionCopies(x) -> Top10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMoreThanOneMillionCopies(LegendOfZelda)\nTEXT:\tThe Legend of Zelda is in the Top 10 list.\nFOL:\tTop10(LegendOfZelda)\nANSWER:\tTrue\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (InTop10(x) -> CreatedByJapaneseGameCompany(x))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellsMoreThanMillionCopies(x) -> InTop10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMoreThanMillionCopies(LegendOfZelda)\nTEXT:\tThe Legend of Zelda is in the Top 10 list.\nFOL:\tInTop10(LegendOfZelda)\nANSWER:\tTrue\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (In(x, Top10List) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellsMoreThanOneMillionCopies(x) -> In(x, Top10List))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMoreThanOneMillionCopies(LegendOfZelda)\nTEXT:\tThe Legend of Zelda is in the Top 10 list.\nFOL:\tIn(LegendOfZelda, Top10List)\nANSWER:\tTrue\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (InTop10(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SoldMoreThanMillion(x) -> InTop10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSoldMoreThanMillion(LegendOfZelda)\nTEXT:\tThe Legend of Zelda is in the Top 10 list.\nFOL:\tInTop10(LegendOfZelda)\nANSWER:\tTrue\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (InTop10List(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellMoreThanOneMillionCopies(LegendOfZelda)\nTEXT:\tThe Legend of Zelda is in the Top 10 list.\nFOL:\tInTop10List(LegendOfZelda)\nANSWER:\tTrue\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10List(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellsMoreThanOneMillion(x) -> Top10List(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMoreThanOneMillion(LegendOfZelda)\nTEXT:\tThe Legend of Zelda is in the Top 10 list.\nFOL:\tTop10List(LegendOfZelda)\nANSWER:\tTrue\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, TheLegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (InTop10(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SoldMoreThanOneMillionCopies(x) -> InTop10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSoldMoreThanOneMillionCopies(TheLegendOfZelda)\nTEXT:\tThe Legend of Zelda is in the Top 10 list.\nFOL:\tInTop10(TheLegendOfZelda)\nANSWER:\tTrue\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (InTop10(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\t[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellsMoreThanMillion(x) -> InTop10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMoreThanMillion(LegendOfZelda)\nTEXT:\tThe Legend of Zelda is in the Top 10 list.\nFOL:\tInTop10(LegendOfZelda)\nANSWER:\tTrue\n"], ["TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are a hotpot.\nFOL:\tHotpot(DriedThaiChilies)\nANSWER:\tUncertain\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOf(x, BakedByMelissa) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are a hotpot.\nFOL:\tHotpot(DriedThaiChilies)\nANSWER:\tUncertain\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are a hotpot.\nFOL:\tHotpot(DriedThaiChilies)\nANSWER:\tUncertain\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are a hotpot.\nFOL:\tHotpot(DriedThaiChilies)\nANSWER:\tUncertain\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are a hotpot.\nFOL:\tHotpot(DriedThaiChilies)\nANSWER:\tUncertain\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are a hotpot.\nFOL:\tHotpot(DriedThaiChilies)\nANSWER:\tUncertain\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are a hotpot.\nFOL:\tHotpot(DriedThaiChilies)\nANSWER:\tUncertain\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are a hotpot.\nFOL:\tHotpot(DriedThaiChilies)\nANSWER:\tUncertain\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are a hotpot.\nFOL:\tHotpot(DriedThaiChilies)\nANSWER:\tUncertain\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are a hotpot.\nFOL:\tHotpot(DriedThaiChilies)\nANSWER:\tUncertain\n"], ["TEXT:\tSome affection is love.\nFOL:\texists x. (Affection(x) & Love(x))\nTEXT:\tSome love is positive.\nFOL:\texists x. (Love(x) & Positive(x))\nTEXT:\tSome affection is positive.\nFOL:\texists x. (Affection(x) & Positive(x))\nANSWER:\tUncertain\n", "TEXT:\tSome affection is love.\nFOL:\texists x. (Affection(x) & Love(x))\nTEXT:\tSome love is positive.\nFOL:\texists x. (Love(x) & Positive(x))\nTEXT:\tSome affection is positive.\nFOL:\texists x. (Affection(x) & Positive(x))\nANSWER:\tUncertain\n", "TEXT:\tSome affection is love.\nFOL:\texists x. (Affection(x) & Love(x))\nTEXT:\tSome love is positive.\nFOL:\texists x. (Love(x) & Positive(x))\nTEXT:\tSome affection is positive.\nFOL:\texists x. (Affection(x) & Positive(x))\nANSWER:\tUncertain\n", "TEXT:\tSome affection is love.\nFOL:\texists x. (Affection(x) & Love(x))\nTEXT:\tSome love is positive.\nFOL:\texists x. (Love(x) & Positive(x))\nTEXT:\tSome affection is positive.\nFOL:\texists x. (Affection(x) & Positive(x))\nANSWER:\tUncertain\n", "TEXT:\tSome affection is love.\nFOL:\texists x. (Affection(x) & Love(x))\nTEXT:\tSome love is positive.\nFOL:\texists x. (Love(x) & Positive(x))\nTEXT:\tSome affection is positive.\nFOL:\texists x. (Affection(x) & Positive(x))\nANSWER:\tUncertain\n", "TEXT:\tSome affection is love.\nFOL:\texists x. (Affection(x) & Love(x))\nTEXT:\tSome love is positive.\nFOL:\texists x. (Love(x) & Positive(x))\nTEXT:\tSome affection is positive.\nFOL:\texists x. (Affection(x) & Positive(x))\nANSWER:\tUncertain\n", "TEXT:\tSome affection is love.\nFOL:\texists x. (Affection(x) & Love(x))\nTEXT:\tSome love is positive.\nFOL:\texists x. (Love(x) & Positive(x))\nTEXT:\tSome affection is positive.\nFOL:\texists x. (Affection(x) & Positive(x))\nANSWER:\tUncertain\n", "TEXT:\tSome affection is love.\nFOL:\texists x. (Affection(x) & Love(x))\nTEXT:\tSome love is positive.\nFOL:\texists x. (Love(x) & Positive(x))\nTEXT:\tSome affection is positive.\nFOL:\texists x. (Affection(x) & Positive(x))\nANSWER:\tUncertain\n", "TEXT:\tSome affection is love.\nFOL:\texists x. (Affection(x) & Love(x))\nTEXT:\tSome love is positive.\nFOL:\texists x. (Love(x) & Positive(x))\nTEXT:\tSome affection is positive.\nFOL:\texists x. (Affection(x) & Positive(x))\nANSWER:\tUncertain\n", "TEXT:\tSome affection is love.\nFOL:\texists x. (Affection(x) & Love(x))\nTEXT:\tSome love is positive.\nFOL:\texists x. (Love(x) & Positive(x))\nTEXT:\tSome affection is positive.\nFOL:\texists x. (Affection(x) & Positive(x))\nANSWER:\tUncertain\n"], ["TEXT:\tAll aliens are extraterrestrial.\nFOL:\tall x. (Alien(x) -> Extraterrestrial(x))\nTEXT:\tIf someone is from Mars, then they are aliens.\nFOL:\tall x. (FromMars(x) -> Alien(x))\nTEXT:\tNo extraterrestrial is human.\nFOL:\tall x. (Extraterrestrial(x) -> -Human(x))\nTEXT:\tEveryone from Earth is a human.\nFOL:\tall x. (FromEarth(x) -> Human(x))\nTEXT:\tMarvin cannot be from Earth and from Mars.\nFOL:\t-(FromEarth(Marvin) & FromMars(Marvin))\nTEXT:\tIf Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL:\t-FromEarth(Marvin) -> Extraterrestrial(Marvin)\nTEXT:\tMarvin is neither a human nor from Mars.\nFOL:\t-Human(Marvin) & -FromMars(Marvin)\nANSWER:\tUncertain\n", "TEXT:\tAll aliens are extraterrestrial.\nFOL:\tall x. (Alien(x) -> Extraterrestrial(x))\nTEXT:\tIf someone is from Mars, then they are aliens.\nFOL:\tall x. (FromMars(x) -> Alien(x))\nTEXT:\tNo extraterrestrial is human.\nFOL:\tall x. (Extraterrestrial(x) -> -Human(x))\nTEXT:\tEveryone from Earth is a human.\nFOL:\tall x. (FromEarth(x) -> Human(x))\nTEXT:\tMarvin cannot be from Earth and from Mars.\nFOL:\t-(FromEarth(Marvin) & FromMars(Marvin))\nTEXT:\tIf Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL:\t-FromEarth(Marvin) -> Extraterrestrial(Marvin)\nTEXT:\tMarvin is neither a human nor from Mars.\nFOL:\t-Human(Marvin) & -FromMars(Marvin)\nANSWER:\tUncertain\n", "TEXT:\tAll aliens are extraterrestrial.\nFOL:\tall x. (Alien(x) -> Extraterrestrial(x))\nTEXT:\tIf someone is from Mars, then they are aliens.\nFOL:\tall x. (FromMars(x) -> Alien(x))\nTEXT:\tNo extraterrestrial is human.\nFOL:\tall x. (Extraterrestrial(x) -> -Human(x))\nTEXT:\tEveryone from Earth is a human.\nFOL:\tall x. (FromEarth(x) -> Human(x))\nTEXT:\tMarvin cannot be from Earth and from Mars.\nFOL:\t-(FromEarth(Marvin) & FromMars(Marvin))\nTEXT:\tIf Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL:\t-FromEarth(Marvin) -> Extraterrestrial(Marvin)\nTEXT:\tMarvin is neither a human nor from Mars.\nFOL:\t-Human(Marvin) & -FromMars(Marvin)\nANSWER:\tUncertain\n", "TEXT:\tAll aliens are extraterrestrial.\nFOL:\tall x. (Alien(x) -> Extraterrestrial(x))\nTEXT:\tIf someone is from Mars, then they are aliens.\nFOL:\tall x. (FromMars(x) -> Alien(x))\nTEXT:\tNo extraterrestrial is human.\nFOL:\tall x. (Extraterrestrial(x) -> -Human(x))\nTEXT:\tEveryone from Earth is a human.\nFOL:\tall x. (FromEarth(x) -> Human(x))\nTEXT:\tMarvin cannot be from Earth and from Mars.\nFOL:\t(-FromEarth(Marvin) | -FromMars(Marvin))\nTEXT:\tIf Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL:\t(-FromEarth(Marvin) -> Extraterrestrial(Marvin))\nTEXT:\tMarvin is neither a human nor from Mars.\nFOL:\t(-Human(Marvin) & -FromMars(Marvin))\nANSWER:\tUncertain\n", "TEXT:\tAll aliens are extraterrestrial.\nFOL:\tall x. (Alien(x) -> Extraterrestrial(x))\nTEXT:\tIf someone is from Mars, then they are aliens.\nFOL:\tall x. (FromMars(x) -> Alien(x))\nTEXT:\tNo extraterrestrial is human.\nFOL:\tall x. (Extraterrestrial(x) -> -Human(x))\nTEXT:\tEveryone from Earth is a human.\nFOL:\tall x. (FromEarth(x) -> Human(x))\nTEXT:\tMarvin cannot be from Earth and from Mars.\nFOL:\t-(FromEarth(Marvin) & FromMars(Marvin))\nTEXT:\tIf Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL:\t-FromEarth(Marvin) -> Extraterrestrial(Marvin)\nTEXT:\tMarvin is neither a human nor from Mars.\nFOL:\t-Human(Marvin) & -FromMars(Marvin)\nANSWER:\tUncertain\n", "TEXT:\tAll aliens are extraterrestrial.\nFOL:\tall x. (Alien(x) -> Extraterrestrial(x))\nTEXT:\tIf someone is from Mars, then they are aliens.\nFOL:\tall x. (FromMars(x) -> Alien(x))\nTEXT:\tNo extraterrestrial is human.\nFOL:\tall x. (Extraterrestrial(x) -> -Human(x))\nTEXT:\tEveryone from Earth is a human.\nFOL:\tall x. (FromEarth(x) -> Human(x))\nTEXT:\tMarvin cannot be from Earth and from Mars.\nFOL:\t-(FromEarth(Marvin) & FromMars(Marvin))\nTEXT:\tIf Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL:\t-FromEarth(Marvin) -> Extraterrestrial(Marvin)\nTEXT:\tMarvin is neither a human nor from Mars.\nFOL:\t-Human(Marvin) & -FromMars(Marvin)\nANSWER:\tUncertain\n", "TEXT:\tAll aliens are extraterrestrial.\nFOL:\tall x. (Alien(x) -> Extraterrestrial(x))\nTEXT:\tIf someone is from Mars, then they are aliens.\nFOL:\tall x. (FromMars(x) -> Alien(x))\nTEXT:\tNo extraterrestrial is human.\nFOL:\tall x. (Extraterrestrial(x) -> -Human(x))\nTEXT:\tEveryone from Earth is a human.\nFOL:\tall x. (FromEarth(x) -> Human(x))\nTEXT:\tMarvin cannot be from Earth and from Mars.\nFOL:\t-(FromEarth(Marvin) & FromMars(Marvin))\nTEXT:\tIf Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL:\t-FromEarth(Marvin) -> Extraterrestrial(Marvin)\nTEXT:\tMarvin is neither a human nor from Mars.\nFOL:\t-Human(Marvin) & -FromMars(Marvin)\nANSWER:\tUncertain\n", "TEXT:\tAll aliens are extraterrestrial.\nFOL:\tall x. (Alien(x) -> Extraterrestrial(x))\nTEXT:\tIf someone is from Mars, then they are aliens.\nFOL:\tall x. (FromMars(x) -> Alien(x))\nTEXT:\tNo extraterrestrial is human.\nFOL:\tall x. (Extraterrestrial(x) -> -Human(x))\nTEXT:\tEveryone from Earth is a human.\nFOL:\tall x. (FromEarth(x) -> Human(x))\nTEXT:\tMarvin cannot be from Earth and from Mars.\nFOL:\t-(FromEarth(Marvin) & FromMars(Marvin))\nTEXT:\tIf Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL:\t-FromEarth(Marvin) -> Extraterrestrial(Marvin)\nTEXT:\tMarvin is neither a human nor from Mars.\nFOL:\t-Human(Marvin) & -FromMars(Marvin)\nANSWER:\tUncertain\n", "TEXT:\tAll aliens are extraterrestrial.\nFOL:\tall x. (Alien(x) -> Extraterrestrial(x))\nTEXT:\tIf someone is from Mars, then they are aliens.\nFOL:\tall x. (FromMars(x) -> Alien(x))\nTEXT:\tNo extraterrestrial is human.\nFOL:\tall x. (Extraterrestrial(x) -> -Human(x))\nTEXT:\tEveryone from Earth is a human.\nFOL:\tall x. (FromEarth(x) -> Human(x))\nTEXT:\tMarvin cannot be from Earth and from Mars.\nFOL:\t-(FromEarth(Marvin) & FromMars(Marvin))\nTEXT:\tIf Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL:\t-FromEarth(Marvin) -> Extraterrestrial(Marvin)\nTEXT:\tMarvin is neither a human nor from Mars.\nFOL:\t-Human(Marvin) & -FromMars(Marvin)\nANSWER:\tUncertain\n", "TEXT:\tAll aliens are extraterrestrial.\nFOL:\tall x. (Alien(x) -> Extraterrestrial(x))\nTEXT:\tIf someone is from Mars, then they are aliens.\nFOL:\tall x. (FromMars(x) -> Alien(x))\nTEXT:\tNo extraterrestrial is human.\nFOL:\tall x. (Extraterrestrial(x) -> -Human(x))\nTEXT:\tEveryone from Earth is a human.\nFOL:\tall x. (FromEarth(x) -> Human(x))\nTEXT:\tMarvin cannot be from Earth and from Mars.\nFOL:\t-(FromEarth(Marvin) & FromMars(Marvin))\nTEXT:\tIf Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL:\t-FromEarth(Marvin) -> Extraterrestrial(Marvin)\nTEXT:\tMarvin is neither a human nor from Mars.\nFOL:\t-Human(Marvin) & -FromMars(Marvin)\nANSWER:\tUncertain\n"], ["TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopular(NetflixShow(StrangerThings))\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (Popular(NetflixShow(x)) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. ((BingeWatch(Karen, x) -> Download(Karen, x)) & (Download(Karen, x) -> BingeWatch(Karen, x)))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, NetflixShow(BlackMirror))\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (BingeWatch(Karen, x) -> Share(Karen, Lisa, x))\nTEXT:\t\"Black Mirror\" is popular.\nFOL:\tPopular(NetflixShow(BlackMirror))\nANSWER:\tUncertain\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopular(NetflixShow(StrangerThings))\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (Popular(NetflixShow(x)) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (BingeWatch(Karen, x) <-> Download(Karen, x))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, NetflixShow(BlackMirror))\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (BingeWatch(Karen, x) -> Share(Karen, Lisa, x))\nTEXT:\t\"Black Mirror\" is popular.\nFOL:\tPopular(NetflixShow(BlackMirror))\nANSWER:\tFalse\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopular(StrangerThings) & NetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. ((NetflixShow(x) & Popular(x)) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (NetflixShow(x) -> (BingeWatch(Karen, x) <-> Download(Karen, x)))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) -> ShareTo(Karen, Lisa, x))\nTEXT:\t\"Black Mirror\" is popular.\nFOL:\tPopular(BlackMirror)\nANSWER:\tFalse\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopular(NetflixShow(StrangerThings))\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (Popular(NetflixShow(x)) -> BingeWatches(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (BingeWatches(Karen, x) <-> Downloads(Karen, x))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Downloads(Karen, NetflixShow(BlackMirror))\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (BingeWatches(Karen, x) -> Shares(Karen, Lisa, x))\nTEXT:\t\"Black Mirror\" is popular.\nFOL:\tPopular(NetflixShow(BlackMirror))\nANSWER:\tFalse\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopular(Netflix, StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (Popular(Netflix, x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (BingeWatch(Karen, x) <-> Download(Karen, x))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (BingeWatch(Karen, x) -> ShareTo(Karen, Lisa, x))\nTEXT:\t\"Black Mirror\" is popular.\nFOL:\tPopular(Netflix, BlackMirror)\nANSWER:\tFalse\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopular(StrangerThings) & NetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (NetflixShow(x) & Popular(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (NetflixShow(x) -> (BingeWatch(Karen, x) <-> Download(Karen, x)))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) -> Share(Karen, Lisa, x))\nTEXT:\t\"Black Mirror\" is popular.\nFOL:\tPopular(BlackMirror)\nANSWER:\tFalse\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopular(NetflixShow(\"Stranger Things\"))\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (Popular(NetflixShow(x)) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (NetflixShow(x) -> ((BingeWatch(Karen, x) -> Download(Karen, x)) & (Download(Karen, x) -> BingeWatch(Karen, x))))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, \"Black Mirror\")\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(\"Black Mirror\")\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) -> Share(Karen, Lisa, x))\nTEXT:\t\"Black Mirror\" is popular.\nFOL:\tPopular(NetflixShow(\"Black Mirror\"))\nANSWER:\tFalse\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopularNetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (PopularNetflixShow(x) -> BingeWatchKaren(x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (BingeWatchKaren(x) <-> DownloadKaren(x))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-DownloadKaren(BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (BingeWatchKaren(x) -> ShareToLisa(x, Karen))\nTEXT:\t\"Black Mirror\" is popular.\nFOL:\tPopularNetflixShow(BlackMirror)\nANSWER:\tFalse\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopular(StrangerThings) & NetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (NetflixShow(x) & Popular(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (NetflixShow(x) -> (BingeWatch(Karen, x) <-> Download(Karen, x)))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) -> ShareTo(Karen, Lisa, x))\nTEXT:\t\"Black Mirror\" is popular.\nFOL:\tPopular(BlackMirror)\nANSWER:\tFalse\n", "TEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopular(StrangerThings) & NetflixShow(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (NetflixShow(x) & Popular(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) <-> Download(Karen, x))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (NetflixShow(x) & BingeWatch(Karen, x) -> ShareTo(Karen, Lisa, x))\nTEXT:\t\"Black Mirror\" is popular.\nFOL:\tPopular(BlackMirror)\nANSWER:\tFalse\n"], ["TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is a streaming service.\nFOL:\tStreamingService(1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (DigitalMedia(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> DigitalMedia(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\tStreamingService(1984) -> HardcoverBook(1984)\nTEXT:\t1984 is a streaming service.\nFOL:\tStreamingService(1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(_1984) -> HardcoverBook(_1984))\nTEXT:\t1984 is a streaming service.\nFOL:\tStreamingService(_1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is a streaming service.\nFOL:\tStreamingService(1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (Printed(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (Streaming(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (Hardcover(x) -> Printed(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(Streaming(1984) -> Hardcover(1984))\nTEXT:\t1984 is a streaming service.\nFOL:\tStreaming(1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\tStreamingService(1984) -> HardcoverBook(1984)\nTEXT:\t1984 is a streaming service.\nFOL:\tStreamingService(1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is a streaming service.\nFOL:\tStreamingService(1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (Digital(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> Digital(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\t(StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is a streaming service.\nFOL:\tStreamingService(1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (DigitalMedia(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> DigitalMedia(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\tStreamingService(1984) -> HardcoverBook(1984)\nTEXT:\t1984 is a streaming service.\nFOL:\tStreamingService(1984)\nANSWER:\tUncertain\n", "TEXT:\tNo digital media are analog.\nFOL:\tall x. (DigitalMedia(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> DigitalMedia(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\tStreamingService(1984) -> HardcoverBook(1984)\nTEXT:\t1984 is a streaming service.\nFOL:\tStreamingService(1984)\nANSWER:\tUncertain\n"], ["TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tExists x. (InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\tExists x. (Animal(x) & (x=Humans) & CanOccurIn(MonkeypoxVirus, x))\nTEXT:\tHumans are mammals.\nFOL:\tIsAMammal(Humans)\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tSymptoms(Monkeypox) = {Fever, Headache, MusclePains, FeelingTired}\nTEXT:\tPeople feel tired when they get a flu.\nFOL:\tExists x. (Person(x) & HasFlu(x) -> FeelsTired(x))\nTEXT:\tSymptons of Monkeypox include coughing.\nFOL:\tCoughing \u2208 Symptoms(Monkeypox)\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tMonkeypoxVirus(Monkeypox) & InfectiousDisease(Monkeypox)\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. (Animal(x) & CanOccur(MonkeypoxVirus, x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tSymptoms(Monkeypox, [Fever, Headache, MusclePains, FeelingTired])\nTEXT:\tPeople feel tired when they get a flu.\nFOL:\tall x. (Flu(x) -> FeelTired(x))\nTEXT:\tSymptons of Monkeypox include coughing.\nFOL:\tIn(Symptoms(Monkeypox), Coughing)\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tall x. (Monkeypox(x) -> InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. (Occur(MonkeypoxVirus, x) & Animal(x) | Human(x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tSymptoms(Monkeypox) = {Fever, Headache, MusclePains, FeelingTired}\nTEXT:\tPeople feel tired when they get a flu.\nFOL:\tall x. (Flu(x) -> FeelingTired(x))\nTEXT:\tSymptons of Monkeypox include coughing.\nFOL:\tCoughing \u2208 Symptoms(Monkeypox)\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tExists x. (Monkeypox(x) & CausedBy(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\tExists x. (MonkeypoxVirus(x) & CanOccurIn(x, Animals \u222a Humans))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tExists x. (Symptoms(x, Monkeypox) & Include(x, {Fever, Headache, MusclePains, FeelingTired}))\nTEXT:\tPeople feel tired when they get a flu.\nFOL:\tall x. (GetFlu(x) -> FeelTired(x))\nTEXT:\tSymptons of Monkeypox include coughing.\nFOL:\tExists x. (Symptoms(x, Monkeypox) & Include(x, {Coughing}))\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tMonkeypox(x) -> InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus)\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\tExistsIn(MonkeypoxVirus, x) -> Animal(x) | Human(x)\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tSymptoms(Monkeypox) = {Fever, Headache, MusclePains, Tired, ...}\nTEXT:\tPeople feel tired when they get a glu.\nFOL:\tGlu(x) -> FeelTired(x)\nTEXT:\tSymptons of Monkeypox include coughing.\nFOL:\tCoughing \u2208 Symptoms(Monkeypox)\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tMonkeypox(x) -> InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus)\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. (Occur(MonkeypoxVirus, x) & Animal(x) | Human(x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tall x. (Monkeypox(x) -> Symptoms(x, Fever | Headache | MusclePains | Tired))\nTEXT:\tPeople feel tired when they get a glu.\nFOL:\tall x. (Flu(x) -> Tired(x))\nTEXT:\tSymptons of Monkeypox include coughing.\nFOL:\tall x. (Monkeypox(x) -> Symptoms(x, Coughing))\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tall x. (Monkeypox(x) -> InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\tall x. (MonkeypoxVirus(x) -> OccursIn(x, CertainAnimals) | OccursIn(x, Humans))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tall x. (Symptoms(x, Monkeypox) -> Includes(x, Fever) & Includes(x, Headache) & Includes(x, MusclePains) & Includes(x, FeelingTired))\nTEXT:\tPeople feel tired when they get a glu.\nFOL:\tall x. (Gets(x, Flu) -> Feels(x, Tired))\nTEXT:\tSymptons of Monkeypox include coughing.\nFOL:\tall x. (Symptoms(x, Monkeypox) -> Includes(x, Coughing))\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\texists x. (Disease(x) & CausedBy(x, MonkeypoxVirus) & Infectious(x))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. (Animal(x) & CanOccur(MonkeypoxVirus, x))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\texists x. (Symptom(x) & Of(x, Monkeypox) & (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))\nTEXT:\tPeople feel tired when they get a flu.\nFOL:\tall x. (Human(x) & GetFlu(x) -> Tired(x))\nTEXT:\tSymptons of Monkeypox include coughing.\nFOL:\texists x. (Symptom(x) & Of(x, Monkeypox) & Coughing(x))\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tExists x. (InfectiousDisease(x) & Cause(MonkeypoxVirus, x) & Monkeypox(x))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\tCanOccurIn(MonkeypoxVirus, Animals) & CanOccurIn(MonkeypoxVirus, Humans)\nTEXT:\tHumans are mammals.\nFOL:\tAll x. (Human(x) -> Mammal(x))\nTEXT:\tMammals are animals.\nFOL:\tAll x. (Mammal(x) -> Animal(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tSymptoms(Monkeypox) = {Fever, Headache, MusclePains, Tired}\nTEXT:\tPeople feel tired when they get a glu.\nFOL:\tAll x. (Get(x, Flu) -> Feel(x, Tired))\nTEXT:\tSymptons of Monkeypox include coughing.\nFOL:\tCoughing \u2208 Symptoms(Monkeypox)\nANSWER:\tUncertain\n", "TEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\texists x. (InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus) & Equals(x, Monkeypox))\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\texists x. (CanOccur(MonkeypoxVirus, x) & (Animals(x) | Equals(x, Humans)))\nTEXT:\tHumans are mammals.\nFOL:\tall x. (Humans(x) -> Mammals(x))\nTEXT:\tMammals are animals.\nFOL:\tall x. (Mammals(x) -> Animals(x))\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\texists x. (SymptomsOf(x, Monkeypox) & Includes(x, Fever) & Includes(x, Headache) & Includes(x, MusclePains) & Includes(x, FeelingTired))\nTEXT:\tPeople feel tired when they get a glu.\nFOL:\tall x. (Gets(x, Flu) -> FeelsTired(x))\nTEXT:\tSymptons of Monkeypox include coughing.\nFOL:\texists x. (SymptomsOf(x, Monkeypox) & Includes(x, Coughing))\nANSWER:\tUncertain\n"], ["TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnsLargeDesktopMonitor(x) -> WorksAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (FullyStockedHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorksAtHome(x) -> TidiesAndOrganizes(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorksAtHome(x) -> VisitsOfficeSupplyStore(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (TidiesAndOrganizes(x) -> -GoesToBedLate(x) & -WakesUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoesToBedLate(Remy) & WakesUpAfterNoon(Remy) & TidiesAndOrganizes(Remy)) | (-GoesToBedLate(Remy) & -WakesUpAfterNoon(Remy) & -TidiesAndOrganizes(Remy)))\nTEXT:\tIf Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL:\t((GoesToBedLate(Remy) | VisitsOfficeSupplyStore(Remy)) -> (-TidiesAndOrganizes(Remy) & -FullyStockedHomeOffice(Remy)))\nANSWER:\tTrue\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnsLargeDesktopMonitor(x) -> WorksAtHomeRegularly(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HasHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorksAtHomeRegularly(x) -> SpendsFreeTimeTidying(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorksAtHomeRegularly(x) -> VisitsOfficeSupplyStore(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendsFreeTimeTidying(x) -> -GoesToBedLate(x) & -WakesUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoesToBedLate(Remy) & WakesUpAfterNoon(Remy) & SpendsFreeTimeTidying(Remy)) | (-GoesToBedLate(Remy) & -WakesUpAfterNoon(Remy) & -SpendsFreeTimeTidying(Remy)))\nTEXT:\tIf Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL:\t((GoesToBedLate(Remy) | WakesUpAfterNoon(Remy) | VisitsOfficeSupplyStore(Remy)) -> (-SpendsFreeTimeTidying(Remy) & -HasHomeOffice(Remy)))\nANSWER:\tTrue\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnsLargeDesktopMonitor(x) -> WorkRegularlyAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HasImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAtHome(x) -> TidyingAndOrganizing(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (TidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) & TidyingAndOrganizing(Remy)) | (-GoToBedLateAndWakeUpAfterNoon(Remy) & -TidyingAndOrganizing(Remy)))\nTEXT:\tIf Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) | VisitOfficeSupplyStore(Remy)) -> (-TidyingAndOrganizing(Remy) & -HasImpressiveHomeOffice(Remy)))\nANSWER:\tUncertain\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingHome(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendFreeTimeTidyingAndOrganizingHome(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) & SpendFreeTimeTidyingAndOrganizingHome(Remy)) | (-GoToBedLateAndWakeUpAfterNoon(Remy) & -SpendFreeTimeTidyingAndOrganizingHome(Remy)))\nTEXT:\tIf Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) | VisitOfficeSupplyStoreRegularly(Remy)) -> (-SpendFreeTimeTidyingAndOrganizingHome(Remy) & -FullyStockedAndImpressiveHomeOffice(Remy)))\nANSWER:\tTrue\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HaveFullyStockedHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendFreeTimeTidying(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) & SpendFreeTimeTidying(Remy)) | (-GoToBedLateAndWakeUpAfterNoon(Remy) & -SpendFreeTimeTidying(Remy)))\nTEXT:\tIf Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) | VisitOfficeSupplyStoreRegularly(Remy)) -> (-SpendFreeTimeTidying(Remy) & -HaveFullyStockedHomeOffice(Remy)))\nANSWER:\tTrue\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (ImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAtHome(x) -> TidyHome(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (TidyHome(x) -> -GoToBedLate(x) & -WakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLate(Remy) & WakeUpAfterNoon(Remy) & TidyHome(Remy)) | (-GoToBedLate(Remy) & -WakeUpAfterNoon(Remy) & -TidyHome(Remy)))\nTEXT:\tIf Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL:\t((GoToBedLate(Remy) | VisitOfficeSupplyStore(Remy)) -> (-TidyHome(Remy) & -ImpressiveHomeOffice(Remy)))\nANSWER:\tTrue\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HaveImpressiveHomeOffice(x) -> OwnLargeMonitorAtHome(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeOrganizingHome(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendFreeTimeOrganizingHome(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) & SpendFreeTimeOrganizingHome(Remy)) | (-GoToBedLateAndWakeUpAfterNoon(Remy) & -SpendFreeTimeOrganizingHome(Remy)))\nTEXT:\tIf Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) | VisitOfficeSupplyStoreRegularly(Remy)) -> (-SpendFreeTimeOrganizingHome(Remy) & -HaveImpressiveHomeOffice(Remy)))\nANSWER:\tTrue\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HaveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAtHome(x) -> TidyHome(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (TidyHome(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) & TidyHome(Remy)) | (-GoToBedLateAndWakeUpAfterNoon(Remy) & -TidyHome(Remy)))\nTEXT:\tIf Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) | VisitOfficeSupplyStore(Remy)) -> (-TidyHome(Remy) & -HaveHomeOffice(Remy)))\nANSWER:\tTrue\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (Owns(x, LargeDesktopMonitor) -> WorksAtHomeRegularlyAndOften(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (Has(x, ImpressiveHomeOffice) -> Owns(x, LargeDesktopMonitor))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorksAtHomeRegularlyAndOften(x) -> SpendsFreeTimeOrganizingHome(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorksAtHomeRegularlyAndOften(x) -> VisitsOfficeSupplyStoreRegularly(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendsFreeTimeOrganizingHome(x) -> -SleepsLateAndWakesAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((SleepsLateAndWakesAfterNoon(Remy) & SpendsFreeTimeOrganizingHome(Remy)) | (-SleepsLateAndWakesAfterNoon(Remy) & -SpendsFreeTimeOrganizingHome(Remy)))\nTEXT:\tIf Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL:\t((SleepsLateAndWakesAfterNoon(Remy) | VisitsOfficeSupplyStoreRegularly(Remy)) -> (-SpendsFreeTimeOrganizingHome(Remy) & -Has(Remy, ImpressiveHomeOffice)))\nANSWER:\tTrue\n", "TEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT:\tRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL:\t((GoToBedLateAndWakeUpAfterNoon(Remy) & SpendFreeTimeTidyingAndOrganizingSpaces(Remy)) | (-GoToBedLateAndWakeUpAfterNoon(Remy) & -SpendFreeTimeTidyingAndOrganizingSpaces(Remy)))\nTEXT:\tIf Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL:\t(GoToBedLateAndWakeUpAfterNoon(Remy) | VisitOfficeSupplyStoreRegularly(Remy)) -> (-SpendFreeTimeTidyingAndOrganizingSpaces(Remy) & -HaveFullyStockedAndImpressiveHomeOffice(Remy))\nANSWER:\tTrue\n"], ["TEXT:\tSusan flies to LGA airport.\nFOL:\tArrival(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. (Departure(x, y) -> -Arrival(x, y))\nTEXT:\tJohn flies from LGA airport.\nFOL:\tDeparture(John, LGA)\nTEXT:\tSusan flies from LGA airport.\nFOL:\tDeparture(Susan, LGA)\nANSWER:\tUncertain\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tTo(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. (Departs(x, y) -> -Arrives(x, y))\nTEXT:\tJohn flies from LGA airport.\nFOL:\tFrom(John, LGA)\nTEXT:\tSusan flies from LGA airport.\nFOL:\tFrom(Susan, LGA)\nANSWER:\tUncertain\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tFliesTo(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. (FliesFrom(x, y) -> -FliesTo(x, y))\nTEXT:\tJohn flies from LGA airport.\nFOL:\tFliesFrom(John, LGA)\nTEXT:\tSusan flies from LGA airport.\nFOL:\tFliesFrom(Susan, LGA)\nANSWER:\tFalse\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tFliesTo(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. (FliesFrom(x, y) & FliesTo(x, y) -> False)\nTEXT:\tJohn flies from LGA airport.\nFOL:\tFliesFrom(John, LGA)\nTEXT:\tSusan flies from LGA airport.\nFOL:\tFliesFrom(Susan, LGA)\nANSWER:\tUncertain\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tFliesTo(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. (FliesFrom(x, y) -> -FliesTo(x, y))\nTEXT:\tJohn flies from LGA airport.\nFOL:\tFliesFrom(John, LGA)\nTEXT:\tSusan flies from LGA airport.\nFOL:\tFliesFrom(Susan, LGA)\nANSWER:\tUncertain\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tFliesTo(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. all z. (FliesFrom(x, y) & FliesTo(x, z) -> y != z)\nTEXT:\tJohn flies from LGA airport.\nFOL:\tFliesFrom(John, LGA)\nTEXT:\tSusan flies from LGA airport.\nFOL:\tFliesFrom(Susan, LGA)\nANSWER:\tUncertain\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tFliesTo(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. all z. (FliesFrom(x, y) & FliesTo(x, z) -> (y != z))\nTEXT:\tJohn flies from LGA airport.\nFOL:\tFliesFrom(John, LGA)\nTEXT:\tSusan flies from LGA airport.\nFOL:\tFliesFrom(Susan, LGA)\nANSWER:\tUncertain\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tArrival(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. (Departure(x, y) -> -Arrival(x, y))\nTEXT:\tJohn flies from LGA airport.\nFOL:\tDeparture(John, LGA)\nTEXT:\tSusan flies from LGA airport.\nFOL:\tDeparture(Susan, LGA)\nANSWER:\tUncertain\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tFliesTo(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. (FliesFrom(x, y) -> -FliesTo(x, y))\nTEXT:\tJohn flies from LGA airport.\nFOL:\tFliesFrom(John, LGA)\nTEXT:\tSusan flies from LGA airport.\nFOL:\tFliesFrom(Susan, LGA)\nANSWER:\tUncertain\n", "TEXT:\tSusan flies to LGA airport.\nFOL:\tFliesTo(Susan, LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tall x. all y. (FliesFrom(x, y) -> -FliesTo(x, y))\nTEXT:\tJohn flies from LGA airport.\nFOL:\tFliesFrom(John, LGA)\nTEXT:\tSusan flies from LGA airport.\nFOL:\tFliesFrom(Susan, LGA)\nANSWER:\tUncertain\n"], ["TEXT:\tBillings is a city in Montana.\nFOL:\tCity(Billings) & In(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tIn(Butte, Montana) & In(Helena, Montana) & In(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\tCity(WhiteSulphurSprings) & City(Butte) & SameState(WhiteSulphurSprings, Butte)\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\tCity(Pierre) & -In(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (City(x) & In(x, Butte) -> -In(x, Pierre))\nTEXT:\tButte and Pierre are in the same state.\nFOL:\tSameState(Butte, Pierre)\nANSWER:\tFalse\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\tCityInState(WhiteSulphurSprings, x) & CityInState(Butte, x)\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInCity(x, Butte) -> -CityInCity(x, Pierre))\nTEXT:\tButte and Pierre are in the same state.\nFOL:\tCityInState(Butte, x) & CityInState(Pierre, x)\nANSWER:\tFalse\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityIn(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityIn(Butte, Montana) & CityIn(Helena, Montana) & CityIn(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\tSameState(WhiteSulphurSprings, Butte)\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityIn(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityIn(x, Butte) -> -CityIn(x, Pierre))\nTEXT:\tButte and Pierre are in the same state.\nFOL:\tSameState(Butte, Pierre)\nANSWER:\tFalse\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\tSameState(WhiteSulphurSprings, Butte)\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t\u00acCityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInCity(x, Butte) -> \u00acCityInCity(x, Pierre))\nTEXT:\tButte and Pierre are in the same state.\nFOL:\tSameState(Butte, Pierre)\nANSWER:\tFalse\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists x. (CityInState(WhiteSulphurSprings, x) & CityInState(Butte, x))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInButte(x) -> -CityInPierre(x))\nTEXT:\tButte and Pierre are in the same state.\nFOL:\texists x. (CityInState(Butte, x) & CityInState(Pierre, x))\nANSWER:\tFalse\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tIn(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tIn(Butte, Montana) & In(Helena, Montana) & In(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists x. (In(WhiteSulphurSprings, x) & In(Butte, x))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-In(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (In(x, Butte) -> -In(x, Pierre))\nTEXT:\tButte and Pierre are in the same state.\nFOL:\texists x. (In(Butte, x) & In(Pierre, x))\nANSWER:\tFalse\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tInCity(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tInCity(Butte, Montana) & InCity(Helena, Montana) & InCity(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists x. (InCity(WhiteSulphurSprings, x) & InCity(Butte, x))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-InCity(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (InCity(x, Butte) -> -InCity(x, Pierre))\nTEXT:\tButte and Pierre are in the same state.\nFOL:\texists x. (InCity(Butte, x) & InCity(Pierre, x))\nANSWER:\tFalse\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists x. (CityInState(WhiteSulphurSprings, x) & CityInState(Butte, x))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInCity(x, Butte) -> -CityInCity(x, Pierre))\nTEXT:\tButte and Pierre are in the same state.\nFOL:\texists x. (CityInState(Butte, x) & CityInState(Pierre, x))\nANSWER:\tFalse\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\tSameState(WhiteSulphurSprings, Butte)\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t- CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInCity(x, Butte) -> -CityInCity(x, Pierre))\nTEXT:\tButte and Pierre are in the same state.\nFOL:\tSameState(Butte, Pierre)\nANSWER:\tFalse\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\tSameState(WhiteSulphurSprings, Butte)\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t\u00acCityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInCity(x, Butte) -> \u00acCityInCity(x, Pierre))\nTEXT:\tButte and Pierre are in the same state.\nFOL:\tSameState(Butte, Pierre)\nANSWER:\tFalse\n"], ["TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. all y. (BornIn(x, y) & AmericanCity(y) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. (WrittenBy(y, x) & Novel(y) -> NovelWriter(x))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro was born in Boston.\nFOL:\tBornIn(DaniShapiro, Boston)\nANSWER:\tUncertain\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. all y. (BornIn(x, y) & AmericanCity(y) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. (Book(x) & Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro was born in Boston.\nFOL:\tBornIn(DaniShapiro, Boston)\nANSWER:\tUncertain\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. all y. (BornIn(x, y) & AmericanCity(y) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. (Book(x) & Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro was born in Boston.\nFOL:\tBornIn(DaniShapiro, Boston)\nANSWER:\tUncertain\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. all y. (BornIn(x, y) & AmericanCity(y) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. (WrittenBy(x, y) & Novel(x) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro was born in Boston.\nFOL:\tBornIn(DaniShapiro, Boston)\nANSWER:\tUncertain\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. all y. (BornIn(x, y) & AmericanCity(y) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. ((Book(x) & Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenInYear(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro was born in Boston.\nFOL:\tBornIn(DaniShapiro, Boston)\nANSWER:\tUncertain\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. all y. (BornIn(x, y) & AmericanCity(y) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. (Book(x) & Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro was born in Boston.\nFOL:\tBornIn(DaniShapiro, Boston)\nANSWER:\tUncertain\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. all y. (BornIn(x, y) & AmericanCity(y) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. (Book(x) & Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & Year(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro was born in Boston.\nFOL:\tBornIn(DaniShapiro, Boston)\nANSWER:\tUncertain\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. all y. (BornIn(x, y) & AmericanCity(y) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. (Book(y) & Novel(y) & WrittenBy(y, x) -> NovelWriter(x))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro was born in Boston.\nFOL:\tBornIn(DaniShapiro, Boston)\nANSWER:\tUncertain\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. all y. (BornIn(x, y) & AmericanCity(y) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. (Book(x) & Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro was born in Boston.\nFOL:\tBornIn(DaniShapiro, Boston)\nANSWER:\tUncertain\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. all y. (BornIn(x, y) & AmericanCity(y) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. (Book(x) & Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro was born in Boston.\nFOL:\tBornIn(DaniShapiro, Boston)\nANSWER:\tUncertain\n"], ["TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & AllowsPets(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (ManagedBuilding(x) -> (Deposit(x) = MonthlyRent(x) | Deposit(x) > MonthlyRent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tMonthlyRent(OliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) -> ((Rent(Tom, x) & AllowsPets(x, Fluffy) & Deposit(x) <= 1500) <-> Rent(Tom, x)))\nTEXT:\t2000$ is more than $1500.\nFOL:\t2000 > 1500\nTEXT:\tTom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL:\tRent(Tom, OliveGarden) & AllowsPets(OliveGarden, Fluffy)\nANSWER:\tUncertain\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & Allowed(x, Pets))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (ManagedBuilding(x) -> (SecurityDeposit(x) = MonthlyRent(x) | SecurityDeposit(x) > MonthlyRent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tMonthlyRent(OliveGarden) = 2000\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) & WillRent(Tom, x) <-> (Allowed(x, Fluffy) & SecurityDeposit(x) <= 1500))\nTEXT:\t2000$ is more than $1500.\nFOL:\t2000 > 1500\nTEXT:\tTom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL:\tAllowed(OliveGarden, Fluffy)\nANSWER:\tUncertain\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & Allows(x, Pets))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiredDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (ManagedBuilding(x) -> (SecurityDeposit(x) = MonthlyRent(x) | SecurityDeposit(x) > MonthlyRent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tMonthlyRent(OliveGarden) = 2000\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (WillingToRent(Tom, x) <-> (ManagedBuilding(x) & Allows(x, Fluffy) & SecurityDeposit(x) <= 1500))\nTEXT:\t2000$ is more than $1500.\nFOL:\t2000 > 1500\nTEXT:\tTom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL:\tAllows(OliveGarden, Fluffy)\nANSWER:\tUncertain\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (ManagedBuilding(x) -> ((DepositEqualsRent(x) | DepositMoreThanRent(x))))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. all y. (Cat(y, x) -> Pet(y, x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tRent(OliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) -> ((WantsToRent(Tom, x, Fluffy) & DepositNoMoreThan(x, 1500)) <-> Renting(Tom, x)))\nTEXT:\t2000$ is more than $1500.\nFOL:\tMoreThan(2000, 1500)\nTEXT:\tTom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL:\tPetsAllowed(OliveGarden) & Pet(Tom, Fluffy)\nANSWER:\tUncertain\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & AllowPets(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (RequiresDeposit(x) -> (Deposit(x) = Rent(x) | Deposit(x) > Rent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tRent(OliveGarden) = 2000\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) & WillRent(Tom, x) <-> (AllowPets(x) & Deposit(x) <= 1500))\nTEXT:\t2000$ is more than $1500.\nFOL:\t2000 > 1500\nTEXT:\tTom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL:\tWillRent(Tom, OliveGarden)\nANSWER:\tFalse\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & Forall y. (Pet(y) -> Allowed(y, x)))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> Exists y. (Deposit(y, x)))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. all y. (ManagedBuilding(x) & Deposit(y, x) -> (Equal(y, Rent(x)) | More(y, Rent(x))))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tRent(OliveGarden) = 2000\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) -> (Rent(Tom, x) <-> (Allowed(Fluffy, x) & Exists y. (Deposit(y, x) & NoMoreThan(y, 1500)))))\nTEXT:\t2000$ is more than $1500.\nFOL:\tMore(2000, 1500)\nTEXT:\tTom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL:\tAllowed(Fluffy, OliveGarden)\nANSWER:\tUncertain\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & AllowsPets(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (Deposit(x) -> (EqualToRent(x) | MoreThanRent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tMonthlyRent(OliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (WillingToRent(Tom, x) <-> (ManagedBuilding(x) & AllowsPets(x) & DepositLessThanOrEqualTo(x, 1500)))\nTEXT:\t2000$ is more than $1500.\nFOL:\tMoreThan(2000, 1500)\nTEXT:\tTom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL:\tAllowsPets(OliveGarden) & Pet(Fluffy) & Owner(Tom, Fluffy)\nANSWER:\tUncertain\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (SecurityDeposit(x) -> (Rent(x) | MoreThanRent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & OwnedBy(Fluffy, Tom)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tMonthlyRent(OliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (WillRent(Tom, x) <-> (ManagedBuilding(x) & AllowedToMoveInWith(Tom, Fluffy, x) & SecurityDepositNotMoreThan(x, 1500)))\nTEXT:\t2000$ is more than $1500.\nFOL:\tMoreThan(2000, 1500)\nTEXT:\tTom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL:\tAllowedToMoveInWith(Tom, Fluffy, OliveGarden)\nANSWER:\tUncertain\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & Allows(x, Pets))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (ManagedBuilding(x) -> (DepositEqualToRent(x) | DepositMoreThanRent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tMonthlyRent(OliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) -> ((Allows(x, Fluffy) & DepositLessThanOrEqualTo(x, 1500)) <-> Rents(Tom, x)))\nTEXT:\t2000$ is more than $1500.\nFOL:\tGreaterThan(2000, 1500)\nTEXT:\tTom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL:\tAllows(OliveGarden, Fluffy) & PetOwner(Tom, Fluffy)\nANSWER:\tUncertain\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (RentApartment(x) & ManagedBuilding(x) -> DepositRequired(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (Deposit(x) -> (EqualToOneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tRent(OliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (RentApartment(Tom, x) & ManagedBuilding(x) <-> MoveInWithPet(Tom, Fluffy, x) & DepositLessOrEqual(Tom, x, 1500))\nTEXT:\t2000$ is more than $1500.\nFOL:\tMore(2000, 1500)\nTEXT:\tTom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL:\tMoveInWithPet(Tom, Fluffy, OliveGarden)\nANSWER:\tUncertain\n"], ["TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. (MusicPiece(x) -> exists y. (Composer(y) & Writes(y, x)))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. (Orchestra(x) -> exists y. (Conductor(y) & Leads(y, x)))\nTEXT:\tBeethoven is a composer.\nFOL:\tComposer(Beethoven)\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(y) & Leads(x, y) -> Conductor(x))\nTEXT:\tBeethoven is a composer.\nFOL:\tComposer(Beethoven)\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Conductor(y) -> Leads(y, x))\nTEXT:\tBeethoven is a composer.\nFOL:\tComposer(Beethoven)\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Leads(y, x) -> Conductor(y))\nTEXT:\tBeethoven is a composer.\nFOL:\tComposer(Beethoven)\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(y) & Leads(x, y) -> Conductor(x))\nTEXT:\tBeethoven is a composer.\nFOL:\tComposer(Beethoven)\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Conductor(y) -> LedBy(x, y))\nTEXT:\tBeethoven is a composer.\nFOL:\tComposer(Beethoven)\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Conductor(y) -> LedBy(x, y))\nTEXT:\tBeethoven is a composer.\nFOL:\tComposer(Beethoven)\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (MusicPiece(y) & Writes(x, y) -> Composer(x))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(y) & Leads(x, y) -> Conductor(x))\nTEXT:\tBeethoven is a composer.\nFOL:\tComposer(Beethoven)\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Leads(y, x) -> Conductor(y))\nTEXT:\tBeethoven is a composer.\nFOL:\tComposer(Beethoven)\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Conducts(y) -> LedBy(x, y))\nTEXT:\tBeethoven is a composer.\nFOL:\tComposer(Beethoven)\nANSWER:\tTrue\n"], ["TEXT:\tThe Olympic games is a sporting event.\nFOL:\tSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLast(OlympicGames, Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe United States won the most medals in the last Olympic games.\nFOL:\tWonMostMedals(UnitedStates, Last(OlympicGames))\nANSWER:\tTrue\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tall x. (OlympicGames(x) -> SportingEvent(x))\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastOlympicGames(Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe United States won the most medals in the last Olympic games.\nFOL:\tMostMedals(UnitedStates, LastOlympicGames)\nANSWER:\tTrue\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\texists x. (OlympicGames(x) & SportingEvent(x))\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastOlympicGames(Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe United States won the most medals in the last Olympic games.\nFOL:\tMostMedals(UnitedStates, LastOlympicGames)\nANSWER:\tTrue\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tSportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLast(OlympicGames, Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe United States won the most medals in the last Olympic games.\nFOL:\tMostMedals(UnitedStates, Last(OlympicGames))\nANSWER:\tTrue\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tolympicGames(x) -> SportingEvent(x)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tlastOlympicGames(Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\twonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe United States won the most medals in the last Olympic games.\nFOL:\twonMostMedals(UnitedStates, x) & lastOlympicGames(x)\nANSWER:\tTrue\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tExists x. (SportingEvent(x) & OlympicGames(x))\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastOlympicGames(Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe United States won the most medals in the last Olympic games.\nFOL:\tWonMostMedals(UnitedStates, LastOlympicGames)\nANSWER:\tTrue\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\texists x. (OlympicGames(x) & SportingEvent(x))\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLast(OlympicGames, Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe United States won the most medals in the last Olympic games.\nFOL:\tWonMostMedals(UnitedStates, Last(OlympicGames))\nANSWER:\tTrue\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\tOlympicGames(x) -> SportingEvent(x)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastOlympicGames(Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe United States won the most medals in the last Olympic games.\nFOL:\tWonMostMedals(UnitedStates, LastOlympicGames(x))\nANSWER:\tTrue\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\texists x. (OlympicGames(x) & SportingEvent(x))\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLast(OlympicGames, Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe United States won the most medals in the last Olympic games.\nFOL:\tWonMostMedals(UnitedStates, LastOlympicGames)\nANSWER:\tTrue\n", "TEXT:\tThe Olympic games is a sporting event.\nFOL:\texists x. (OlympicGames(x) & SportingEvent(x))\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tLastOlympicGames(Tokyo)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tWonMostMedals(UnitedStates, Tokyo)\nTEXT:\tThe United States won the most medals in the last Olympic games.\nFOL:\tWonMostMedals(UnitedStates, LastOlympicGames)\nANSWER:\tTrue\n"], ["TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludedIn(SnowIsland, SouthShetlandIslands) & IncludedIn(GreenwichIsland, SouthShetlandIslands) & IncludedIn(DeceptionIsland, SouthShetlandIslands)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT:\tBarutin is named after all islands in Antarctica.\nFOL:\tall x. (Island(x) & LocatedIn(x, Antarctica) -> NamedAfter(x, Barutin))\nANSWER:\tFalse\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludedIn(SnowIsland, SouthShetlandIslands) & IncludedIn(GreenwichIsland, SouthShetlandIslands) & IncludedIn(DeceptionIsland, SouthShetlandIslands)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\nTEXT:\tBarutin is named after all islands in Antarctica.\nFOL:\tall x. (Island(x) & LocatedIn(x, Antarctica) -> NamedAfter(x, Barutin))\nANSWER:\tFalse\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludedIn(SnowIsland, SouthShetlandIslands) & IncludedIn(GreenwichIsland, SouthShetlandIslands) & IncludedIn(DeceptionIsland, SouthShetlandIslands)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT:\tBarutin is named after all islands in Antarctica.\nFOL:\tall x. (Island(x) & LocatedIn(x, Antarctica) -> NamedAfter(Barutin, x))\nANSWER:\tFalse\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & PartOf(y, z)) -> LocatedIn(x, z))\nTEXT:\tBarutin is named after all islands in Antarctica.\nFOL:\tall x. (Island(x) & PartOf(x, Antarctica) -> NamedAfter(Barutin, x))\nANSWER:\tFalse\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocation(BarutinCove, SouthwestCoast(SnowIsland))\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. (Location(x, y) & PartOf(y, z) -> Location(x, z))\nTEXT:\tBarutin is named after all islands in Antarctica.\nFOL:\tall x. (Island(x) & Location(x, Antarctica) -> NamedAfter(x, Barutin))\nANSWER:\tFalse\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin) & BulgarianSettlement(Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SouthwestCoast(SnowIsland))\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & PartOf(y, z)) -> LocatedIn(x, z))\nTEXT:\tBarutin is named after all islands in Antarctica.\nFOL:\tall x. (Island(x) & PartOf(x, Antarctica) -> NamedAfter(Barutin, x))\nANSWER:\tFalse\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tLocatedIn(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\nTEXT:\tBarutin is named after all islands in Antarctica.\nFOL:\tall x. (IslandInAntarctica(x) -> NamedAfter(Barutin, x))\nANSWER:\tFalse\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, BarutinSettlement)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x, y, z. ((LocatedIn(x, y) & PartOf(y, z)) -> LocatedIn(x, z))\nTEXT:\tBarutin is named after all islands in Antarctica.\nFOL:\tall x. (Island(x) & PartOf(x, Antarctica) -> NamedAfter(Barutin, x))\nANSWER:\tFalse\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. (LocatedIn(x, y) & PartOf(y, z) -> LocatedIn(x, z))\nTEXT:\tBarutin is named after all islands in Antarctica.\nFOL:\tall x. (Island(x) & PartOf(x, Antarctica) -> NamedAfter(Barutin, x))\nANSWER:\tFalse\n", "TEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tNamedAfter(BarutinCove, Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tLocatedIn(BarutinCove, SnowIsland)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tIncludedIn(SnowIsland, SouthShetlandIslands) & IncludedIn(GreenwichIsland, SouthShetlandIslands) & IncludedIn(DeceptionIsland, SouthShetlandIslands)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tPartOf(SouthShetlandIslands, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. all y. all z. (LocatedIn(x, y) & PartOf(y, z) -> LocatedIn(x, z))\nTEXT:\tBarutin is named after all islands in Antarctica.\nFOL:\tall x. (Island(x) & PartOf(x, Antarctica) -> NamedAfter(Barutin, x))\nANSWER:\tFalse\n"], ["TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. Turtle(x)\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle or cute.\nFOL:\tTurtle(Rock) | Cute(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> Rabbit(x) | Squirrel(x))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle or cute.\nFOL:\tTurtle(Rock) | Cute(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle or cute.\nFOL:\tTurtle(Rock) | Cute(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle or cute.\nFOL:\tTurtle(Rock) | Cute(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle or cute.\nFOL:\tTurtle(Rock) | Cute(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle or cute.\nFOL:\tTurtle(Rock) | Cute(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. Turtle(x)\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle or cute.\nFOL:\tTurtle(Rock) | Cute(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. Turtle(x)\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle or cute.\nFOL:\tTurtle(Rock) | Cute(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle or cute.\nFOL:\tTurtle(Rock) | Cute(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle or cute.\nFOL:\tTurtle(Rock) | Cute(Rock)\nANSWER:\tUncertain\n"], ["TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t(-Airline(Greyhound) -> forall x. (GreyhoundPlane(x) -> False))\nTEXT:\tGreyhound is an airline.\nFOL:\tAirline(Greyhound)\nANSWER:\tTrue\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t(-Airline(Greyhound) -> forall x. (-Plane(x) | -Greyhound(x)))\nTEXT:\tGreyhound is an airline.\nFOL:\tAirline(Greyhound)\nANSWER:\tUncertain\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t-Airline(Greyhound) -> -Plane(Greyhound)\nTEXT:\tGreyhound is an airline.\nFOL:\tAirline(Greyhound)\nANSWER:\tTrue\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\tNotAirline(Greyhound) -> NoPlane(Greyhound)\nTEXT:\tGreyhound is an airline.\nFOL:\tAirline(Greyhound)\nANSWER:\tTrue\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t(-Airline(Greyhound) -> forall x. (-Plane(Greyhound)))\nTEXT:\tGreyhound is an airline.\nFOL:\tAirline(Greyhound)\nANSWER:\tUncertain\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t-Airline(Greyhound) -> forall x. (-Plane(x) & Greyhound(x))\nTEXT:\tGreyhound is an airline.\nFOL:\tAirline(Greyhound)\nANSWER:\tTrue\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t(-Airline(Greyhound) -> -Plane(Greyhound))\nTEXT:\tGreyhound is an airline.\nFOL:\tAirline(Greyhound)\nANSWER:\tTrue\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t(-Airline(Greyhound) -> -Exists x. (GreyhoundPlane(x)))\nTEXT:\tGreyhound is an airline.\nFOL:\tAirline(Greyhound)\nANSWER:\tTrue\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t-Airline(Greyhound) -> forall x. (-Plane(x) | -Greyhound(x))\nTEXT:\tGreyhound is an airline.\nFOL:\tAirline(Greyhound)\nANSWER:\tUncertain\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t-Airline(Greyhound) -> all x. (-Plane(x) | -Greyhound(x))\nTEXT:\tGreyhound is an airline.\nFOL:\tAirline(Greyhound)\nANSWER:\tUncertain\n"], ["TEXT:\tAll horses have hooves.\nFOL:\tall x. (Horse(x) -> Hooves(x))\nTEXT:\tNo humans have hooves.\nFOL:\tall x. (Human(x) -> -Hooves(x))\nTEXT:\tSome humans are horses.\nFOL:\texists x. (Human(x) & Horse(x))\nANSWER:\tFalse\n", "TEXT:\tAll horses have hooves.\nFOL:\tall x. (Horse(x) -> Hooves(x))\nTEXT:\tNo humans have hooves.\nFOL:\tall x. (Human(x) -> -Hooves(x))\nTEXT:\tSome humans are horses.\nFOL:\texists x. (Human(x) & Horse(x))\nANSWER:\tFalse\n", "TEXT:\tAll horses have hooves.\nFOL:\tall x. (Horse(x) -> HasHooves(x))\nTEXT:\tNo humans have hooves.\nFOL:\tall x. (Human(x) -> -HasHooves(x))\nTEXT:\tSome humans are horses.\nFOL:\texists x. (Human(x) & Horse(x))\nANSWER:\tFalse\n", "TEXT:\tAll horses have hooves.\nFOL:\tall x. (Horse(x) -> Hooves(x))\nTEXT:\tNo humans have hooves.\nFOL:\tall x. (Human(x) -> -Hooves(x))\nTEXT:\tSome humans are horses.\nFOL:\texists x. (Human(x) & Horse(x))\nANSWER:\tFalse\n", "TEXT:\tAll horses have hooves.\nFOL:\tall x. (Horse(x) -> Hooves(x))\nTEXT:\tNo humans have hooves.\nFOL:\tall x. (Human(x) -> -Hooves(x))\nTEXT:\tSome humans are horses.\nFOL:\texists x. (Human(x) & Horse(x))\nANSWER:\tFalse\n", "TEXT:\tAll horses have hooves.\nFOL:\tall x. (Horse(x) -> HasHooves(x))\nTEXT:\tNo humans have hooves.\nFOL:\tall x. (Human(x) -> -HasHooves(x))\nTEXT:\tSome humans are horses.\nFOL:\texists x. (Human(x) & Horse(x))\nANSWER:\tFalse\n", "TEXT:\tAll horses have hooves.\nFOL:\tall x. (Horse(x) -> HasHooves(x))\nTEXT:\tNo humans have hooves.\nFOL:\tall x. (Human(x) -> -HasHooves(x))\nTEXT:\tSome humans are horses.\nFOL:\texists x. (Human(x) & Horse(x))\nANSWER:\tFalse\n", "TEXT:\tAll horses have hooves.\nFOL:\tall x. (Horse(x) -> HaveHooves(x))\nTEXT:\tNo humans have hooves.\nFOL:\tall x. (Human(x) -> -HaveHooves(x))\nTEXT:\tSome humans are horses.\nFOL:\texists x. (Human(x) & Horse(x))\nANSWER:\tFalse\n", "TEXT:\tAll horses have hooves.\nFOL:\tall x. (Horse(x) -> Hooves(x))\nTEXT:\tNo humans have hooves.\nFOL:\tall x. (Human(x) -> -Hooves(x))\nTEXT:\tSome humans are horses.\nFOL:\texists x. (Human(x) & Horse(x))\nANSWER:\tFalse\n", "TEXT:\tAll horses have hooves.\nFOL:\tall x. (Horse(x) -> Hooves(x))\nTEXT:\tNo humans have hooves.\nFOL:\tall x. (Human(x) -> -Hooves(x))\nTEXT:\tSome humans are horses.\nFOL:\texists x. (Human(x) & Horse(x))\nANSWER:\tFalse\n"], ["TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (PetOwner(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tPetOwner(Tom)\nTEXT:\tTom is not a grumpy person and mean to animals.\nFOL:\t-Grumpy(Tom) & -MeanToAnimals(Tom)\nANSWER:\tTrue\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (PetOwner(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tPetOwner(Tom)\nTEXT:\tTom is not a grumpy person and mean to animals.\nFOL:\t-Grumpy(Tom) & -MeanToAnimals(Tom)\nANSWER:\tTrue\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (OwnsPet(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tTom is not a grumpy person and mean to animals.\nFOL:\t-Grumpy(Tom) & -MeanToAnimals(Tom)\nANSWER:\tTrue\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (PetOwner(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tPetOwner(Tom)\nTEXT:\tTom is not a grumpy person and mean to animals.\nFOL:\t-Grumpy(Tom) & -MeanToAnimals(Tom)\nANSWER:\tTrue\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (OwnsPet(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tTom is not a grumpy person and mean to animals.\nFOL:\t-Grumpy(Tom) & -MeanToAnimals(Tom)\nANSWER:\tTrue\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (OwnsPet(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tTom is not a grumpy person and mean to animals.\nFOL:\t-Grumpy(Tom) & -MeanToAnimals(Tom)\nANSWER:\tTrue\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (PetOwner(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tPetOwner(Tom)\nTEXT:\tTom is not a grumpy person and mean to animals.\nFOL:\t-Grumpy(Tom) & -MeanToAnimals(Tom)\nANSWER:\tTrue\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (PetOwner(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tPetOwner(Tom)\nTEXT:\tTom is not a grumpy person and mean to animals.\nFOL:\t-Grumpy(Tom) & -MeanToAnimals(Tom)\nANSWER:\tTrue\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (OwnsPet(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tTom is not a grumpy person and mean to animals.\nFOL:\t-Grumpy(Tom) & -MeanToAnimals(Tom)\nANSWER:\tTrue\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (PetOwner(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tPetOwner(Tom)\nTEXT:\tTom is not a grumpy person and mean to animals.\nFOL:\t-Grumpy(Tom) & -MeanToAnimals(Tom)\nANSWER:\tTrue\n"], ["TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. ((Studies(x) & -Teaches(x)) | (-Studies(x) & Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\t(Young(Rose) & -Student(Rose)) | (-Young(Rose) & Student(Rose))\nTEXT:\tRose is a human or a manager.\nFOL:\t(Human(Rose) & -Manager(Rose)) | (-Human(Rose) & Manager(Rose))\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Person(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tRose is a human or a manager.\nFOL:\tHuman(Rose) | Manager(Rose)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tRose is a human or a manager.\nFOL:\tHuman(Rose) | Manager(Rose)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tRose is a human or a manager.\nFOL:\tHuman(Rose) | Manager(Rose)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Person(x) -> (Studies(x) | Teaches(x)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tRose is a human or a manager.\nFOL:\tHuman(Rose) | Manager(Rose)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tRose is a human or a manager.\nFOL:\tHuman(Rose) | Manager(Rose)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tRose is a human or a manager.\nFOL:\tHuman(Rose) | Manager(Rose)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studies or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tRose is a human or a manager.\nFOL:\tHuman(Rose) | Manager(Rose)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\tYoung(Rose) | Student(Rose)\nTEXT:\tRose is a human or a manager.\nFOL:\tHuman(Rose) | Manager(Rose)\nANSWER:\tUncertain\n", "TEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\tall x. (Studies(x) | Teaches(x))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teaches(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\t(Young(Rose) | Student(Rose))\nTEXT:\tRose is a human or a manager.\nFOL:\tHuman(Rose) | Manager(Rose)\nANSWER:\tUncertain\n"], ["TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignByZahaHadid(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\tDesignByZahaHadid(x) | DesignByKellyWearstler(x)\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignByKellyWearstler(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignByKellyWearstler(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignByMax(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is either evocative or dreamy.\nFOL:\tDesignByMax(x) & (Evocative(x) | Dreamy(x))\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignStyleZahaHadid(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\tDesignStyleZahaHadid(x) | DesignStyleKellyWearstler(x)\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignMax(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is either evocative or dreamy.\nFOL:\tDesignMax(x) & (Evocative(x) | Dreamy(x))\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignStyleZahaHadid(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\t(DesignStyleZahaHadid(x) | DesignStyleKellyWearstler(x))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignMax(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is either evocative or dreamy.\nFOL:\tDesignMax(x) -> (Evocative(x) | Dreamy(x))\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignStyleOfZahaHadid(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\tDesignStyleOfZahaHadid(x) | DesignStyleOfKellyWearstler(x)\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignStyleOfKellyWearstler(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignStyleOfKellyWearstler(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignByMax(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is either evocative or dreamy.\nFOL:\texists x. (DesignByMax(x) & (Evocative(x) | Dreamy(x)))\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (ZahaHadidStyle(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\t(exists x. ZahaHadidStyle(x)) | (exists y. KellyWearstlerStyle(y))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (KellyWearstlerStyle(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (KellyWearstlerStyle(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (MaxDesign(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is either evocative or dreamy.\nFOL:\texists x. (MaxDesign(x) & (Evocative(x) | Dreamy(x)))\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (ZahaHadidDesignStyle(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\t(ZahaHadidDesignStyle(x) | KellyWearstlerDesignStyle(x))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (MaxDesign(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is either evocative or dreamy.\nFOL:\t(MaxDesign(x) & (Evocative(x) | Dreamy(x)))\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignStyleOfZahaHadid(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\tDesignStyleOfZahaHadid(x) | DesignStyleOfKellyWearstler(x)\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignStyleOfKellyWearstler(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignStyleOfKellyWearstler(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignByMax(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is either evocative or dreamy.\nFOL:\tDesignByMax(x) -> (Evocative(x) | Dreamy(x))\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignStyle(x, ZahaHadid) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\t(DesignStyle(x, ZahaHadid) | DesignStyle(x, KellyWearstler))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignStyle(x, KellyWearstler) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignStyle(x, KellyWearstler) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignStyle(x, Max) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is either evocative or dreamy.\nFOL:\t(DesignStyle(x, Max) & Evocative(x)) | (DesignStyle(x, Max) & Dreamy(x))\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (Designs(x, ZahaHadid) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\tDesigns(x, ZahaHadid) | Designs(x, KellyWearstler)\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (Designs(x, KellyWearstler) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (Designs(x, KellyWearstler) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (Designs(x, Max) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is either evocative or dreamy.\nFOL:\tDesigns(x, Max) & (Evocative(x) | Dreamy(x))\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignStyleZahaHadid(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\texists x. (DesignStyleZahaHadid(x) | DesignStyleKellyWearstler(x))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignMax(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is either evocative or dreamy.\nFOL:\texists x. (DesignMax(x) & (Evocative(x) | Dreamy(x)))\nANSWER:\tUncertain\n"], ["TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & AllowPets(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequireDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. all y. (RentIn(x, y) -> Deposit(x, y) | Deposit(x, MoreThan(y)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & OwnerOf(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tRentIn(OliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) -> (Rent(Tom, x) <-> (AllowPets(x) & CatIn(x, Fluffy) & Deposit(x, LessThanOrEqualTo(1500)))))\nTEXT:\t2000$ is more than $1500.\nFOL:\tMoreThan(2000, 1500)\nTEXT:\tThe security deposit at the Olive Garden is either $2000 or more.\nFOL:\t(Deposit(OliveGarden, 2000) | Deposit(OliveGarden, MoreThan(2000)))\nANSWER:\tTrue\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & AllowPets(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (ManagedBuilding(x) -> (Deposit(x) >= Rent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tRent(OliveGarden) = 2000\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (Rent(Tom, x) <-> (ManagedBuilding(x) & AllowPets(x, Fluffy) & Deposit(x) <= 1500))\nTEXT:\t2000$ is more than $1500.\nFOL:\t2000 > 1500\nTEXT:\tThe security deposit at the Olive Garden is either $2000 or more.\nFOL:\tDeposit(OliveGarden) >= 2000\nANSWER:\tTrue\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & Allow(x, Pets))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequireDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (ManagedBuilding(x) -> (Deposit(x) = Rent(x) | Deposit(x) > Rent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tRent(OliveGarden) = 2000\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. ((Rent(Tom, x) & ManagedBuilding(x)) <-> (Allow(x, Fluffy) & Deposit(x) <= 1500))\nTEXT:\t2000$ is more than $1500.\nFOL:\t2000 > 1500\nTEXT:\tThe security deposit at the Olive Garden is either $2000 or more.\nFOL:\t(Deposit(OliveGarden) = 2000 | Deposit(OliveGarden) > 2000)\nANSWER:\tTrue\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & AllowsPets(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (ManagedBuilding(x) -> (DepositEqualToRent(x) | DepositMoreThanRent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. all y. (Cat(y, x) -> Pet(y, x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tMonthlyRent(OliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (WillRent(Tom, x) <-> (ManagedBuilding(x) & AllowsPets(x) & DepositLessOrEqualTo(x, 1500)))\nTEXT:\t2000$ is more than $1500.\nFOL:\tMore(2000, 1500)\nTEXT:\tThe security deposit at the Olive Garden is either $2000 or more.\nFOL:\t(DepositEqualToRent(OliveGarden, 2000) | DepositMoreThanRent(OliveGarden, 2000))\nANSWER:\tTrue\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & AllowedPets(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (ManagedBuilding(x) -> ((Deposit(x) = Rent(x)) | (Deposit(x) > Rent(x))))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & BelongsTo(Fluffy, Tom)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tRent(OliveGarden) = $2000\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) & WillRent(Tom, x) <-> ((AllowedPets(x) & Pet(Fluffy) & BelongsTo(Fluffy, Tom)) & (Deposit(x) <= $1500)))\nTEXT:\t2000$ is more than $1500.\nFOL:\t$2000 > $1500\nTEXT:\tThe security deposit at the Olive Garden is either $2000 or more.\nFOL:\t(Deposit(OliveGarden) = $2000) | (Deposit(OliveGarden) > $2000)\nANSWER:\tTrue\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & AllowPets(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. all y. (ManagedBuilding(x) & Rent(x, y) -> (Deposit(x, y) | Deposit(x, z) & MoreThan(z, y)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owns(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tRent(OliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) & Renting(Tom, x) <-> (AllowPets(x) & Owns(Tom, Fluffy) & Deposit(x, y) & NotMoreThan(y, 1500)))\nTEXT:\t2000$ is more than $1500.\nFOL:\tMoreThan(2000, 1500)\nTEXT:\tThe security deposit at the Olive Garden is either $2000 or more.\nFOL:\t(Deposit(OliveGarden, 2000) | Deposit(OliveGarden, z) & MoreThan(z, 2000))\nANSWER:\tTrue\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (ManagedBuilding(x) -> (Deposit(x) = Rent(x) | Deposit(x) > Rent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tRent(OliveGarden) = 2000\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) & WillRent(Tom, x) <-> (PetsAllowed(x) & (Deposit(x) <= 1500)))\nTEXT:\t2000$ is more than $1500.\nFOL:\t2000 > 1500\nTEXT:\tThe security deposit at the Olive Garden is either $2000 or more.\nFOL:\tDeposit(OliveGarden) = 2000 | Deposit(OliveGarden) > 2000\nANSWER:\tTrue\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (ManagedBuilding(x) -> (SecurityDeposit(x) = Rent(x) | SecurityDeposit(x) > Rent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tRent(OliveGarden) = 2000\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) & WantsToRent(Tom, x, Fluffy) -> (PetsAllowed(x) & SecurityDeposit(x) <= 1500))\nTEXT:\t2000$ is more than $1500.\nFOL:\t2000 > 1500\nTEXT:\tThe security deposit at the Olive Garden is either $2000 or more.\nFOL:\tSecurityDeposit(OliveGarden) = 2000 | SecurityDeposit(OliveGarden) > 2000\nANSWER:\tTrue\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & AllowsPets(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (Apartment(x) & InManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (SecurityDeposit(x) -> (EqualToOneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & BelongsTo(Fluffy, Tom)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(TheOliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tMonthlyRent(TheOliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (WillRent(Tom, x) & Apartment(x) & InManagedBuilding(x) <-> AllowsPets(x, Fluffy) & SecurityDepositLessOrEqualTo1500(x))\nTEXT:\t2000$ is more than $1500.\nFOL:\tMoreThan(2000, 1500)\nTEXT:\tThe security deposit at the Olive Garden is either $2000 or more.\nFOL:\tSecurityDeposit(TheOliveGarden, 2000) | MoreThan(SecurityDeposit(TheOliveGarden), 2000)\nANSWER:\tTrue\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & AllowsPets(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (RequiresDeposit(x) -> (SecurityDeposit(x) == OneMonthRent(x) | SecurityDeposit(x) > OneMonthRent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tMonthlyRent(OliveGarden) == 2000\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) & WantsToRent(Tom, x) <-> (AllowsPets(x) & SecurityDeposit(x) <= 1500))\nTEXT:\t2000$ is more than $1500.\nFOL:\t2000 > 1500\nTEXT:\tThe security deposit at the Olive Garden is either $2000 or more.\nFOL:\tSecurityDeposit(OliveGarden) == 2000 | SecurityDeposit(OliveGarden) > 2000\nANSWER:\tTrue\n"], ["TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> WearLargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-WearLargeSizeClothes(Yuri)\nTEXT:\tYuri is an American basketball player.\nFOL:\tAmerican(Yuri) & BasketballPlayer(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> WearLargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (WearLargeShoes(x) -> WearLargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-WearLargeClothes(Yuri)\nTEXT:\tYuri is an American basketball player.\nFOL:\tAmerican(Yuri) & BasketballPlayer(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> WearLargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (WearLargeShoes(x) -> WearLargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-WearLargeClothes(Yuri)\nTEXT:\tYuri is an American basketball player.\nFOL:\tAmerican(Yuri) & BasketballPlayer(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tYuri is an American basketball player.\nFOL:\tAmerican(Yuri) & BasketballPlayer(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tYuri is an American basketball player.\nFOL:\tBasketballPlayer(Yuri) & American(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tYuri is an American basketball player.\nFOL:\tAmerican(Yuri) & BasketballPlayer(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tYuri is an American basketball player.\nFOL:\tAmerican(Yuri) & BasketballPlayer(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tYuri is an American basketball player.\nFOL:\tAmerican(Yuri) & BasketballPlayer(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tYuri is an American basketball player.\nFOL:\tAmerican(Yuri) & BasketballPlayer(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tYuri is an American basketball player.\nFOL:\tAmerican(Yuri) & BasketballPlayer(Yuri)\nANSWER:\tUncertain\n"], ["TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tBreedingBack(HeckCattle) & Resemble(HeckCattle, Aurochs)\nTEXT:\t[BG] Heck cattle are animals.\nFOL:\tAnimal(HeckCattle)\nTEXT:\t[BG] Aurochs are animals.\nFOL:\tAnimal(Aurochs)\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. (Animal(x) & BreedingBack(x) & Resemble(x, ExtinctAnimals))\nTEXT:\tSome Heck cattle are artificially selected.\nFOL:\texists x. (HeckCattle(x) & ArtificialSelection(x))\nANSWER:\tTrue\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. all y. (BredBack(x) & DomesticAnimal(y) -> ArtificiallySelected(y))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tBredBack(HeckCattle) & Resemble(HeckCattle, Aurochs)\nTEXT:\tHeck cattle are animals.\nFOL:\tAnimal(HeckCattle)\nTEXT:\tAurochs are animals.\nFOL:\tAnimal(Aurochs)\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. exists y. (Animal(x) & BredBack(x) & Resemble(x, y) & Extinct(y))\nTEXT:\tSome Heck cattle are artificially selected.\nFOL:\texists x. (HeckCattle(x) & ArtificiallySelected(x))\nANSWER:\tTrue\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. (BredBack(x) -> ArtificiallySelected(x))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tBredBack(HeckCattle)\nTEXT:\tHeck cattle are animals.\nFOL:\tAnimal(HeckCattle)\nTEXT:\tAurochs are animals.\nFOL:\tAnimal(Aurochs)\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. (Animal(x) & BredBack(x) & Resemble(x, ExtinctAnimals))\nTEXT:\tSome Heck cattle are artificially selected.\nFOL:\tArtificiallySelected(HeckCattle)\nANSWER:\tTrue\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. (BredBack(x) -> ArtificiallySelected(x))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tBredBack(HeckCattle)\nTEXT:\tHeck cattle are animals.\nFOL:\tAnimal(HeckCattle)\nTEXT:\tAurochs are animals.\nFOL:\tAnimal(Aurochs)\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. exists y. (Animal(x) & BredBack(x) & Resemble(x, y) & Extinct(y))\nTEXT:\tSome Heck cattle are artificially selected.\nFOL:\tArtificiallySelected(HeckCattle)\nANSWER:\tTrue\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tBreedingBack(HeckCattle)\nTEXT:\tHeck cattle are animals.\nFOL:\tAnimal(HeckCattle)\nTEXT:\tAurochs are animals.\nFOL:\tAnimal(Aurochs)\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. (Animal(x) & ToBeBredBack(x) -> Resemble(x, ExtinctAnimals))\nTEXT:\tSome Heck cattle are artificially selected.\nFOL:\tArtificialSelection(HeckCattle)\nANSWER:\tTrue\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tBreedingBack(HeckCattle)\nTEXT:\tHeck cattle are animals.\nFOL:\tAnimal(HeckCattle)\nTEXT:\tAurochs are animals.\nFOL:\tAnimal(Aurochs)\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. (Animal(x) & ToBeBredBack(x) & Resemble(x, ExtinctAnimals))\nTEXT:\tSome Heck cattle are artificially selected.\nFOL:\tArtificialSelection(HeckCattle)\nANSWER:\tTrue\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\texists x. (BreedingBack(x) & ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimals(x))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\texists x. (HeckCattle(x) & BredBackIn1920s(x) & Resemble(x, Aurochs))\nTEXT:\tHeck cattle are animals.\nFOL:\tall x. (HeckCattle(x) -> Animal(x))\nTEXT:\tAurochs are animals.\nFOL:\tall x. (Aurochs(x) -> Animal(x))\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. exists y. (Animal(x) & ToBeBredBack(x) & Resemble(x, y) & Extinct(y))\nTEXT:\tSome Heck cattle are artificially selected.\nFOL:\texists x. (HeckCattle(x) & ArtificialSelection(x))\nANSWER:\tTrue\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. (BredBack(x) -> ArtificiallySelected(x))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tArtificiallySelected(HeckCattle) & Resembles(HeckCattle, Aurochs)\nTEXT:\t[BG] Heck cattle are animals.\nFOL:\tAnimal(HeckCattle)\nTEXT:\t[BG] Aurochs are animals.\nFOL:\tAnimal(Aurochs)\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. (Animal(x) & BredBack(x) & ResembleExtinctAnimal(x))\nTEXT:\tSome Heck cattle are artificially selected.\nFOL:\tArtificiallySelected(HeckCattle)\nANSWER:\tTrue\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tBreedingBack(HeckCattle) & Resemble(HeckCattle, Aurochs)\nTEXT:\tHeck cattle are animals.\nFOL:\tAnimal(HeckCattle)\nTEXT:\tAurochs are animals.\nFOL:\tAnimal(Aurochs)\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. (Animal(x) & BreedingBack(x) & Resemble(x, ExtinctAnimals))\nTEXT:\tSome Heck cattle are artificially selected.\nFOL:\tArtificialSelection(HeckCattle)\nANSWER:\tTrue\n", "TEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tall x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\tBreedingBack(HeckCattle)\nTEXT:\tHeck cattle are animals.\nFOL:\tAnimal(HeckCattle)\nTEXT:\tAurochs are animals.\nFOL:\tAnimal(Aurochs)\nTEXT:\tSome animals to be bred-back resemble animals that are extinct.\nFOL:\texists x. (Animal(x) & ToBeBredBack(x) & Resemble(x, ExtinctAnimals))\nTEXT:\tSome Heck cattle are artificially selected.\nFOL:\texists x. (HeckCattle(x) & ArtificiallySelected(x))\nANSWER:\tTrue\n"], ["TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & AllowsPets(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (RequiresDeposit(x) -> (Deposit(x) = Rent(x) | Deposit(x) > Rent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owns(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tRent(OliveGarden) = 2000\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (WillRent(Tom, x) <-> ManagedBuilding(x) & AllowsPets(x) & Deposit(x) <= 1500)\nTEXT:\t2000$ is more than $1500.\nFOL:\t2000 > 1500\nTEXT:\tTom will rent an apartment in The Olive Garden.\nFOL:\tWillRent(Tom, OliveGarden)\nANSWER:\tFalse\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (ManagedBuilding(x) -> ((DepositEqualOneMonthRent(x) | DepositMoreThanOneMonthRent(x))))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tMonthlyRent(OliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) -> (WillRent(Tom, x) <-> (PetsAllowed(x) & CanMoveIn(Tom, Fluffy, x) & (DepositNoMoreThan(x, 1500)))))\nTEXT:\t2000$ is more than $1500.\nFOL:\tGreaterThan(2000, 1500)\nTEXT:\tTom will rent an apartment in The Olive Garden.\nFOL:\tWillRent(Tom, OliveGarden)\nANSWER:\tFalse\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (Rent(x) -> Deposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (Deposit(x) -> Rent(x) | MoreThanRent(x))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & BelongsTo(Fluffy, Tom)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(TheOliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tRent(TheOliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (Rent(Tom, x) <-> ManagedBuilding(x) & MoveInWithPet(x, Fluffy, Tom) & DepositNotMoreThan(x, 1500))\nTEXT:\t2000$ is more than $1500.\nFOL:\tMoreThan(2000, 1500)\nTEXT:\tTom will rent an apartment in The Olive Garden.\nFOL:\tRent(Tom, TheOliveGarden)\nANSWER:\tFalse\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & AllowPets(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequireDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (RequireDeposit(x) -> (DepositEqualToRent(x) | DepositMoreThanRent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & PetOf(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tRent(OliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) & AllowPets(x) & DepositLessThanOrEqualTo(x, 1500) <-> WillRent(Tom, x))\nTEXT:\t2000$ is more than $1500.\nFOL:\t2000 > 1500\nTEXT:\tTom will rent an apartment in The Olive Garden.\nFOL:\tWillRent(Tom, OliveGarden)\nANSWER:\tFalse\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & AllowPets(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequireDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. all y. (ManagedBuilding(x) & Rent(x, y) -> (Deposit(x, y) | Deposit(x, z) & MoreThan(z, y)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(TheOliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tRent(TheOliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) -> (WillRent(Tom, x) <-> AllowMoveInWithPet(x, Fluffy) & Deposit(x, y) & LessThanEqual(y, 1500)))\nTEXT:\t2000$ is more than $1500.\nFOL:\tMoreThan(2000, 1500)\nTEXT:\tTom will rent an apartment in The Olive Garden.\nFOL:\tWillRent(Tom, TheOliveGarden)\nANSWER:\tFalse\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & AllowedPets(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (ManagedBuilding(x) -> (DepositEqualOneMonthRent(x) | DepositMoreThanOneMonthRent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & PetOf(Fluffy, Tom)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tMonthlyRent(OliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) -> ((Rent(Tom, x) & AllowedPets(x) & PetOf(Fluffy, Tom) & DepositLessOrEqualTo(x, 1500)) <-> Rent(Tom, x)))\nTEXT:\t2000$ is more than $1500.\nFOL:\tMoreThan(2000, 1500)\nTEXT:\tTom will rent an apartment in The Olive Garden.\nFOL:\tRent(Tom, OliveGarden)\nANSWER:\tFalse\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & Allows(x, Pets))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (ManagedBuilding(x) -> (SecurityDeposit(x) = MonthlyRent(x) | SecurityDeposit(x) > MonthlyRent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tMonthlyRent(OliveGarden) = $2000\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tforall x. (ManagedBuilding(x) -> (Rents(Tom, x) <-> (Allows(x, Fluffy) & SecurityDeposit(x) <= $1500)))\nTEXT:\t2000$ is more than $1500.\nFOL:\t$2000 > $1500\nTEXT:\tTom will rent an apartment in The Olive Garden.\nFOL:\tRents(Tom, OliveGarden)\nANSWER:\tFalse\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & AllowPets(x))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. all y. ((Rent(x, y) & ManagedBuilding(x)) -> Deposit(x, y) | Deposit(x, z) & MoreThan(z, y))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tRent(OliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) -> (Rent(Tom, x) <-> (AllowPets(x) & Deposit(x, y) & LessThanOrEqualTo(y, 1500))))\nTEXT:\t2000$ is more than $1500.\nFOL:\tMoreThan(2000, 1500)\nTEXT:\tTom will rent an apartment in The Olive Garden.\nFOL:\tRent(Tom, OliveGarden)\nANSWER:\tFalse\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & Allows(x, Pets))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (ManagedBuilding(x) -> (DepositEqualsRent(x) | DepositMoreThanRent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(TheOliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tMonthlyRent(TheOliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (ManagedBuilding(x) & Allows(x, Fluffy) & DepositLessOrEqual1500(x) <-> Rent(Tom, x))\nTEXT:\t2000$ is more than $1500.\nFOL:\t2000 > 1500\nTEXT:\tTom will rent an apartment in The Olive Garden.\nFOL:\tRent(Tom, TheOliveGarden)\nANSWER:\tFalse\n", "TEXT:\tPets are allowed in some managed buildings.\nFOL:\texists x. (ManagedBuilding(x) & Allows(x, Pets))\nTEXT:\tA deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (ManagedBuilding(x) -> RequiresDeposit(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. all y. (Rent(x, y) -> (Deposit(x) = y | Deposit(x) > y))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tCat(Fluffy) & Owner(Tom, Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tRent(OliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (WillRent(Tom, x) <-> (ManagedBuilding(x) & Allows(x, Fluffy) & (Deposit(x) <= 1500)))\nTEXT:\t2000$ is more than $1500.\nFOL:\t2000 > 1500\nTEXT:\tTom will rent an apartment in The Olive Garden.\nFOL:\tWillRent(Tom, OliveGarden)\nANSWER:\tFalse\n"], ["TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (Published(NewVesselPress, x) -> TranslatedIntoEnglish(x))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (Published(NewVesselPress, x) -> EnglishBook(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublished(NewVesselPress, NeapolitanChronicles)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublished(NewVesselPress, PalaceOfFlies)\nTEXT:\tNeapolitan Chronicles is an English book.\nFOL:\tEnglishBook(NeapolitanChronicles)\nANSWER:\tTrue\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> TranslatedIntoEnglish(x))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tNeapolitan Chronicles is an English book.\nFOL:\tInEnglish(NeapolitanChronicles)\nANSWER:\tTrue\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\texists x. (NewVesselPress(x) & PublishingHouse(x) & Specializes(x, TranslatingForeignLiteratureIntoEnglish))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> English(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tBook(NeapolitanChronicles) & PublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tBook(PalaceOfFlies) & PublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tNeapolitan Chronicles is an English book.\nFOL:\tEnglish(NeapolitanChronicles)\nANSWER:\tTrue\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (PublishedByNewVesselPress(x) -> TranslatedIntoEnglish(x))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedByNewVesselPress(x) -> EnglishBook(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedByNewVesselPress(NeapolitanChronicles)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFromItalian(NeapolitanChronicles)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedByNewVesselPress(PalaceOfFlies)\nTEXT:\tNeapolitan Chronicles is an English book.\nFOL:\tEnglishBook(NeapolitanChronicles)\nANSWER:\tTrue\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> TranslatedIntoEnglish(x))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tNeapolitan Chronicles is an English book.\nFOL:\tInEnglish(NeapolitanChronicles)\nANSWER:\tTrue\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (Publishes(NewVesselPress, x) -> TranslatesIntoEnglish(x))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (Publishes(NewVesselPress, x) -> EnglishBook(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishes(NewVesselPress, NeapolitanChronicles)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatesFromItalian(NeapolitanChronicles)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishes(NewVesselPress, PalaceOfFlies)\nTEXT:\tNeapolitan Chronicles is an English book.\nFOL:\tEnglishBook(NeapolitanChronicles)\nANSWER:\tTrue\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (PublishedByNewVesselPress(x) -> TranslatedIntoEnglish(x))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedByNewVesselPress(x) -> EnglishBook(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedByNewVesselPress(NeapolitanChronicles)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFromItalian(NeapolitanChronicles)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedByNewVesselPress(PalaceOfFlies)\nTEXT:\tNeapolitan Chronicles is an English book.\nFOL:\tEnglishBook(NeapolitanChronicles)\nANSWER:\tTrue\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (NewVesselPress(x) -> SpecializesIn(x, TranslatingForeignLiteratureIntoEnglish))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> EnglishBook(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tNeapolitan Chronicles is an English book.\nFOL:\tEnglishBook(NeapolitanChronicles)\nANSWER:\tTrue\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> TranslatedInto(x, English))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> English(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tNeapolitan Chronicles is an English book.\nFOL:\tEnglish(NeapolitanChronicles)\nANSWER:\tTrue\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tForall x. (PublishingHouse(x, NewVesselPress) -> SpecializesIn(x, TranslatingForeignLiteratureIntoEnglish))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tForall x. (PublishedBy(x, NewVesselPress) -> EnglishBook(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tNeapolitan Chronicles is an English book.\nFOL:\tEnglishBook(NeapolitanChronicles)\nANSWER:\tTrue\n"], ["TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainsKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Person(x) & Book(y) & Reads(x, y) -> GainsKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (Person(x) & GainsKnowledge(x) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tPerson(Harry) & Book(Walden) & Reads(Harry, Walden)\nTEXT:\tWalden contains knowledge.\nFOL:\tContainsKnowledge(Walden)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainsKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Reads(x, y) & Book(y) -> GainsKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (GainsKnowledge(x) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden) & Book(Walden)\nTEXT:\tWalden contains knowledge.\nFOL:\tContainsKnowledge(Walden)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainsKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Person(x) & Reads(x, y) & Book(y) -> GainsKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (GainsKnowledge(x) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tBook(Walden) & Reads(Harry, Walden)\nTEXT:\tWalden contains knowledge.\nFOL:\tContainsKnowledge(Walden)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainsKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Person(x) & Reads(x, y) & Book(y) -> GainsKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (Person(x) & GainsKnowledge(x) -> BecomesSmarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tWalden contains knowledge.\nFOL:\tContainsKnowledge(Walden)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainsKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Reads(x, y) & Book(y) -> GainsKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (GainsKnowledge(x) -> BecomesSmarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden) & Book(Walden)\nTEXT:\tWalden contains knowledge.\nFOL:\tContainsKnowledge(Walden)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Read(x, y) & Book(y) -> GainKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (GainKnowledge(x) -> BecomeSmarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tRead(Harry, Walden) & Book(Walden)\nTEXT:\tWalden contains knowledge.\nFOL:\tContainKnowledge(Walden)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainsKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Reads(x, y) & Book(y) -> GainsKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (GainsKnowledge(x) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden) & Book(Walden)\nTEXT:\tWalden contains knowledge.\nFOL:\tContainsKnowledge(Walden)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainsKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Reads(x, y) & Book(y) -> GainsKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (GainsKnowledge(x) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden) & Book(Walden)\nTEXT:\tWalden contains knowledge.\nFOL:\tContainsKnowledge(Walden)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> Contains(x, Knowledge))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Reads(y, x) & Book(x) -> Gains(y, Knowledge))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (Gains(x, Knowledge) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tWalden contains knowledge.\nFOL:\tContains(Walden, Knowledge)\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Read(x, y) & Book(y) -> GainKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (GainKnowledge(x) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tRead(Harry, Walden)\nTEXT:\tWalden contains knowledge.\nFOL:\tContainKnowledge(Walden)\nANSWER:\tTrue\n"], ["TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellOverOneMillion(x) -> Top10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellOverOneMillion(LegendOfZelda)\nTEXT:\tFIFA 22 is made by a Japanese video game company.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, FIFA22))\nANSWER:\tUncertain\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10(x) -> exists y. (JapaneseGameCompany(y) & Made(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (Sells(x, MoreThanMillion) -> Top10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSells(LegendOfZelda, MoreThanMillion)\nTEXT:\tFIFA 22 is made by a Japanese video game company.\nFOL:\texists x. (JapaneseGameCompany(x) & Made(x, FIFA22))\nANSWER:\tUncertain\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, TheLegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10List(x) -> exists y. (JapaneseGameCompany(y) & MadeBy(x, y)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellsMoreThanOneMillionCopies(x) -> Top10List(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMoreThanOneMillionCopies(TheLegendOfZelda)\nTEXT:\tFIFA 22 is made by a Japanese video game company.\nFOL:\texists x. (JapaneseGameCompany(x) & MadeBy(FIFA22, x))\nANSWER:\tUncertain\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellsMoreThan1Million(x) -> Top10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMoreThan1Million(LegendOfZelda)\nTEXT:\tFIFA 22 is made by a Japanese video game company.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, FIFA22))\nANSWER:\tUncertain\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellsMoreThanOneMillionCopies(x) -> Top10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMoreThanOneMillionCopies(LegendOfZelda)\nTEXT:\tFIFA 22 is made by a Japanese video game company.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, FIFA22))\nANSWER:\tUncertain\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10List(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\t[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellsMoreThanMillionCopies(x) -> Top10List(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMoreThanMillionCopies(LegendOfZelda)\nTEXT:\tFIFA 22 is made by a Japanese video game company.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, FIFA22))\nANSWER:\tUncertain\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellsMoreThanOneMillion(x) -> Top10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMoreThanOneMillion(LegendOfZelda)\nTEXT:\tFIFA 22 is made by a Japanese video game company.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, FIFA22))\nANSWER:\tUncertain\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, TheLegendofZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10Game(x) -> exists y. (JapaneseGameCompany(y) & MadeBy(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (SellMoreThanOneMillion(x) -> Top10Game(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellMoreThanOneMillion(TheLegendofZelda)\nTEXT:\tFIFA 22 is made by a Japanese video game company.\nFOL:\texists x. (JapaneseGameCompany(x) & MadeBy(x, Fifa22))\nANSWER:\tUncertain\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\tJapaneseGameCompany(LegendOfZelda)\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT:\t[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (Sells(x, MoreThanOneMillion) -> Top10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSells(LegendOfZelda, MoreThanOneMillion)\nTEXT:\tFIFA 22 is made by a Japanese video game company.\nFOL:\tJapaneseGameCompany(FIFA22)\nANSWER:\tUncertain\n", "TEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10(x) -> exists y. (JapaneseGameCompany(y) & Created(y, x)))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (Sold(x, OneMillion) -> Top10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSold(LegendOfZelda, OneMillion)\nTEXT:\tFIFA 22 is made by a Japanese video game company.\nFOL:\texists x. (JapaneseGameCompany(x) & Created(x, FIFA22))\nANSWER:\tUncertain\n"], ["TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tHasAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George likes music and has access to a program, he will compose.\nFOL:\t(LikesMusic(George) & HasAccessToProgram(George)) -> WillCompose(George)\nANSWER:\tTrue\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tHasAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George likes music and has access to a program, he will compose.\nFOL:\t(LikesMusic(George) & HasAccessToProgram(George)) -> WillCompose(George)\nANSWER:\tTrue\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\tCanCompose(George) & WantsToCompose(George) -> WillCompose(George)\nTEXT:\tIf George likes music and has access to a program, he will compose.\nFOL:\tLikesMusic(George) & AccessToProgram(George) -> WillCompose(George)\nANSWER:\tTrue\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tHasAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George likes music and has access to a program, he will compose.\nFOL:\t(LikesMusic(George) & HasAccessToProgram(George)) -> WillCompose(George)\nANSWER:\tTrue\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tHasAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George likes music and has access to a program, he will compose.\nFOL:\t(LikesMusic(George) & HasAccessToProgram(George)) -> WillCompose(George)\nANSWER:\tTrue\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tHasAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George likes music and has access to a program, he will compose.\nFOL:\t(LikesMusic(George) & HasAccessToProgram(George)) -> WillCompose(George)\nANSWER:\tTrue\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tHasAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George likes music and has access to a program, he will compose.\nFOL:\t(LikesMusic(George) & HasAccessToProgram(George)) -> WillCompose(George)\nANSWER:\tTrue\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tHasAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George likes music and has access to a program, he will compose.\nFOL:\t(LikesMusic(George) & HasAccessToProgram(George)) -> WillCompose(George)\nANSWER:\tTrue\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tHasAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George likes music and has access to a program, he will compose.\nFOL:\t(LikesMusic(George) & HasAccessToProgram(George)) -> WillCompose(George)\nANSWER:\tTrue\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tHasAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George likes music and has access to a program, he will compose.\nFOL:\t(LikesMusic(George) & HasAccessToProgram(George)) -> WillCompose(George)\nANSWER:\tTrue\n"], ["TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, duMaurierClassic1992)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, duMaurierClassic1992)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\tSixWayTie(duMaurierClassic1992) & exists x. (From(x, Belgium) & InLeaderboard(x, duMaurierClassic1992))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & InLeaderboard(Descampe, duMaurierClassic1992)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (InLeaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT:\tSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL:\t-Winner(Steinhauer, duMaurierClassic1992)\nANSWER:\tFalse\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, 1992DuMaurierClassic)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, 1992DuMaurierClassic)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\texists x. (SixWayTie(x, 1992DuMaurierClassic) & From(x, Belgium))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & Leaderboard(Descampe, 1992DuMaurierClassic)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (Leaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT:\tSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL:\t-Winner(Steinhauer, 1992DuMaurierClassic)\nANSWER:\tFalse\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, 1992DuMaurierClassic)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, 1992DuMaurierClassic)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\texists x. (SixWayTie(x, Leaderboard) & From(x, Belgium))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & OnLeaderboard(Descampe, 1992DuMaurierClassic)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (OnLeaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT:\tSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL:\t-Winner(Steinhauer, 1992DuMaurierClassic)\nANSWER:\tFalse\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, duMaurierClassic1992)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipant(Steinhauer, duMaurierClassic1992)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\texists x. (Tie(x, 6, Leaderboard(duMaurierClassic1992)) & From(x, Belgium))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & OnLeaderboard(Descampe, duMaurierClassic1992)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (OnLeaderboard(x, duMaurierClassic1992) -> Participant(x, duMaurierClassic1992))\nTEXT:\tSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL:\t-Winner(Steinhauer, duMaurierClassic1992)\nANSWER:\tFalse\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, duMaurierClassic1992)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, duMaurierClassic1992)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\tSixWayTie(duMaurierClassic1992) & exists x. (OnLeaderboard(x, duMaurierClassic1992) & FromBelgium(x))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFromBelgium(Descampe) & OnLeaderboard(Descampe, duMaurierClassic1992)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (OnLeaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT:\tSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL:\t- Winner(Steinhauer, duMaurierClassic1992)\nANSWER:\tFalse\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, duMaurierClassic1992)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, duMaurierClassic1992)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\texists x. SixWayTie(x, duMaurierClassic1992) & From(x, Belgium)\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & Leaderboard(Descampe, duMaurierClassic1992)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (Leaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT:\tSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL:\t-Winner(Steinhauer, duMaurierClassic1992)\nANSWER:\tFalse\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, duMaurierClassic1992)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, duMaurierClassic1992)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\texists x. (SixWayTie(x, Leaderboard, duMaurierClassic1992) & From(x, Belgium))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & OnLeaderboard(Descampe, duMaurierClassic1992)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (OnLeaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT:\tSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL:\t-Winner(Steinhauer, duMaurierClassic1992)\nANSWER:\tFalse\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(duMaurierClassic1992, Steinhauer)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, duMaurierClassic1992)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\tSixWayTie(duMaurierClassic1992, y) & From(y, Belgium)\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & OnLeaderboard(Descampe, duMaurierClassic1992)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (OnLeaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT:\tSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL:\t-Winner(duMaurierClassic1992, Steinhauer)\nANSWER:\tFalse\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, duMaurierClassic1992)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, duMaurierClassic1992)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\texists x. (SixWayTie(x, duMaurierClassic1992) & From(x, Belgium))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & OnLeaderboard(Descampe, duMaurierClassic1992)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (OnLeaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT:\tSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL:\t- Winner(Steinhauer, duMaurierClassic1992)\nANSWER:\tFalse\n", "TEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\tWinner(Steinhauer, 1992DuMaurierClassic)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, 1992DuMaurierClassic)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\texists x. (Tie(x, 1992DuMaurierClassic) & From(x, Belgium))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\tFrom(Descampe, Belgium) & OnLeaderboard(Descampe, 1992DuMaurierClassic)\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (OnLeaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT:\tSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL:\t-Winner(Steinhauer, 1992DuMaurierClassic)\nANSWER:\tFalse\n"], ["TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> Child(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParis(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParis(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tChild(John) -> (-TravelToParis(John) & -Wedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(Wedding(John) & WellAttended(John)) -> (WeddingInJuly(John) | TravelToParis(John))\nTEXT:\tJohn has at least one child.\nFOL:\tChild(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (HasWedding(x) -> HasChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (HoneymoonParis(x) -> HasWedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (JulyWedding(x) -> HoneymoonParis(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (JulyWedding(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHasChild(John) -> -HoneymoonParis(John) & -HasWedding(John)\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\tHasWedding(John) & WellAttended(John) -> (JulyWedding(John) | HoneymoonParis(John))\nTEXT:\tJohn has at least one child.\nFOL:\tHasChild(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> HaveChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHaveChild(John) -> (-TravelToParisForHoneymoon(John) & -Wedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(Wedding(John) & WellAttended(John)) -> (WeddingInJuly(John) | TravelToParisForHoneymoon(John))\nTEXT:\tJohn has at least one child.\nFOL:\tHaveChild(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> Child(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParisHoneymoon(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParisHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tChild(John) -> (-TravelToParisHoneymoon(John) & -Wedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(Wedding(John) & WellAttended(John)) -> (WeddingInJuly(John) | TravelToParisHoneymoon(John))\nTEXT:\tJohn has at least one child.\nFOL:\tChild(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> Child(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (ParisHoneymoon(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (JulyWedding(x) -> ParisHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (JulyWedding(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tChild(John) -> -ParisHoneymoon(John) & -Wedding(John)\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\tWellAttendedWedding(John) -> (JulyWedding(John) | ParisHoneymoon(John))\nTEXT:\tJohn has at least one child.\nFOL:\tChild(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> HaveChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParisHoneymoon(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParisHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHaveChild(John) -> (-TravelToParisHoneymoon(John) & -Wedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(Wedding(John) & WellAttended(John)) -> (WeddingInJuly(John) | TravelToParisHoneymoon(John))\nTEXT:\tJohn has at least one child.\nFOL:\tHaveChild(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParis(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParis(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHasAtLeastOneChild(John) -> (-TravelToParis(John) & -Wedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(Wedding(John) & WellAttended(John)) -> (WeddingInJuly(John) | TravelToParis(John))\nTEXT:\tJohn has at least one child.\nFOL:\tHasAtLeastOneChild(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> HaveChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParis(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParis(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHaveChild(John) -> (-TravelToParis(John) & -Wedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(Wedding(John) & WellAttended(John)) -> (WeddingInJuly(John) | TravelToParis(John))\nTEXT:\tJohn has at least one child.\nFOL:\tHaveChild(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> Child(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParis(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (JulyWedding(x) -> TravelToParis(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (JulyWedding(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tChild(John) -> (-TravelToParis(John) & -Wedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(Wedding(John) & WellAttended(John)) -> (JulyWedding(John) | TravelToParis(John))\nTEXT:\tJohn has at least one child.\nFOL:\tChild(John)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tAtLeastOneChild(John) -> -TravelToParisForHoneymoon(John) & -Wedding(John)\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\tWellAttended(John) & Wedding(John) -> WeddingInJuly(John) | TravelToParisForHoneymoon(John)\nTEXT:\tJohn has at least one child.\nFOL:\tAtLeastOneChild(John)\nANSWER:\tUncertain\n"], ["TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAiltonSilva = Ailton\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tFootballPlayer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton was not loaned out to a football club.\nFOL:\tall x. (FootballClub(x) -> -LoanedOutTo(Ailton, x))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\t((AiltonSilva(x) & Born(x, 1995)) -> KnownAs(x, Ailton))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\t((FootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\t((AiltonSilva(x) & Brazillian(x) & Footballer(x)) -> PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton was not loaned out to a football club.\nFOL:\t-(LoanedOutTo(Ailton, y) & FootballClub(y))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (AiltonSilva(x) & Born(x, 1995) & CommonlyKnownAs(x, Ailton))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\texists x. (Ailton(x) & FootballPlayer(x) & LoanedOutTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tall x. (AiltonSilva(x) -> (BrazilianFootballer(x) & PlaysFor(x, Nautico)))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton was not loaned out to a football club.\nFOL:\tall x. (Ailton(x) -> -LoanedOutTo(x, y) where FootballClub(y))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAilton = AiltonSilva & Born(AiltonSilva, 1995)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tFootballPlayer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico) & Brazilian(AiltonSilva)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton was not loaned out to a football club.\nFOL:\t-Exists x. (FootballClub(x) & LoanedOutTo(Ailton, x))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (Ailton(x) & BornIn(x, 1995))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\texists x. (Ailton(x) & FootballPlayer(x) & LoanedOutTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\texists x. (Ailton(x) & FootballPlayer(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton was not loaned out to a football club.\nFOL:\tall x. (Ailton(x) -> -LoanedOutTo(x, FootballClub))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tall x. (Born(x, 1995) & CommonlyKnownAs(x, Ailton) -> AiltonSilva(x))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tall x. (Ailton(x) -> FootballPlayer(x) & LoanedOutTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tall x. (AiltonSilva(x) -> BrazilianFootballer(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton was not loaned out to a football club.\nFOL:\tall x. (Ailton(x) -> -LoanedOutTo(x, FootballClub))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAilton = AiltonSilva & Born(AiltonSilva, 1995)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tAiltonSilva = Ailton & Footballer(Ailton) & Brazillian(Ailton) & PlaysFor(Ailton, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton was not loaned out to a football club.\nFOL:\tall x. (FootballClub(x) -> -LoanedOutTo(Ailton, x))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (BornIn(x, 1995) & CommonlyKnownAs(x, Ailton))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton was not loaned out to a football club.\nFOL:\t-LoanedOutTo(Ailton, x) where x is a FootballClub\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (Born(x, 1995) & KnownAs(x, Ailton))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tall x. (KnownAs(x, Ailton) -> (FootballPlayer(x) & LoanedOutTo(x, Braga)))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tall x. (KnownAs(x, Ailton) -> (Footballer(x) & PlaysFor(x, Nautico)))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton was not loaned out to a football club.\nFOL:\tall x. (KnownAs(x, Ailton) -> -LoanedOutTo(x, y. FootballClub(y)))\nANSWER:\tFalse\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tBorn(AiltonSilva, 1995) & KnownAs(AiltonSilva, Ailton)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tBrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton was not loaned out to a football club.\nFOL:\t-Exists x. (FootballClub(x) & LoanedOutTo(Ailton, x))\nANSWER:\tFalse\n"], ["TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a soccer player.\nFOL:\tSoccerPlayer(RobertLewandowski)\nANSWER:\tTrue\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a soccer player.\nFOL:\tSoccerPlayer(RobertLewandowski)\nANSWER:\tTrue\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a soccer player.\nFOL:\tSoccerPlayer(RobertLewandowski)\nANSWER:\tTrue\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a soccer player.\nFOL:\tSoccerPlayer(RobertLewandowski)\nANSWER:\tTrue\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a soccer player.\nFOL:\tSoccerPlayer(RobertLewandowski)\nANSWER:\tTrue\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a soccer player.\nFOL:\tSoccerPlayer(RobertLewandowski)\nANSWER:\tTrue\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a soccer player.\nFOL:\tSoccerPlayer(RobertLewandowski)\nANSWER:\tTrue\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a soccer player.\nFOL:\tSoccerPlayer(RobertLewandowski)\nANSWER:\tTrue\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlaysFor(x, y))\nTEXT:\tRobert Lewandowski is a soccer player.\nFOL:\tSoccerPlayer(RobertLewandowski)\nANSWER:\tTrue\n", "TEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLeft(RobertLewandowski, BayernMunchen)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. all y. (Left(x, y) -> -PlayFor(x, y))\nTEXT:\tRobert Lewandowski is a soccer player.\nFOL:\tSoccerPlayer(RobertLewandowski)\nANSWER:\tTrue\n"], ["TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. (BornInAmericanCity(x) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. ((Book(x) & Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tFamily Secrets is a novel.\nFOL:\tNovel(FamilySecrets)\nANSWER:\tFalse\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. (BornIn(x, AmericanCity) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. ((Book(x) & Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tFamily Secrets is a novel.\nFOL:\tNovel(FamilySecrets)\nANSWER:\tFalse\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. (BornInAmericanCity(x) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. ((Book(x) & Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenInYear(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tFamily Secrets is a novel.\nFOL:\tNovel(FamilySecrets)\nANSWER:\tFalse\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. (BornIn(x, AmericanCity) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. ((Book(x) & Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tFamily Secrets is a novel.\nFOL:\tNovel(FamilySecrets)\nANSWER:\tFalse\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. (BornInAmericanCity(x) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. ((Book(x) & Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tFamily Secrets is a novel.\nFOL:\tNovel(FamilySecrets)\nANSWER:\tFalse\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. (BornInAmericanCity(x) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. (Book(x) & Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tFamily Secrets is a novel.\nFOL:\tNovel(FamilySecrets)\nANSWER:\tFalse\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. (BornInAmericanCity(x) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. ((Book(x) & Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tFamily Secrets is a novel.\nFOL:\tNovel(FamilySecrets)\nANSWER:\tFalse\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. (BornInAmericanCity(x) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. (Book(x) & Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tFamily Secrets is a novel.\nFOL:\tNovel(FamilySecrets)\nANSWER:\tFalse\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. (BornInAmericanCity(x) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. ((Book(x) & Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenInYear(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tFamily Secrets is a novel.\nFOL:\tNovel(FamilySecrets)\nANSWER:\tFalse\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. (BornInAmericanCity(x) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. ((Book(x) & Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmericanWriter(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tFamily Secrets is a novel.\nFOL:\tNovel(FamilySecrets)\nANSWER:\tFalse\n"], ["TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. Turtle(x)\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle.\nFOL:\tTurtle(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. Turtle(x)\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle.\nFOL:\tTurtle(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle.\nFOL:\tTurtle(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle.\nFOL:\tTurtle(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle.\nFOL:\tTurtle(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle.\nFOL:\tTurtle(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle.\nFOL:\tTurtle(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. Turtle(x)\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. Animal(x) -> (Rabbit(x) | Squirrel(x))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle.\nFOL:\tTurtle(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. ((Animal(x) & -Squirrel(x)) -> Rabbit(x)) & ((Animal(x) & -Rabbit(x)) -> Squirrel(x))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle.\nFOL:\tTurtle(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists x. Turtle(x)\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\tall x. (Animal(x) -> Rabbit(x) | Squirrel(x))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle.\nFOL:\tTurtle(Rock)\nANSWER:\tUncertain\n"], ["TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tExists x. (Born(x, 1995) & KnownAs(x, Ailton))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tExists x. (FootballPlayer(x) & KnownAs(x, Ailton) & LoanedTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tExists x. (FootballPlayer(x) & KnownAs(x, Ailton) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva played for Fluminense.\nFOL:\tExists x. (FootballPlayer(x) & KnownAs(x, Ailton) & PlayedFor(x, Fluminense))\nANSWER:\tUncertain\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tall x. ((x = 'Ailton Silva' | x = 'Ailton') -> BornIn(x, 1995))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tall x. (x = 'Ailton' -> (FootballPlayer(x) & LoanedOutTo(x, 'Braga')))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tall x. (x = 'Ailton Silva' -> (FootballPlayer(x) & PlaysFor(x, 'Nautico') & Nationality(x, 'Brazil')))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub('Nautico') & FootballClub('Braga')\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub('Fluminense')\nTEXT:\tAilton Silva played for Fluminense.\nFOL:\tPlayedFor('Ailton Silva', 'Fluminense')\nANSWER:\tUncertain\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (Person(x) & Name(x, \"Ailton Silva\") & Nickname(x, \"Ailton\") & BirthYear(x, 1995))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\texists x. (Person(x) & Nickname(x, \"Ailton\") & Profession(x, \"Football player\") & LoanedTo(x, \"Braga\"))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\texists x. (Person(x) & Name(x, \"Ailton Silva\") & Nationality(x, \"Brazilian\") & Profession(x, \"Football player\") & PlaysFor(x, \"Nautico\"))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\texists x, y. (FootballClub(x) & Name(x, \"Nautico\") & FootballClub(y) & Name(y, \"Braga\"))\nTEXT:\tFluminense is a football club.\nFOL:\texists x. (FootballClub(x) & Name(x, \"Fluminense\"))\nTEXT:\tAilton Silva played for Fluminense.\nFOL:\texists x. (Person(x) & Name(x, \"Ailton Silva\") & PlayedFor(x, \"Fluminense\"))\nANSWER:\tUncertain\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (BornIn(x, 1995) & KnownAs(x, Ailton))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\t((Player(Ailton) & LoanedTo(Ailton, Braga)))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\t(Player(AiltonSilva) & PlaysFor(AiltonSilva, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tClub(Nautico) & Club(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tClub(Fluminense)\nTEXT:\tAilton Silva played for Fluminense.\nFOL:\tPlayedFor(AiltonSilva, Fluminense)\nANSWER:\tUncertain\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (Born(x, 1995) & KnownAs(x, Ailton))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\texists x. (KnownAs(x, Ailton) & FootballPlayer(x) & LoanedTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\texists x. (KnownAs(x, Ailton) & Brazillian(x) & FootballPlayer(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva played for Fluminense.\nFOL:\texists x. (KnownAs(x, Ailton) & PlayedFor(x, Fluminense))\nANSWER:\tUncertain\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (Ailton(x) & BornIn(x, 1995))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\texists x. (Ailton(x) & FootballPlayer(x) & LoanedOutTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\texists x. (Ailton(x) & FootballPlayer(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tall x. (Nautico(x) -> FootballClub(x)) & all x. (Braga(x) -> FootballClub(x))\nTEXT:\tFluminense is a football club.\nFOL:\tall x. (Fluminense(x) -> FootballClub(x))\nTEXT:\tAilton Silva played for Fluminense.\nFOL:\texists x. (Ailton(x) & PlayedFor(x, Fluminense))\nANSWER:\tUncertain\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (Born(x, 1995) & KnownAs(x, Ailton) & Equals(x, AiltonSilva))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\texists x. (FootballPlayer(x) & KnownAs(x, Ailton) & LoanedTo(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\texists x. (Equals(x, AiltonSilva) & Footballer(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\texists x. (FootballClub(x) & Equals(x, Nautico)) & exists y. (FootballClub(y) & Equals(y, Braga))\nTEXT:\tFluminense is a football club.\nFOL:\texists x. (FootballClub(x) & Equals(x, Fluminense))\nTEXT:\tAilton Silva played for Fluminense.\nFOL:\texists x. (Equals(x, AiltonSilva) & PlayedFor(x, Fluminense))\nANSWER:\tUncertain\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\texists x. (Born(x, 1995) & KnownAs(x, Ailton))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tall x. (KnownAs(x, Ailton) -> (FootballPlayer(x) & LoanedTo(x, Braga)))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tall x. (KnownAs(x, Ailton) -> (FootballPlayer(x) & Brazillian(x) & PlaysFor(x, Nautico)))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva played for Fluminense.\nFOL:\texists x. (KnownAs(x, Ailton) & PlayedFor(x, Fluminense))\nANSWER:\tUncertain\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAilton = AiltonSilva & Born(AiltonSilva, 1995)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tBrazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva played for Fluminense.\nFOL:\tPlayedFor(AiltonSilva, Fluminense)\nANSWER:\tUncertain\n", "TEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tPerson(AiltonSilva) & Born(AiltonSilva, 1995) & CommonlyKnownAs(AiltonSilva, Ailton)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tFootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tFootballPlayer(AiltonSilva) & Brazillian(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tFootballClub(Nautico) & FootballClub(Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFootballClub(Fluminense)\nTEXT:\tAilton Silva played for Fluminense.\nFOL:\tPlayedFor(AiltonSilva, Fluminense)\nANSWER:\tUncertain\n"], ["TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProfessionalWrestlingStable(DiamondMine) & FormedIn(DiamondMine, WWE)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tHasFeudWith(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads the Creed Brothers.\nFOL:\tLeads(RoderickStrong, CreedBrothers)\nANSWER:\tUncertain\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\texists x. (DiamondMine(x) & ProfessionalWrestlingStable(x) & FormedIn(x, WWE))\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads the Creed Brothers.\nFOL:\tLeads(RoderickStrong, CreedBrothers)\nANSWER:\tUncertain\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProfessionalWrestling(DiamondMine) & FormedIn(DiamondMine, WWE)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads the Creed Brothers.\nFOL:\tLeads(RoderickStrong, CreedBrothers)\nANSWER:\tUncertain\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProfessionalWrestlingStable(DiamondMine) & FormedIn(DiamondMine, WWE)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tHasFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads the Creed Brothers.\nFOL:\tLeads(RoderickStrong, CreedBrothers)\nANSWER:\tUncertain\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProfessionalWrestlingStable(DiamondMine) & FormedIn(DiamondMine, WWE)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads the Creed Brothers.\nFOL:\tLeads(RoderickStrong, CreedBrothers)\nANSWER:\tUncertain\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tProfessionalWrestling(DiamondMine) & FormedIn(DiamondMine, WWE)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads the Creed Brothers.\nFOL:\tLeads(RoderickStrong, CreedBrothers)\nANSWER:\tUncertain\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tWrestlingStable(DiamondMine) & FormedIn(DiamondMine, WWE)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads the Creed Brothers.\nFOL:\tLeads(RoderickStrong, CreedBrothers)\nANSWER:\tUncertain\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\texists x. (ProfessionalWrestling(x) & FormedIn(x, WWE) & DiamondMine(x))\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludedIn(CreedBrothers, DiamondMine) & IncludedIn(IvyNile, DiamondMine)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads the Creed Brothers.\nFOL:\tLeads(RoderickStrong, CreedBrothers)\nANSWER:\tUncertain\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\texists x. (ProfessionalWrestlingStable(x) & FormedIn(x, WWE) & DiamondMine(x))\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads the Creed Brothers.\nFOL:\tLeads(RoderickStrong, CreedBrothers)\nANSWER:\tUncertain\n", "TEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tall x. (DiamondMine(x) -> ProfessionalWrestlingStable(x) & FormedIn(x, WWE))\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tLeads(RoderickStrong, DiamondMine)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tIncludes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tFeud(Imperium, DiamondMine)\nTEXT:\tRoderick strong leads the Creed Brothers.\nFOL:\tLeads(RoderickStrong, CreedBrothers)\nANSWER:\tUncertain\n"], ["TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock.\nFOL:\tCompanyStock(KO)\nANSWER:\tTrue\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock.\nFOL:\tCompanyStock(KO)\nANSWER:\tTrue\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> NotSuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock.\nFOL:\tCompanyStock(KO)\nANSWER:\tTrue\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock.\nFOL:\tCompanyStock(KO)\nANSWER:\tTrue\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock.\nFOL:\tCompanyStock(KO)\nANSWER:\tTrue\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock.\nFOL:\tCompanyStock(KO)\nANSWER:\tTrue\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock.\nFOL:\tCompanyStock(KO)\nANSWER:\tTrue\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock.\nFOL:\tCompanyStock(KO)\nANSWER:\tTrue\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> NotSuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock.\nFOL:\tCompanyStock(KO)\nANSWER:\tTrue\n", "TEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\texists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompanyStock(KO)\nTEXT:\tKO is a company stock.\nFOL:\tCompanyStock(KO)\nANSWER:\tTrue\n"], ["TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> Wings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t(-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT:\tRock has wings.\nFOL:\tWings(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> Wings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t(-Fly(Rock) & -Bird(Rock)) -> (-Flies(Rock) & -Breathes(Rock))\nTEXT:\tRock has wings.\nFOL:\tWings(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> Wings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t(-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT:\tRock has wings.\nFOL:\tWings(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> Wing(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock)))\nTEXT:\tRock has wings.\nFOL:\tWing(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock)))\nTEXT:\tRock has wings.\nFOL:\tHasWings(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> Wings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((Fly(Rock) & -Bird(Rock)) | (-Fly(Rock) & Bird(Rock))) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT:\tRock has wings.\nFOL:\tWings(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock)))\nTEXT:\tRock has wings.\nFOL:\tHasWings(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock)))\nTEXT:\tRock has wings.\nFOL:\tHasWings(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((not Fly(Rock) & not Bird(Rock)) -> (not Fly(Rock) & not Breathe(Rock)))\nTEXT:\tRock has wings.\nFOL:\tHasWings(Rock)\nANSWER:\tUncertain\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t(-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT:\tRock has wings.\nFOL:\tHasWings(Rock)\nANSWER:\tUncertain\n"], ["TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> WearLargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (WearLargeShoes(x) -> WearLargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-WearLargeClothes(Yuri)\nTEXT:\tYuri is not an American basketball player.\nFOL:\t-(American(Yuri) & BasketballPlayer(Yuri))\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tYuri is not an American basketball player.\nFOL:\t-(American(Yuri) & BasketballPlayer(Yuri))\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeSizedClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeSizedClothes(Yuri)\nTEXT:\tYuri is not an American basketball player.\nFOL:\t-(BasketballPlayer(Yuri) & American(Yuri))\nANSWER:\tTrue\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tYuri is not an American basketball player.\nFOL:\t-(American(Yuri) & BasketballPlayer(Yuri))\nANSWER:\tTrue\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tYuri is not an American basketball player.\nFOL:\t-BasketballPlayer(Yuri) | -American(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeSizeClothes(Yuri)\nTEXT:\tYuri is not an American basketball player.\nFOL:\t-(American(Yuri) & BasketballPlayer(Yuri))\nANSWER:\tTrue\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tYuri is not an American basketball player.\nFOL:\t-BasketballPlayer(Yuri) & -American(Yuri)\nANSWER:\tTrue\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tYuri is not an American basketball player.\nFOL:\t-BasketballPlayer(Yuri) & -American(Yuri)\nANSWER:\tTrue\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tYuri is not an American basketball player.\nFOL:\t-(BasketballPlayer(Yuri) & American(Yuri))\nANSWER:\tTrue\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tYuri is not an American basketball player.\nFOL:\t-(American(Yuri) & BasketballPlayer(Yuri))\nANSWER:\tTrue\n"], ["TEXT:\tAll humans are mortal.\nFOL:\tall x. (Human(x) -> Mortal(x))\nTEXT:\tAll Greeks are humans.\nFOL:\tall x. (Greek(x) -> Human(x))\nTEXT:\tSome Greeks are mortal.\nFOL:\texists x. (Greek(x) & Mortal(x))\nANSWER:\tTrue\n", "TEXT:\tAll humans are mortal.\nFOL:\tall x. (Human(x) -> Mortal(x))\nTEXT:\tAll Greeks are humans.\nFOL:\tall x. (Greek(x) -> Human(x))\nTEXT:\tSome Greeks are mortal.\nFOL:\texists x. (Greek(x) & Mortal(x))\nANSWER:\tTrue\n", "TEXT:\tAll humans are mortal.\nFOL:\tall x. (Human(x) -> Mortal(x))\nTEXT:\tAll Greeks are humans.\nFOL:\tall x. (Greek(x) -> Human(x))\nTEXT:\tSome Greeks are mortal.\nFOL:\texists x. (Greek(x) & Mortal(x))\nANSWER:\tTrue\n", "TEXT:\tAll humans are mortal.\nFOL:\tall x. (Human(x) -> Mortal(x))\nTEXT:\tAll Greeks are humans.\nFOL:\tall x. (Greek(x) -> Human(x))\nTEXT:\tSome Greeks are mortal.\nFOL:\texists x. (Greek(x) & Mortal(x))\nANSWER:\tTrue\n", "TEXT:\tAll humans are mortal.\nFOL:\tall x. (Human(x) -> Mortal(x))\nTEXT:\tAll Greeks are humans.\nFOL:\tall x. (Greek(x) -> Human(x))\nTEXT:\tSome Greeks are mortal.\nFOL:\texists x. (Greek(x) & Mortal(x))\nANSWER:\tTrue\n", "TEXT:\tAll humans are mortal.\nFOL:\tall x. (Human(x) -> Mortal(x))\nTEXT:\tAll Greeks are humans.\nFOL:\tall x. (Greek(x) -> Human(x))\nTEXT:\tSome Greeks are mortal.\nFOL:\texists x. (Greek(x) & Mortal(x))\nANSWER:\tTrue\n", "TEXT:\tAll humans are mortal.\nFOL:\tall x. (Human(x) -> Mortal(x))\nTEXT:\tAll Greeks are humans.\nFOL:\tall x. (Greek(x) -> Human(x))\nTEXT:\tSome Greeks are mortal.\nFOL:\texists x. (Greek(x) & Mortal(x))\nANSWER:\tTrue\n", "TEXT:\tAll humans are mortal.\nFOL:\tall x. (Human(x) -> Mortal(x))\nTEXT:\tAll Greeks are humans.\nFOL:\tall x. (Greek(x) -> Human(x))\nTEXT:\tSome Greeks are mortal.\nFOL:\texists x. (Greek(x) & Mortal(x))\nANSWER:\tTrue\n", "TEXT:\tAll humans are mortal.\nFOL:\tall x. (Human(x) -> Mortal(x))\nTEXT:\tAll Greeks are humans.\nFOL:\tall x. (Greek(x) -> Human(x))\nTEXT:\tSome Greeks are mortal.\nFOL:\texists x. (Greek(x) & Mortal(x))\nANSWER:\tTrue\n", "TEXT:\tAll humans are mortal.\nFOL:\tall x. (Human(x) -> Mortal(x))\nTEXT:\tAll Greeks are humans.\nFOL:\tall x. (Greek(x) -> Human(x))\nTEXT:\tSome Greeks are mortal.\nFOL:\texists x. (Greek(x) & Mortal(x))\nANSWER:\tTrue\n"], ["TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Employee(x) & ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (HaveLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (HaveLunchInCompany(x) | HaveLunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & HaveLunchAtHome(x) -> WorkRemotely(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (Employee(x) & InOtherCountries(x) -> WorkRemotely(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorkRemotely(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames does not have lunch in the company.\nFOL:\t-HaveLunchInCompany(James)\nANSWER:\tTrue\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Employee(x) & ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (HaveLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (HaveLunchInCompany(x) | HaveLunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & HaveLunchAtHome(x) -> WorkRemotely(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (Employee(x) & InOtherCountries(x) -> WorkRemotely(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorkRemotely(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames does not have lunch in the company.\nFOL:\t-HaveLunchInCompany(James)\nANSWER:\tTrue\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Employee(x) & ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (HaveLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (HaveLunchInCompany(x) | HaveLunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & HaveLunchAtHome(x) -> WorkRemotely(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (Employee(x) & InOtherCountries(x) -> WorkRemotely(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorkRemotely(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames does not have lunch in the company.\nFOL:\t-HaveLunchInCompany(James)\nANSWER:\tTrue\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Employee(x) & ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (HaveLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (HaveLunchInCompany(x) | HaveLunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & HaveLunchAtHome(x) -> WorkRemotely(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (Employee(x) & InOtherCountries(x) -> WorkRemotely(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorkRemotely(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames does not have lunch in the company.\nFOL:\t-HaveLunchInCompany(James)\nANSWER:\tTrue\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Employee(x) & ScheduleMeeting(x, Customers) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (HaveLunchInCompany(x) -> ScheduleMeeting(x, Customers))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (HaveLunchInCompany(x) | HaveLunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & HaveLunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (Employee(x) & InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames does not have lunch in the company.\nFOL:\t-HaveLunchInCompany(James)\nANSWER:\tTrue\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Employee(x) & ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (HaveLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (HaveLunchInCompany(x) | HaveLunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & HaveLunchAtHome(x) -> WorkRemotely(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (Employee(x) & InOtherCountry(x) -> WorkRemotely(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorkRemotely(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames does not have lunch in the company.\nFOL:\t-HaveLunchInCompany(James)\nANSWER:\tTrue\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Employee(x) & SchedulesMeetingWithCustomers(x) -> AppearsInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (HasLunchInCompany(x) -> SchedulesMeetingWithCustomers(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (HasLunchInCompany(x) | HasLunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & HasLunchAtHome(x) -> WorksRemotely(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (Employee(x) & InOtherCountries(x) -> WorksRemotely(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorksRemotely(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearsInCompany(James)) | (-Manager(James) & -AppearsInCompany(James)))\nTEXT:\tJames does not have lunch in the company.\nFOL:\t-HasLunchInCompany(James)\nANSWER:\tUncertain\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Employee(x) & ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (LunchInCompany(x) -> ScheduleMeeting(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & LunchAtHome(x) -> WorkRemotely(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (Employee(x) & InOtherCountries(x) -> WorkRemotely(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorkRemotely(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames does not have lunch in the company.\nFOL:\t-LunchInCompany(James)\nANSWER:\tUncertain\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Employee(x) & ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (LunchInCompany(x) -> ScheduleMeeting(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & LunchAtHome(x) -> WorkRemotely(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (Employee(x) & InOtherCountries(x) -> WorkRemotely(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorkRemotely(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames does not have lunch in the company.\nFOL:\t-LunchInCompany(James)\nANSWER:\tTrue\n", "TEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Employee(x) & ScheduleMeetingWithCustomers(x) -> AppearInCompany(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomers(x))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. (Employee(x) -> (HaveLunchInCompany(x) | HaveLunchAtHome(x)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. (Employee(x) & HaveLunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (Employee(x) & InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\tall x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & AppearInCompany(James)) | (-Manager(James) & -AppearInCompany(James)))\nTEXT:\tJames does not have lunch in the company.\nFOL:\t-HaveLunchInCompany(James)\nANSWER:\tTrue\n"], ["TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock)))\nTEXT:\tRock does not have wings.\nFOL:\t-HasWings(Rock)\nANSWER:\tTrue\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t(-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT:\tRock does not have wings.\nFOL:\t-HasWings(Rock)\nANSWER:\tTrue\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((!Fly(Rock) & !Bird(Rock)) -> (!Fly(Rock) & !Breathe(Rock)))\nTEXT:\tRock does not have wings.\nFOL:\t!HasWings(Rock)\nANSWER:\tTrue\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock)))\nTEXT:\tRock does not have wings.\nFOL:\t-HasWings(Rock)\nANSWER:\tTrue\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t(-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT:\tRock does not have wings.\nFOL:\t-HasWings(Rock)\nANSWER:\tTrue\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock)))\nTEXT:\tRock does not have wings.\nFOL:\t-HasWings(Rock)\nANSWER:\tTrue\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t(-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT:\tRock does not have wings.\nFOL:\t-HasWings(Rock)\nANSWER:\tTrue\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> Wings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock)))\nTEXT:\tRock does not have wings.\nFOL:\t-Wings(Rock)\nANSWER:\tTrue\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((!Fly(Rock) & !Bird(Rock)) -> (!Fly(Rock) & !Breathe(Rock)))\nTEXT:\tRock does not have wings.\nFOL:\t!HasWings(Rock)\nANSWER:\tTrue\n", "TEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\tall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Fly(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathe(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Fly(x) -> Wings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock)))\nTEXT:\tRock does not have wings.\nFOL:\t-Wings(Rock)\nANSWER:\tTrue\n"], ["TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NLPtask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. ((NLPtask(x) & TextSequenceOutput(x)) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNLPtask(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tTextSequenceOutput(MachineTranslation)\nTEXT:\tMachine translation is a language generation task.\nFOL:\tLanguageGenerationTask(MachineTranslation)\nANSWER:\tTrue\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (NLPTask(x) & TextSequenceOutput(x) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNLPTask(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tTextSequenceOutput(MachineTranslation)\nTEXT:\tMachine translation is a language generation task.\nFOL:\tLanguageGenerationTask(MachineTranslation)\nANSWER:\tTrue\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NlpTask(x) -> LanguageGenerationTask(x) | LanguageUnderstandingTask(x))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (NlpTask(x) & OutputIsTextSequence(x) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNlpTask(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutputIsTextSequence(MachineTranslation)\nTEXT:\tMachine translation is a language generation task.\nFOL:\tLanguageGenerationTask(MachineTranslation)\nANSWER:\tTrue\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NLP_Task(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (NLP_Task(x) & OutputIsTextSequence(x) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNLP_Task(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutputIsTextSequence(MachineTranslation)\nTEXT:\tMachine translation is a language generation task.\nFOL:\tLanguageGenerationTask(MachineTranslation)\nANSWER:\tTrue\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NLPTask(x) -> LanguageGenerationTask(x) | LanguageUnderstandingTask(x))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (NLPTask(x) & Output(x, TextSequence) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNLPTask(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutput(MachineTranslation, TextSequence)\nTEXT:\tMachine translation is a language generation task.\nFOL:\tLanguageGenerationTask(MachineTranslation)\nANSWER:\tTrue\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NLPtask(x) -> LanguageGenerationTask(x) | LanguageUnderstandingTask(x))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (NLPtask(x) & OutputTextSequence(x) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNLPtask(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutputTextSequence(MachineTranslation)\nTEXT:\tMachine translation is a language generation task.\nFOL:\tLanguageGenerationTask(MachineTranslation)\nANSWER:\tTrue\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. all y. ((NaturalLanguageProcessingTask(x) & OutputTextSequence(y)) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNaturalLanguageProcessingTask(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutputTextSequence(MachineTranslation)\nTEXT:\tMachine translation is a language generation task.\nFOL:\tLanguageGenerationTask(MachineTranslation)\nANSWER:\tTrue\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NaturalLanguageProcessingTask(x) -> LanguageGenerationTask(x) | LanguageUnderstandingTask(x))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (NaturalLanguageProcessingTask(x) & OutputTextSequence(x) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNaturalLanguageProcessingTask(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutputTextSequence(MachineTranslation)\nTEXT:\tMachine translation is a language generation task.\nFOL:\tLanguageGenerationTask(MachineTranslation)\nANSWER:\tTrue\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NLPTask(x) -> LanguageGenerationTask(x) | LanguageUnderstandingTask(x))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (NLPTask(x) & OutputIsTextSequence(x) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNLPTask(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutputIsTextSequence(MachineTranslation)\nTEXT:\tMachine translation is a language generation task.\nFOL:\tLanguageGenerationTask(MachineTranslation)\nANSWER:\tTrue\n", "TEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NLP_Task(x) -> LanguageGenerationTask(x) | LanguageUnderstandingTask(x))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (NLP_Task(x) & OutputIsTextSequence(x) -> LanguageGenerationTask(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tNLP_Task(MachineTranslation)\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tOutputIsTextSequence(MachineTranslation)\nTEXT:\tMachine translation is a language generation task.\nFOL:\tLanguageGenerationTask(MachineTranslation)\nANSWER:\tTrue\n"], ["TEXT:\tYale University is a private Ivy League research university.\nFOL:\tUniversity(Yale) & Private(Yale) & IvyLeague(Yale) & ResearchUniversity(Yale)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMovedTo(Yale, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowmentValue(Yale, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(Yale, 27, ConstituentCollegesAndSchools)\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialColleges(Yale, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT:\tYale University has the largest university endowment of any educational institution.\nFOL:\tLargestEndowment(Yale)\nANSWER:\tUncertain\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tall x. (YaleUniversity(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\texists x. (YaleUniversity(x) & MovedTo(x, NewHaven, 1716))\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\texists x. (YaleUniversity(x) & Endowment(x, 42.3Billion))\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\texists x. (YaleUniversity(x) & OrganizedInto(x, 27CollegesAndSchools))\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\texists x. (YaleUniversity(x) & ResidentialColleges(x, List))\nTEXT:\tYale University has the largest university endowment of any educational institution.\nFOL:\texists x. (YaleUniversity(x) & LargestEndowment(x))\nANSWER:\tUncertain\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeague(YaleUniversity) & ResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMoved(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowmentValue(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27CollegesAndSchools) & Includes(27CollegesAndSchools, [ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, 12ProfessionalSchools])\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialColleges(YaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT:\tYale University has the largest university endowment of any educational institution.\nFOL:\tLargestEndowment(YaleUniversity)\nANSWER:\tUncertain\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMovedTo(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27, {ResidentialColleges, YaleGraduateSchoolofArtsandSciences, TwelveProfessionalSchools})\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialCollegesAtYale({BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege})\nTEXT:\tYale University has the largest university endowment of any educational institution.\nFOL:\tLargestEndowment(YaleUniversity)\nANSWER:\tUncertain\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMovedTo(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, {ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, ProfessionalSchools})\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialColleges(YaleUniversity, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege})\nTEXT:\tYale University has the largest university endowment of any educational institution.\nFOL:\tMaxEndowment(YaleUniversity)\nANSWER:\tUncertain\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tIvyLeague(YaleUniversity) & ResearchUniversity(YaleUniversity) & Private(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMovedTo(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, ResidentialColleges) & OrganizedInto(YaleUniversity, YaleGraduateSchoolOfArtsAndSciences) & OrganizedInto(YaleUniversity, ProfessionalSchools) & NumberOfConstituentEntities(YaleUniversity, 27)\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialColleges(YaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT:\tYale University has the largest university endowment of any educational institution.\nFOL:\tLargestEndowment(YaleUniversity)\nANSWER:\tUncertain\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMoved(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27, [ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, TwelveProfessionalSchools])\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialCollegesAtYale([BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT:\tYale University has the largest university endowment of any educational institution.\nFOL:\tLargestEndowment(YaleUniversity)\nANSWER:\tUncertain\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivateIvyLeagueResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMoved(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowmentValue(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, [ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, ProfessionalSchools], 27)\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialColleges(YaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT:\tYale University has the largest university endowment of any educational institution.\nFOL:\tLargestEndowment(YaleUniversity)\nANSWER:\tUncertain\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tIvyLeague(YaleUniversity) & Private(YaleUniversity) & ResearchUniversity(YaleUniversity)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMoved(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27, [ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, TwelveProfessionalSchools])\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tResidentialColleges(YaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT:\tYale University has the largest university endowment of any educational institution.\nFOL:\tForall x. (EducationalInstitution(x) -> LargestEndowment(YaleUniversity, x))\nANSWER:\tUncertain\n", "TEXT:\tYale University is a private Ivy League research university.\nFOL:\tall x. (YaleUniversity(x) -> PrivateIvyLeagueResearchUniversity(x))\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMoved(YaleUniversity, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(YaleUniversity, 42.3Billion)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganizedInto(YaleUniversity, 27, [ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, TwelveProfessionalSchools])\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tListOfResidentialColleges(YaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT:\tYale University has the largest university endowment of any educational institution.\nFOL:\tHasLargestEndowment(YaleUniversity)\nANSWER:\tUncertain\n"], ["TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tall x. (Man(x) & InClass(x, MichaelsClass) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. ((Man(x) & Shoots(x) & -JumpsWhenShooting(x)) -> CanBlockShooting(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-ManCanBlockShooting(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. ((Shoots(x) & JumpsWhenShooting(x)) -> GreatShooter(x))\nTEXT:\tWindy is a great shooter.\nFOL:\tGreatShooter(Windy)\nANSWER:\tTrue\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tMan(Michael) & all x. (InClass(x, Michael) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z.\nFOL:\tall x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. ((Person(x) & DoesNotJump(x)) -> CanBlock(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Person(Windy) | -CanBlock(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT:\tWindy is a great shooter.\nFOL:\tGreatShooter(Windy)\nANSWER:\tTrue\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. ((Man(x) & Man(y) & Taller(x, y)) -> CanBlock(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tall x. ((Classmate(x, Michael) & Man(x)) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. ((Person(x) & -JumpWhenShooting(x)) -> CanBlock(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Person(Windy) | -CanBlock(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. ((Shooter(x) & JumpWhenShooting(x)) -> GreatShooter(x))\nTEXT:\tWindy is a great shooter.\nFOL:\tGreatShooter(Windy)\nANSWER:\tUncertain\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tMan(Michael) & all x. (InClass(x, Michael) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (Man(x) & -JumpWhenShooting(x) -> CanBlockShooting(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Man(CanBlockShooting(Michael, Windy))\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tWindy is a great shooter.\nFOL:\tGreatShooter(Windy)\nANSWER:\tTrue\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x,y) -> CanBlock(x,y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tMan(Michael) & all x. (Classmate(x, Michael) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (Man(x) & -JumpWhenShooting(x) -> CanBlock(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Man(Michael) | -CanBlock(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tWindy is a great shooter.\nFOL:\tGreatShooter(Windy)\nANSWER:\tUncertain\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tMan(Michael) & all x. (Classmate(x, Michael) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (Person(x) & -JumpWhenShooting(x) -> CanBlockShooting(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Person(Michael) | -CanBlockShooting(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tWindy is a great shooter.\nFOL:\tGreatShooter(Windy)\nANSWER:\tTrue\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. ((Man(x) & Man(y) & Taller(x, y)) -> CanBlock(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tMan(Michael) & all x. (Classmate(x, Michael) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. ((CanShoot(x) & -CanJumpWhenShooting(x)) -> CanBlock(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-CannotBlock(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. ((Shooter(x) & CanJumpWhenShooting(x)) -> GreatShooter(x))\nTEXT:\tWindy is a great shooter.\nFOL:\tGreatShooter(Windy)\nANSWER:\tTrue\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tMan(Michael) & all y. (InClass(y, Michael'sClass) -> Taller(Michael, y))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z.\nFOL:\tall x. all y. all z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. ((Person(x) & -JumpWhenShooting(x)) -> CanBlockShooting(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Person(Windy) | -CanBlockShooting(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tWindy is a great shooter.\nFOL:\tGreatShooter(Windy)\nANSWER:\tTrue\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. ((Man(x) & Man(y) & Taller(x, y)) -> CanBlock(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tall x. (Classmate(x, Michael) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tTaller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. ((Person(x) & -JumpWhenShooting(x)) -> CanBlock(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-CanBlock(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tWindy is a great shooter.\nFOL:\tGreatShooter(Windy)\nANSWER:\tTrue\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tMan(Michael) & all x. (InClass(x, Michael'sClass) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. ((CanShoot(x) & -CanJumpWhenShooting(x)) -> CanBlock(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-CannotBlock(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (CanShoot(x) & CanJumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tWindy is a great shooter.\nFOL:\tGreatShooter(Windy)\nANSWER:\tTrue\n"], ["TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> WearLargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-WearLargeSizeClothes(Yuri)\nTEXT:\tYuri is an American.\nFOL:\tAmerican(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeSizeClothes(Yuri)\nTEXT:\tYuri is an American.\nFOL:\tAmerican(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> WearLargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-WearLargeSizedClothes(Yuri)\nTEXT:\tYuri is an American.\nFOL:\tAmerican(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeSizeClothes(Yuri)\nTEXT:\tYuri is an American.\nFOL:\tAmerican(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tYuri is an American.\nFOL:\tAmerican(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> WearLargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (WearLargeShoes(x) -> WearLargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-WearLargeClothes(Yuri)\nTEXT:\tYuri is an American.\nFOL:\tAmerican(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeSizedClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeSizedClothes(Yuri)\nTEXT:\tYuri is an American.\nFOL:\tAmerican(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tYuri is an American.\nFOL:\tAmerican(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> WearLargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (WearLargeShoes(x) -> WearLargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-WearLargeClothes(Yuri)\nTEXT:\tYuri is an American.\nFOL:\tAmerican(Yuri)\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tYuri is an American.\nFOL:\tAmerican(Yuri)\nANSWER:\tUncertain\n"], ["TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t-Airline(Greyhound) -> -Plane(Greyhound)\nTEXT:\tA Greyhound is not a Boeing 707.\nFOL:\t-Boeing707(Greyhound)\nANSWER:\tTrue\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\tall x. (Greyhound(x) & -Airline(x) -> -Plane(x))\nTEXT:\tA Greyhound is not a Boeing 707.\nFOL:\tall x. (Greyhound(x) -> -Boeing707(x))\nANSWER:\tUncertain\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\tall x. (Greyhound(x) & -Airline(x) -> -Plane(x))\nTEXT:\tA Greyhound is not a Boeing 707.\nFOL:\tall x. (Greyhound(x) -> -Boeing707(x))\nANSWER:\tUncertain\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\tall x. (Greyhound(x) & -Airline(x) -> -Plane(x))\nTEXT:\tA Greyhound is not a Boeing 707.\nFOL:\tall x. (Greyhound(x) -> -Boeing707(x))\nANSWER:\tTrue\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t(-Airline(Greyhound) -> forall x. (-Plane(x) | -Greyhound(x)))\nTEXT:\tA Greyhound is not a Boeing 707.\nFOL:\t-Boeing707(Greyhound)\nANSWER:\tTrue\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\tall x. (-Airline(Greyhound) -> -Plane(Greyhound))\nTEXT:\tA Greyhound is not a Boeing 707.\nFOL:\t-Boeing707(Greyhound)\nANSWER:\tTrue\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t-Airline(Greyhound) -> forall x. (-Plane(x) | -Greyhound(x))\nTEXT:\tA Greyhound is not a Boeing 707.\nFOL:\t-Boeing707(Greyhound)\nANSWER:\tUncertain\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\tall x. (-Airline(Greyhound) -> -Plane(Greyhound))\nTEXT:\tA Greyhound is not a Boeing 707.\nFOL:\t-Boeing707(Greyhound)\nANSWER:\tTrue\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t(-Airline(Greyhound) -> all x. (GreyhoundPlane(x) -> False))\nTEXT:\tA Greyhound is not a Boeing 707.\nFOL:\t-Boeing707(Greyhound)\nANSWER:\tTrue\n", "TEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t-Airline(Greyhound) -> forall x. (Plane(x) & Greyhound(x) -> False)\nTEXT:\tA Greyhound is not a Boeing 707.\nFOL:\t-Boeing707(Greyhound)\nANSWER:\tUncertain\n"], ["TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJob(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJob(Jack) & -WorkInLab(Jack)\nTEXT:\tJack takes the database course.\nFOL:\tTakeDatabaseCourse(Jack)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobByUniversity(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobByUniversity(Jack) & -WorkInLab(Jack)\nTEXT:\tJack takes the database course.\nFOL:\tTakeDatabaseCourse(Jack)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (LibraryWorker(x) -> -ComputerScienceStudent(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobUniversity(x) -> LibraryWorker(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (DatabaseCourse(x) -> ComputerScienceStudent(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (LabWorker(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tLabWorker(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobUniversity(Jack) & -LabWorker(Jack)\nTEXT:\tJack takes the database course.\nFOL:\tDatabaseCourse(Jack)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (StudentWorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobUniversity(x) -> StudentWorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkingInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkingInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobUniversity(Jack) & -WorkingInLab(Jack)\nTEXT:\tJack takes the database course.\nFOL:\tDatabaseCourse(Jack)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobInUniversity(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobInUniversity(Jack) & -WorkInLab(Jack)\nTEXT:\tJack takes the database course.\nFOL:\tTakeDatabaseCourse(Jack)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (Student(x) & WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (Student(x) & HavePartTimeJob(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (Student(x) & TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (Student(x) & InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (Student(x) & WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tStudent(James) & WorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-Student(Jack) & -WorkInLab(Jack) & -HavePartTimeJob(Jack)\nTEXT:\tJack takes the database course.\nFOL:\tTakeDatabaseCourse(Jack)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobByUniversity(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobByUniversity(Jack) & -WorkInLab(Jack)\nTEXT:\tJack takes the database course.\nFOL:\tTakeDatabaseCourse(Jack)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (LibraryWorker(x) -> -CSStudent(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJob(x) -> LibraryWorker(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (DatabaseCourse(x) -> CSStudent(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (LabWorker(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tLabWorker(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJob(Jack) & -LabWorker(Jack)\nTEXT:\tJack takes the database course.\nFOL:\tDatabaseCourse(Jack)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (LibraryWorker(x) -> -ComputerScienceStudent(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJob(x) -> LibraryWorker(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (DatabaseCourse(x) -> ComputerScienceStudent(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (LabWorker(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tLabWorker(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJob(Jack) & -LabWorker(Jack)\nTEXT:\tJack takes the database course.\nFOL:\tDatabaseCourse(Jack)\nANSWER:\tUncertain\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobByUniversity(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobByUniversity(Jack) & -WorkInLab(Jack)\nTEXT:\tJack takes the database course.\nFOL:\tTakeDatabaseCourse(Jack)\nANSWER:\tUncertain\n"], ["TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. (BornInAmericanCity(x) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. ((Book(x) & Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro is a novel writer.\nFOL:\tNovelWriter(DaniShapiro)\nANSWER:\tTrue\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. (BornInAmericanCity(x) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. ((Book(x) & Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro is a novel writer.\nFOL:\tNovelWriter(DaniShapiro)\nANSWER:\tTrue\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. (BornIn(x, AmericanCity) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. (Book(x) & Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro is a novel writer.\nFOL:\tNovelWriter(DaniShapiro)\nANSWER:\tTrue\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. all y. (BornIn(x, y) & AmericanCity(y) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. (Book(x) & Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro is a novel writer.\nFOL:\tNovelWriter(DaniShapiro)\nANSWER:\tTrue\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. (BornInAmericanCity(x) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. (Book(x) & Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro is a novel writer.\nFOL:\tNovelWriter(DaniShapiro)\nANSWER:\tTrue\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. (BornIn(x, AmericanCity) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. ((Book(x) & Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & YearWritten(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro is a novel writer.\nFOL:\tNovelWriter(DaniShapiro)\nANSWER:\tTrue\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. all y. (Born(x, y) & AmericanCity(y) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. (Book(x) & Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro is a novel writer.\nFOL:\tNovelWriter(DaniShapiro)\nANSWER:\tTrue\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. (BornIn(x, AmericanCity) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. ((Book(x) & Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro is a novel writer.\nFOL:\tNovelWriter(DaniShapiro)\nANSWER:\tTrue\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. all y. (BornIn(x, y) & AmericanCity(y) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. (Book(x) & Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro is a novel writer.\nFOL:\tNovelWriter(DaniShapiro)\nANSWER:\tTrue\n", "TEXT:\tA podcast is not a novel.\nFOL:\tall x. (Podcast(x) -> -Novel(x))\nTEXT:\tIf a person is born in American City, the person is American.\nFOL:\tall x. all y. (BornIn(x, y) & AmericanCity(y) -> American(x))\nTEXT:\tIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. all y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro) & Writer(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tNovel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, FamilySecrets) & Podcast(FamilySecrets)\nTEXT:\tBoston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tDani Shapiro is a novel writer.\nFOL:\tNovelWriter(DaniShapiro)\nANSWER:\tTrue\n"], ["TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Conductor(y) -> LedBy(x, y))\nTEXT:\tSome orchestras premiered music pieces.\nFOL:\texists x. exists y. (Orchestra(x) & MusicPiece(y) & Premiered(x, y))\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Conductor(y) -> LedBy(x, y))\nTEXT:\tSome orchestras premiered music pieces.\nFOL:\texists x. exists y. (Orchestra(x) & MusicPiece(y) & Premiered(x, y))\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. (Orchestra(x) -> exists y. (Conductor(y) & Leads(y, x)))\nTEXT:\tSome orchestras premiered music pieces.\nFOL:\texists x. exists y. (Orchestra(x) & MusicPiece(y) & Premiered(x, y))\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Conductor(y) -> LedBy(x, y))\nTEXT:\tSome orchestras premiered music pieces.\nFOL:\texists x. exists y. (Orchestra(x) & MusicPiece(y) & Premiered(x, y))\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Conductor(y) -> LedBy(x, y))\nTEXT:\tSome orchestras premiered music pieces.\nFOL:\texists x. exists y. (Orchestra(x) & MusicPiece(y) & Premiered(x, y))\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. (Orchestra(x) -> exists y. (Conductor(y) & Leads(y, x)))\nTEXT:\tSome orchestras premiered music pieces.\nFOL:\texists x. exists y. (Orchestra(x) & MusicPiece(y) & Premiered(x, y))\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. (Orchestra(x) -> exists y. (Conductor(y) & Leads(y, x)))\nTEXT:\tSome orchestras premiered music pieces.\nFOL:\texists x. exists y. (Orchestra(x) & MusicPiece(y) & Premiered(x, y))\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. (Orchestra(x) -> exists y. (Conductor(y) & Leads(y, x)))\nTEXT:\tSome orchestras premiered music pieces.\nFOL:\texists x. exists y. (Orchestra(x) & MusicPiece(y) & Premiered(x, y))\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Conductor(y) -> LedBy(x, y))\nTEXT:\tSome orchestras premiered music pieces.\nFOL:\texists x. exists y. (Orchestra(x) & MusicPiece(y) & Premiered(x, y))\nANSWER:\tTrue\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Conductor(y) -> LedBy(x, y))\nTEXT:\tSome orchestras premiered music pieces.\nFOL:\texists x. exists y. (Orchestra(x) & MusicPiece(y) -> Premiered(x, y))\nANSWER:\tTrue\n"], ["TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Person(x) & Book(y) & Reads(x, y) -> GainsKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (Person(x) & GainsKnowledge(x) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tA person who is smarter has gained knowledge.\nFOL:\tall x. (Person(x) & Smarter(x) -> GainedKnowledge(x))\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> Contains(x, Knowledge))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Person(x) & Book(y) & Reads(x, y) -> Gains(x, Knowledge))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (Person(x) & Gains(x, Knowledge) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tA person who is smarter has gained knowledge.\nFOL:\tall x. (Person(x) & Smarter(x) -> Gained(x, Knowledge))\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainsKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Person(x) & Read(x, y) & Book(y) -> GainsKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (Person(x) & GainsKnowledge(x) -> BecomesSmarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tRead(Harry, Walden)\nTEXT:\tA person who is smarter has gained knowledge.\nFOL:\tall x. (Person(x) & BecomesSmarter(x) -> GainsKnowledge(x))\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> Contains(x, Knowledge))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Reads(x, y) & Book(y) -> Gains(x, Knowledge))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (Gains(x, Knowledge) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tA person who is smarter has gained knowledge.\nFOL:\tall x. (Smarter(x) -> Gains(x, Knowledge))\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> Contains(x, Knowledge))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Reads(x, y) & Book(y) -> Gains(x, Knowledge))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (Gains(x, Knowledge) -> Becomes(x, Smarter))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tA person who is smarter has gained knowledge.\nFOL:\tall x. (Becomes(x, Smarter) -> Gains(x, Knowledge))\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> Contains(x, Knowledge))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Reads(x, y) & Book(y) -> Gains(x, Knowledge))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (Gains(x, Knowledge) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tA person who is smarter has gained knowledge.\nFOL:\tall x. (Smarter(x) -> Gained(x, Knowledge))\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> Contains(x, Knowledge))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Reads(x, y) & Book(y) -> Gains(x, Knowledge))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (Gains(x, Knowledge) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tA person who is smarter has gained knowledge.\nFOL:\tall x. (Smarter(x) -> Gains(x, Knowledge))\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> Contains(x, Knowledge))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Person(x) & Book(y) & Reads(x, y) -> Gains(x, Knowledge))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (Person(x) & Gains(x, Knowledge) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tA person who is smarter has gained knowledge.\nFOL:\tall x. (Person(x) & Smarter(x) -> Gained(x, Knowledge))\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> Contains(x, Knowledge))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Reads(x, y) & Book(y) -> Gains(x, Knowledge))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (Gains(x, Knowledge) -> Becomes(x, Smarter))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tA person who is smarter has gained knowledge.\nFOL:\tall x. (Smarter(x) -> Gained(x, Knowledge))\nANSWER:\tTrue\n", "TEXT:\tBooks contain tons of knowledge.\nFOL:\tall x. (Book(x) -> ContainsKnowledge(x))\nTEXT:\tWhen a person reads a book, that person gains knowledge.\nFOL:\tall x. all y. (Person(x) & Reads(x, y) & Book(y) -> GainsKnowledge(x))\nTEXT:\tIf a person gains knowledge, they become smarter.\nFOL:\tall x. (Person(x) & GainsKnowledge(x) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tA person who is smarter has gained knowledge.\nFOL:\tall x. (Person(x) & Smarter(x) -> GainedKnowledge(x))\nANSWER:\tTrue\n"], ["TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (RosesGivenOutOnTV(x) & On(x, MondaysAt8pm))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RosesGivenOutOnTV(x) -> OnBachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-TVShow(BreakingBad, Reality)\nTEXT:\tBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL:\tTVShow(BreakingBad, RosesGivenOutOnTV) & On(BreakingBad, MondaysAt8pm)\nANSWER:\tFalse\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (MondayAt8PM(x) & GivenOutOnTV(x, Roses))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (GivenOutOnTV(x, Roses) -> OnTheBachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL:\texists x. (MondayAt8PM(x) & GivenOutOnTV(BreakingBad, Roses))\nANSWER:\tFalse\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (Monday8pm(x) & RosesGivenOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RosesGivenOnTV(x) -> Bachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (Bachelor(x) -> RealPeopleLives(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (RealPeopleLives(x) -> RealityTV(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-BreakingBad(RealityTV)\nTEXT:\tBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL:\tBreakingBad(x) & Monday8pm(x) & RosesGivenOnTV(x)\nANSWER:\tFalse\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (Monday8pm(x) & RosesOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RosesOnTV(x) -> Bachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (Bachelor(x) -> RealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (RealPeople(x) -> RealityTV(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-BreakingBad(RealityTV)\nTEXT:\tBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL:\texists x. (BreakingBad(x) & Monday8pm(x) & RosesOnTV(x))\nANSWER:\tFalse\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (Monday8pm(x) & RosesGivenOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RosesGivenOnTV(x) -> OnTheBachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL:\t(Monday8pm(BreakingBad) & RosesGivenOnTV(BreakingBad))\nANSWER:\tFalse\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (Monday8pm(x) & RosesGivenOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RosesGivenOnTV(x) -> OnTheBachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysLivesOfRealPeople(x) -> RealityTV(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-TV(BreakingBad, RealityTV)\nTEXT:\tBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL:\tTV(BreakingBad, RosesGivenOnTV) & Monday8pm(BreakingBad)\nANSWER:\tFalse\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (MondaysAt8PM(x) & GivenOutOnTV(x, Roses))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (GivenOutOnTV(x, Roses) -> OnTheBachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL:\tTVShow(BreakingBad) & exists x. (MondaysAt8PM(x) & GivenOutOnTV(BreakingBad, Roses))\nANSWER:\tFalse\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (Monday8pm(x) & RosesGivenOutOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RoseGivenOutOnTV(x) -> Bachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-TVRealityShow(BreakingBad)\nTEXT:\tBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL:\tTVShow(BreakingBad) & exists x. (Monday8pm(x) & RosesGivenOutOnTV(x))\nANSWER:\tFalse\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (Monday8pm(x) & GivenOutOnTV(x, Roses))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (GivenOutOnTV(x, Roses) -> OnTheBachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnTheBachelor(x) -> Portrays(x, LivesOfRealPeople))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (Portrays(x, LivesOfRealPeople) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL:\tMonday8pm(BreakingBad) & GivenOutOnTV(BreakingBad, Roses)\nANSWER:\tFalse\n", "TEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\texists x. (MondaysAt8pm(x) & GivenOutOnTV(x, Roses))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (GivenOutOnTV(x, Roses) -> OnTheBachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-TVShow(BreakingBad, RealityTVShow)\nTEXT:\tBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL:\tTVShow(BreakingBad, GivenOutOnTV(Roses, MondaysAt8pm))\nANSWER:\tFalse\n"], ["TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Write(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrite(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Leads(y, x) -> Conductor(y))\nTEXT:\tBeethoven is not a conductor.\nFOL:\t-Conductor(Beethoven)\nANSWER:\tFalse\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(y) & Leads(x, y) -> Conductor(x))\nTEXT:\tBeethoven is not a conductor.\nFOL:\t-Conductor(Beethoven)\nANSWER:\tFalse\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Leads(y, x) -> Conductor(y))\nTEXT:\tBeethoven is not a conductor.\nFOL:\t-Conductor(Beethoven)\nANSWER:\tFalse\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Leads(y, x) -> Conductor(y))\nTEXT:\tBeethoven is not a conductor.\nFOL:\t-Conductor(Beethoven)\nANSWER:\tFalse\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (MusicPiece(y) & Writes(x, y) -> Composer(x))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(y) & Leads(x, y) -> Conductor(x))\nTEXT:\tBeethoven is not a conductor.\nFOL:\t-Conductor(Beethoven)\nANSWER:\tFalse\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Writes(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrites(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Leads(y, x) -> Conductor(y))\nTEXT:\tBeethoven is not a conductor.\nFOL:\t-Conductor(Beethoven)\nANSWER:\tFalse\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Wrote(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrote(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Leads(y, x) -> Conductor(y))\nTEXT:\tBeethoven is not a conductor.\nFOL:\t-Conductor(Beethoven)\nANSWER:\tFalse\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Wrote(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrote(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Leads(y, x) -> Conductor(y))\nTEXT:\tBeethoven is not a conductor.\nFOL:\t-Conductor(Beethoven)\nANSWER:\tFalse\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Wrote(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrote(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLeads(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(x) & Leads(y, x) -> Conductor(y))\nTEXT:\tBeethoven is not a conductor.\nFOL:\t-Conductor(Beethoven)\nANSWER:\tFalse\n", "TEXT:\tSymphony No. 9 is a music piece.\nFOL:\tMusicPiece(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. all y. (Composer(x) & MusicPiece(y) -> Write(x, y))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tWrite(Beethoven, SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tPremiered(ViennaMusicSociety, SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tOrchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tLead(Beethoven, ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. all y. (Orchestra(y) & Lead(x, y) -> Conductor(x))\nTEXT:\tBeethoven is not a conductor.\nFOL:\t-Conductor(Beethoven)\nANSWER:\tFalse\n"], ["TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (PetOwner(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tPetOwner(Tom)\nTEXT:\tIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL:\t(-Grumpy(Tom) & -MeanToAnimals(Tom)) -> (-Grumpy(Tom) & -AnimalLover(Tom))\nANSWER:\tFalse\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (OwnsPet(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL:\t(-Grumpy(Tom) & -MeanToAnimals(Tom)) -> (-Grumpy(Tom) & -AnimalLover(Tom))\nANSWER:\tFalse\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (PetOwner(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tPetOwner(Tom)\nTEXT:\tIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL:\t(-Grumpy(Tom) & -MeanToAnimals(Tom)) -> (-Grumpy(Tom) & -AnimalLover(Tom))\nANSWER:\tFalse\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (OwnsPet(x) -> LoveAnimals(x))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL:\t(-Grumpy(Tom) & MeanToAnimals(Tom)) -> (-Grumpy(Tom) & -AnimalLover(Tom))\nANSWER:\tFalse\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (OwnsPet(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL:\t(-Grumpy(Tom) & -MeanToAnimals(Tom)) -> (-Grumpy(Tom) & -AnimalLover(Tom))\nANSWER:\tFalse\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (PetOwner(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tPetOwner(Tom)\nTEXT:\tIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL:\t(-Grumpy(Tom) & -MeanToAnimals(Tom)) -> (-Grumpy(Tom) & -AnimalLover(Tom))\nANSWER:\tFalse\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (OwnsPet(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL:\t(-Grumpy(Tom) & -MeanToAnimals(Tom)) -> (-Grumpy(Tom) & -AnimalLover(Tom))\nANSWER:\tFalse\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (OwnsPet(x) -> LoveAnimals(x))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL:\t(-Grumpy(Tom) & -MeanToAnimals(Tom)) -> (-Grumpy(Tom) & -AnimalLover(Tom))\nANSWER:\tFalse\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (PetOwner(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tPetOwner(Tom)\nTEXT:\tIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL:\t(-Grumpy(Tom) & -MeanToAnimals(Tom)) -> (-Grumpy(Tom) & -AnimalLover(Tom))\nANSWER:\tFalse\n", "TEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\texists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (OwnsPet(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL:\t(-Grumpy(Tom) & -MeanToAnimals(Tom)) -> (-Grumpy(Tom) & -AnimalLover(Tom))\nANSWER:\tFalse"], ["TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (PublishedByNewVesselPress(x) -> TranslatedIntoEnglish(x))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedByNewVesselPress(x) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedByNewVesselPress(NeapolitanChronicles)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedByNewVesselPress(PalaceOfFlies)\nTEXT:\tPalace of Flies was translated from Italian.\nFOL:\tTranslatedFrom(PalaceOfFlies, Italian)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tForAll x. (PublishingHouse(x) & SpecializesIn(x, TranslatingForeignLiteratureIntoEnglish) -> NewVesselPress(x))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tForAll x. (Book(x) & PublishedBy(x, NewVesselPress) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tBook(NeapolitanChronicles) & PublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tBook(PalaceOfFlies) & PublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tPalace of Flies was translated from Italian.\nFOL:\tTranslatedFrom(PalaceOfFlies, Italian)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (Publishes(NewVesselPress, x) -> TranslatedToEnglish(x))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (Publishes(NewVesselPress, x) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishes(NewVesselPress, NeapolitanChronicles)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishes(NewVesselPress, PalaceOfFlies)\nTEXT:\tPalace of Flies was translated from Italian.\nFOL:\tTranslatedFrom(PalaceOfFlies, Italian)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (NewVesselPress(x) -> PublishingHouse(x) & Specializes(x, TranslatingForeignLiterature))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tPalace of Flies was translated from Italian.\nFOL:\tTranslatedFrom(PalaceOfFlies, Italian)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (PublishBy(NewVesselPress, x) -> TranslatedIntoEnglish(x))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishBy(NewVesselPress, x) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishBy(NewVesselPress, NeapolitanChronicles)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishBy(NewVesselPress, PalaceOfFlies)\nTEXT:\tPalace of Flies was translated from Italian.\nFOL:\tTranslatedFrom(PalaceOfFlies, Italian)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\texists x. (PublishingHouse(x) & Specializes(x, TranslatingIntoEnglish))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBy(x, NewVesselPress) -> English(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tPalace of Flies was translated from Italian.\nFOL:\tTranslatedFrom(PalaceOfFlies, Italian)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (Publishes(NewVesselPress, x) -> TranslatedIntoEnglish(x))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (Publishes(NewVesselPress, x) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishes(NewVesselPress, NeapolitanChronicles)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishes(NewVesselPress, PalaceOfFlies)\nTEXT:\tPalace of Flies was translated from Italian.\nFOL:\tTranslatedFrom(PalaceOfFlies, Italian)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (PublishingHouse(NewVesselPress) & Specializes(NewVesselPress, TranslatingForeignLiteratureIntoEnglish))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (Published(NewVesselPress, x) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublished(NewVesselPress, NeapolitanChronicles)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublished(NewVesselPress, PalaceOfFlies)\nTEXT:\tPalace of Flies was translated from Italian.\nFOL:\tTranslatedFrom(PalaceOfFlies, Italian)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (Book(x) & PublishedBy(x, NewVesselPress) -> TranslatedIntoEnglish(x))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (Book(x) & PublishedBy(x, NewVesselPress) -> InEnglish(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tBook(NeapolitanChronicles) & PublishedBy(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tBook(PalaceOfFlies) & PublishedBy(PalaceOfFlies, NewVesselPress)\nTEXT:\tPalace of Flies was translated from Italian.\nFOL:\tTranslatedFrom(PalaceOfFlies, Italian)\nANSWER:\tUncertain\n", "TEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tall x. (PublishingHouse(x, NewVesselPress) -> Translates(x, ForeignLiterature, English))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBook(x, NewVesselPress) -> English(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tPublishedBook(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tTranslatedFrom(NeapolitanChronicles, Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPublishedBook(PalaceOfFlies, NewVesselPress)\nTEXT:\tPalace of Flies was translated from Italian.\nFOL:\tTranslatedFrom(PalaceOfFlies, Italian)\nANSWER:\tUncertain\n"], ["TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is ugly or yellow.\nFOL:\t(Ugly(Ben) | Yellow(Ben))\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is ugly or yellow.\nFOL:\t(Ugly(Ben) | Yellow(Ben))\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is ugly or yellow.\nFOL:\t(Ugly(Ben) | Yellow(Ben))\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is ugly or yellow.\nFOL:\t(Ugly(Ben) | Yellow(Ben))\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is ugly or yellow.\nFOL:\t(Ugly(Ben) | Yellow(Ben))\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is ugly or yellow.\nFOL:\t(Ugly(Ben) | Yellow(Ben))\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t((FromTheSimpsons(Ben) & -Funny(Ben)) | (-FromTheSimpsons(Ben) & Funny(Ben)))\nTEXT:\tBen is ugly or yellow.\nFOL:\tUgly(Ben) | Yellow(Ben)\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is ugly or yellow.\nFOL:\t(Ugly(Ben) | Yellow(Ben))\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t(FromTheSimpsons(Ben) | Funny(Ben))\nTEXT:\tBen is ugly or yellow.\nFOL:\t(Ugly(Ben) | Yellow(Ben))\nANSWER:\tUncertain\n", "TEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t((FromTheSimpsons(Ben) & -Funny(Ben)) | (-FromTheSimpsons(Ben) & Funny(Ben)))\nTEXT:\tBen is ugly or yellow.\nFOL:\t((Ugly(Ben) & -Yellow(Ben)) | (-Ugly(Ben) & Yellow(Ben)))\nANSWER:\tUncertain\n"], ["TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOf(x, BakedByMelissa) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are not a product of Baked by Melissa.\nFOL:\t-ProductOf(DriedThaiChilies, BakedByMelissa)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (BakedByMelissaProduct(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are not a product of Baked by Melissa.\nFOL:\t-BakedByMelissaProduct(DriedThaiChilies)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) & -Bakery(DriedThaiChilies)) | (-Spicy(DriedThaiChilies) & Bakery(DriedThaiChilies))) -> ((Hotpot(DriedThaiChilies) & -Spicy(DriedThaiChilies)) | (-Hotpot(DriedThaiChilies) & Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are not a product of Baked by Melissa.\nFOL:\t-ProductOfBakedByMelissa(DriedThaiChilies)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are not a product of Baked by Melissa.\nFOL:\t-ProductOfBakedByMelissa(DriedThaiChilies)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOf(x, BakedByMelissa) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are not a product of Baked by Melissa.\nFOL:\t-ProductOf(DriedThaiChilies, BakedByMelissa)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOf(x, BakedByMelissa) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are not a product of Baked by Melissa.\nFOL:\t-ProductOf(DriedThaiChilies, BakedByMelissa)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are not a product of Baked by Melissa.\nFOL:\t-ProductOfBakedByMelissa(DriedThaiChilies)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) & -Bakery(DriedThaiChilies)) | (-Spicy(DriedThaiChilies) & Bakery(DriedThaiChilies))) -> ((Hotpot(DriedThaiChilies) & -Spicy(DriedThaiChilies)) | (-Hotpot(DriedThaiChilies) & Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are not a product of Baked by Melissa.\nFOL:\t-ProductOfBakedByMelissa(DriedThaiChilies)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))\nTEXT:\tDried Thai chilies are not a product of Baked by Melissa.\nFOL:\t-Product(DriedThaiChilies, BakedByMelissa)\nANSWER:\tTrue\n", "TEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are not a product of Baked by Melissa.\nFOL:\t-ProductOfBakedByMelissa(DriedThaiChilies)\nANSWER:\tTrue\n"], ["TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignStyleZahaHadid(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\t(DesignStyleZahaHadid(x) | DesignStyleKellyWearstler(x))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignMax(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is evocative and dreamy.\nFOL:\tDesignMax(x) & Evocative(x) & Dreamy(x)\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignByZahaHadid(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\tDesignByZahaHadid(x) | DesignByKellyWearstler(x)\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignByKellyWearstler(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignByKellyWearstler(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignByMax(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is evocative and dreamy.\nFOL:\tDesignByMax(x) & Evocative(x) & Dreamy(x)\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (ZahaHadidDesignStyle(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\tZahaHadidDesignStyle(x) | KellyWearstlerDesignStyle(x)\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (MaxDesign(x) & Timeless(x) -> MassProductDesign(x) & Evocative(x))\nTEXT:\tA design by Max is evocative and dreamy.\nFOL:\tMaxDesign(x) & Evocative(x) & Dreamy(x)\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignStyle(x, ZahaHadid) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\tDesignStyle(x, ZahaHadid) | DesignStyle(x, KellyWearstler)\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignStyle(x, KellyWearstler) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignStyle(x, KellyWearstler) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (Design(x, Max) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is evocative and dreamy.\nFOL:\tDesign(x, Max) & Evocative(x) & Dreamy(x)\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\t(exists x. ZahaHadidDesign(x)) | (exists x. KellyWearstlerDesign(x))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (MaxDesign(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is evocative and dreamy.\nFOL:\texists x. (MaxDesign(x) & Evocative(x) & Dreamy(x))\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignStyleZahaHadid(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\tDesignStyleZahaHadid(x) | DesignStyleKellyWearstler(x)\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignStyleKellyWearstler(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignMax(x) & Timeless(x) -> MassProductDesign(x) & Evocative(x))\nTEXT:\tA design by Max is evocative and dreamy.\nFOL:\tDesignMax(x) & Evocative(x) & Dreamy(x)\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (DesignStyleOfZahaHadid(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\tDesignStyleOfZahaHadid(x) | DesignStyleOfKellyWearstler(x)\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (DesignStyleOfKellyWearstler(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (DesignStyleOfKellyWearstler(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (DesignByMax(x) & Timeless(x) -> MassProductDesign(x) & Evocative(x))\nTEXT:\tA design by Max is evocative and dreamy.\nFOL:\texists x. (DesignByMax(x) & Evocative(x) & Dreamy(x))\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (ZahaHadidDesignStyle(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\tZahaHadidDesignStyle(x) | KellyWearstlerDesignStyle(x)\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (MaxDesign(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is evocative and dreamy.\nFOL:\tMaxDesign(x) & Evocative(x) & Dreamy(x)\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (ZahaHadidDesignStyle(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\t(ZahaHadidDesignStyle(x) | KellyWearstlerDesignStyle(x))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (MaxDesign(x) & Timeless(x) -> MassProductDesign(x) & Evocative(x))\nTEXT:\tA design by Max is evocative and dreamy.\nFOL:\tEvocative(MaxDesign) & Dreamy(MaxDesign)\nANSWER:\tUncertain\n", "TEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (ZahaHadidDesignStyle(x) -> Timeless(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tall x. (MassProductDesign(x) -> -Timeless(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\t((exists x. ZahaHadidDesignStyle(x)) | (exists x. KellyWearstlerDesignStyle(x)))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tall x. (MaxDesign(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\nTEXT:\tA design by Max is evocative and dreamy.\nFOL:\texists x. (MaxDesign(x) & Evocative(x) & Dreamy(x))\nANSWER:\tUncertain\n"], ["TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (NotLiveAtHomeRegularly(x) -> NotDevelopStrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> NotLiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((TwinOrTriplet(Luke) & DevelopStrongBonds(Luke)) | (-TwinOrTriplet(Luke) & -DevelopStrongBonds(Luke)))\nTEXT:\tLuke complains often about annoying siblings.\nFOL:\tComplainAboutSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((TwinsOrTriplets(Luke) & StrongBonds(Luke)) | (-TwinsOrTriplets(Luke) & -StrongBonds(Luke)))\nTEXT:\tLuke complains often about annoying siblings.\nFOL:\tComplainAboutSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (NotLiveAtHomeRegularly(x) -> NotDevelopStrongFamilyBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> NotLiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((TwinsOrTriplets(Luke) & DevelopStrongFamilyBonds(Luke)) | (-TwinsOrTriplets(Luke) & -DevelopStrongFamilyBonds(Luke)))\nTEXT:\tLuke complains often about annoying siblings.\nFOL:\tComplainAnnoyingSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSibling(x) -> (Twin(x) | Triplet(x)))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAnnoyingSiblings(x) -> SameAgeSibling(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHomeRegularly(x) -> -StrongBondsFamily(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t(((Twin(Luke) | Triplet(Luke)) & StrongBondsFamily(Luke)) | (-Twin(Luke) & -Triplet(Luke) & -StrongBondsFamily(Luke)))\nTEXT:\tLuke complains often about annoying siblings.\nFOL:\tComplainAnnoyingSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (NotLiveAtHomeRegularly(x) -> NotDevelopStrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> NotLiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((TwinsOrTriplets(Luke) & DevelopStrongBonds(Luke)) | (-TwinsOrTriplets(Luke) & -DevelopStrongBonds(Luke)))\nTEXT:\tLuke complains often about annoying siblings.\nFOL:\tComplainAboutSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (HaveSameAgeSiblings(x) -> (Twin(x) | Triplet(x)))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> HaveSameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((Twin(Luke) | Triplet(Luke)) & DevelopStrongBonds(Luke)) | ((-Twin(Luke) & -Triplet(Luke)) & -DevelopStrongBonds(Luke))\nTEXT:\tLuke complains often about annoying siblings.\nFOL:\tComplainAboutSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (NotLiveAtHomeRegularly(x) -> NotDevelopStrongFamilyBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> NotLiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((TwinsOrTriplets(Luke) & DevelopStrongFamilyBonds(Luke)) | (-TwinsOrTriplets(Luke) & -DevelopStrongFamilyBonds(Luke)))\nTEXT:\tLuke complains often about annoying siblings.\nFOL:\tComplainAboutSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (NotLiveAtHome(x) -> NotDevelopStrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> NotLiveAtHome(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((TwinOrTriplet(Luke) & DevelopStrongBonds(Luke)) | (-TwinOrTriplet(Luke) & -DevelopStrongBonds(Luke)))\nTEXT:\tLuke complains often about annoying siblings.\nFOL:\tComplainAboutSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (NotLiveAtHomeRegularly(x) -> NotStrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> NotLiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((TwinOrTriplet(Luke) & StrongBonds(Luke)) | (-TwinOrTriplet(Luke) & -StrongBonds(Luke)))\nTEXT:\tLuke complains often about annoying siblings.\nFOL:\tComplainAboutSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> (Twin(x) | Triplet(x)))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((Twin(Luke) | Triplet(Luke)) & StrongBonds(Luke)) | ((-Twin(Luke) & -Triplet(Luke)) & -StrongBonds(Luke))\nTEXT:\tLuke complains often about annoying siblings.\nFOL:\tComplainAboutSiblings(Luke)\nANSWER:\tUncertain\n"], ["TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tHasAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George will not compose, George can not compose.\nFOL:\t-WillCompose(George) -> -CanCompose(George)\nANSWER:\tUncertain\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tHasAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George will not compose, George can not compose.\nFOL:\t-WillCompose(George) -> -CanCompose(George)\nANSWER:\tUncertain\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George will not compose, George can not compose.\nFOL:\t-WillCompose(George) -> -CanCompose(George)\nANSWER:\tUncertain\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George will not compose, George can not compose.\nFOL:\t-WillCompose(George) -> -CanCompose(George)\nANSWER:\tUncertain\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tHasAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George will not compose, George can not compose.\nFOL:\t-WillCompose(George) -> -CanCompose(George)\nANSWER:\tUncertain\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tHasAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George will not compose, George can not compose.\nFOL:\t-WillCompose(George) -> -CanCompose(George)\nANSWER:\tUncertain\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tHasAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George will not compose, George can not compose.\nFOL:\t-WillCompose(George) -> -CanCompose(George)\nANSWER:\tUncertain\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tHasAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George will not compose, George can not compose.\nFOL:\t-WillCompose(George) -> -CanCompose(George)\nANSWER:\tUncertain\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tHasAccessToProgram(George) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George will not compose, George can not compose.\nFOL:\t-WillCompose(George) -> -CanCompose(George)\nANSWER:\tUncertain\n", "TEXT:\tIf George likes music, he wants to compose.\nFOL:\tLikesMusic(George) -> WantsToCompose(George)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tHasAccess(George, Program) -> CanCompose(George)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\t(CanCompose(George) & WantsToCompose(George)) -> WillCompose(George)\nTEXT:\tIf George will not compose, George can not compose.\nFOL:\t-WillCompose(George) -> -CanCompose(George)\nANSWER:\tTrue\n"], ["TEXT:\tAll cats are mammals.\nFOL:\tall x. (Cat(x) -> Mammal(x))\nTEXT:\tSome pets are not mammals.\nFOL:\texists x. (Pet(x) & -Mammal(x))\nTEXT:\tNo pets are cats.\nFOL:\tall x. (Pet(x) -> -Cat(x))\nANSWER:\tUncertain\n", "TEXT:\tAll cats are mammals.\nFOL:\tall x. (Cat(x) -> Mammal(x))\nTEXT:\tSome pets are not mammals.\nFOL:\texists x. (Pet(x) & -Mammal(x))\nTEXT:\tNo pets are cats.\nFOL:\tall x. (Pet(x) -> -Cat(x))\nANSWER:\tUncertain\n", "TEXT:\tAll cats are mammals.\nFOL:\tall x. (Cat(x) -> Mammal(x))\nTEXT:\tSome pets are not mammals.\nFOL:\texists x. (Pet(x) & -Mammal(x))\nTEXT:\tNo pets are cats.\nFOL:\tall x. (Pet(x) -> -Cat(x))\nANSWER:\tUncertain\n", "TEXT:\tAll cats are mammals.\nFOL:\tall x. (Cat(x) -> Mammal(x))\nTEXT:\tSome pets are not mammals.\nFOL:\texists x. (Pet(x) & -Mammal(x))\nTEXT:\tNo pets are cats.\nFOL:\tall x. (Pet(x) -> -Cat(x))\nANSWER:\tUncertain\n", "TEXT:\tAll cats are mammals.\nFOL:\tall x. (Cat(x) -> Mammal(x))\nTEXT:\tSome pets are not mammals.\nFOL:\texists x. (Pet(x) & -Mammal(x))\nTEXT:\tNo pets are cats.\nFOL:\tall x. (Pet(x) -> -Cat(x))\nANSWER:\tUncertain\n", "TEXT:\tAll cats are mammals.\nFOL:\tall x. (Cat(x) -> Mammal(x))\nTEXT:\tSome pets are not mammals.\nFOL:\texists x. (Pet(x) & -Mammal(x))\nTEXT:\tNo pets are cats.\nFOL:\tall x. (Pet(x) -> -Cat(x))\nANSWER:\tUncertain\n", "TEXT:\tAll cats are mammals.\nFOL:\tall x. (Cat(x) -> Mammal(x))\nTEXT:\tSome pets are not mammals.\nFOL:\texists x. (Pet(x) & -Mammal(x))\nTEXT:\tNo pets are cats.\nFOL:\tall x. (Pet(x) -> -Cat(x))\nANSWER:\tUncertain\n", "TEXT:\tAll cats are mammals.\nFOL:\tall x. (Cat(x) -> Mammal(x))\nTEXT:\tSome pets are not mammals.\nFOL:\texists x. (Pet(x) & -Mammal(x))\nTEXT:\tNo pets are cats.\nFOL:\tall x. (Pet(x) -> -Cat(x))\nANSWER:\tUncertain\n", "TEXT:\tAll cats are mammals.\nFOL:\tall x. (Cat(x) -> Mammal(x))\nTEXT:\tSome pets are not mammals.\nFOL:\texists x. (Pet(x) & -Mammal(x))\nTEXT:\tNo pets are cats.\nFOL:\tall x. (Pet(x) -> -Cat(x))\nANSWER:\tUncertain\n", "TEXT:\tAll cats are mammals.\nFOL:\tall x. (Cat(x) -> Mammal(x))\nTEXT:\tSome pets are not mammals.\nFOL:\texists x. (Pet(x) & -Mammal(x))\nTEXT:\tNo pets are cats.\nFOL:\tall x. (Pet(x) -> -Cat(x))\nANSWER:\tUncertain\n"], ["TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tAtLeastOneChild(John) -> -TravelToParisForHoneymoon(John) & -Wedding(John)\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\tWellAttended(John's wedding) -> WeddingInJuly(John) | TravelToParisForHoneymoon(John)\nTEXT:\tJohn does not have a wedding that is well-attended.\nFOL:\t-WellAttended(John's wedding)\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> Child(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParis(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (JulyWedding(x) -> TravelToParis(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (JulyWedding(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tChild(John) -> -TravelToParis(John) & -Wedding(John)\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\tWellAttended(John) & Wedding(John) -> JulyWedding(John) | TravelToParis(John)\nTEXT:\tJohn does not have a wedding that is well-attended.\nFOL:\t-WellAttended(John) & -Wedding(John)\nANSWER:\tTrue\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> Child(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (HoneymoonParis(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingJuly(x) -> HoneymoonParis(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tChild(John) -> (-HoneymoonParis(John) & -Wedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(Wedding(John) & WellAttended(John)) -> (WeddingJuly(John) | HoneymoonParis(John))\nTEXT:\tJohn does not have a wedding that is well-attended.\nFOL:\t-(Wedding(John) & WellAttended(John))\nANSWER:\tTrue\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (HasWedding(x) -> HasChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (HoneymoonParis(x) -> HasWedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingJuly(x) -> HoneymoonParis(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHasChild(John) -> (-HoneymoonParis(John) & -HasWedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\tHasWedding(John) & WellAttended(John) -> (WeddingJuly(John) | HoneymoonParis(John))\nTEXT:\tJohn does not have a wedding that is well-attended.\nFOL:\t-HasWedding(John) & -WellAttended(John)\nANSWER:\tTrue\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> Child(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tChild(John) -> (-TravelToParisForHoneymoon(John) & -Wedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(WellAttended(John) & Wedding(John)) -> (WeddingInJuly(John) | TravelToParisForHoneymoon(John))\nTEXT:\tJohn does not have a wedding that is well-attended.\nFOL:\t-WellAttended(John) | -Wedding(John)\nANSWER:\tTrue\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> HaveChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelParisHoneymoon(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingJuly(x) -> TravelParisHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHaveChild(John) -> (-TravelParisHoneymoon(John) & -Wedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(Wedding(John) & WellAttended(John)) -> (WeddingJuly(John) | -WeddingJuly(John) & TravelParisHoneymoon(John))\nTEXT:\tJohn does not have a wedding that is well-attended.\nFOL:\t-(Wedding(John) & WellAttended(John))\nANSWER:\tUncertain\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (HasWedding(x) -> HasChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelParisHoneymoon(x) -> HasWedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelParisHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHasChild(John) -> -TravelParisHoneymoon(John) & -HasWedding(John)\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\tHasWedding(John) & WellAttended(John) -> WeddingInJuly(John) | TravelParisHoneymoon(John)\nTEXT:\tJohn does not have a wedding that is well-attended.\nFOL:\t-HasWedding(John) & -WellAttended(John)\nANSWER:\tTrue\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHasAtLeastOneChild(John) -> (-TravelToParisForHoneymoon(John) & -HasWedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(HasWedding(John) & WellAttended(John)) -> (WeddingInJuly(John) | TravelToParisForHoneymoon(John))\nTEXT:\tJohn does not have a wedding that is well-attended.\nFOL:\t-(HasWedding(John) & WellAttended(John))\nANSWER:\tTrue\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHasAtLeastOneChild(John) -> (-TravelToParisForHoneymoon(John) & -HasWedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(HasWedding(John) & WellAttended(John)) -> (WeddingInJuly(John) | TravelToParisForHoneymoon(John))\nTEXT:\tJohn does not have a wedding that is well-attended.\nFOL:\t-HasWedding(John) | -WellAttended(John)\nANSWER:\tTrue\n", "TEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (HasWedding(x) -> HasChild(x))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\texists x. (JulyWedding(x) & WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tHasChild(John) -> (-TravelToParisForHoneymoon(John) & -HasWedding(John))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(HasWedding(John) & WellAttended(John)) -> (JulyWedding(John) | TravelToParisForHoneymoon(John))\nTEXT:\tJohn does not have a wedding that is well-attended.\nFOL:\t-(HasWedding(John) & WellAttended(John))\nANSWER:\tTrue\n"], ["TEXT:\tBillings is a city in Montana.\nFOL:\tIn(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tIn(Butte, Montana) & In(Helena, Montana) & In(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists x. (In(WhiteSulphurSprings, x) & In(Butte, x))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-In(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (In(x, Butte) -> -In(x, Pierre))\nTEXT:\tMontana is home to the city of Missoula.\nFOL:\tIn(Missoula, Montana)\nANSWER:\tTrue\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists x. (CityInState(WhiteSulphurSprings, x) & CityInState(Butte, x))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInCity(x, Butte) -> -CityInCity(x, Pierre))\nTEXT:\tMontana is home to the city of Missoula.\nFOL:\tCityInState(Missoula, Montana)\nANSWER:\tTrue\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists x. (CityInState(WhiteSulphurSprings, x) & CityInState(Butte, x))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInCity(x, Butte) -> -CityInCity(x, Pierre))\nTEXT:\tMontana is home to the city of Missoula.\nFOL:\tCityInState(Missoula, Montana)\nANSWER:\tTrue\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists x. (CityInState(WhiteSulphurSprings, x) & CityInState(Butte, x))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInCity(x, Butte) -> -CityInCity(x, Pierre))\nTEXT:\tMontana is home to the city of Missoula.\nFOL:\tCityInState(Missoula, Montana)\nANSWER:\tTrue\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists x. (CityInState(WhiteSulphurSprings, x) & CityInState(Butte, x))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInButte(x) -> -CityInPierre(x))\nTEXT:\tMontana is home to the city of Missoula.\nFOL:\tCityInState(Missoula, Montana)\nANSWER:\tTrue\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists x. (CityInState(WhiteSulphurSprings, x) & CityInState(Butte, x))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInCity(x, Butte) -> -CityInCity(x, Pierre))\nTEXT:\tMontana is home to the city of Missoula.\nFOL:\tCityInState(Missoula, Montana)\nANSWER:\tTrue\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists x. (CityInState(WhiteSulphurSprings, x) & CityInState(Butte, x))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInCity(x, Butte) -> -CityInCity(x, Pierre))\nTEXT:\tMontana is home to the city of Missoula.\nFOL:\tCityInState(Missoula, Montana)\nANSWER:\tTrue\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists x. (CityInState(WhiteSulphurSprings, x) & CityInState(Butte, x))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInButte(x) -> -CityInPierre(x))\nTEXT:\tMontana is home to the city of Missoula.\nFOL:\tCityInState(Missoula, Montana)\nANSWER:\tTrue\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists x. (CityInState(WhiteSulphurSprings, x) & CityInState(Butte, x))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInButte(x) -> -CityInPierre(x))\nTEXT:\tMontana is home to the city of Missoula.\nFOL:\tCityInState(Missoula, Montana)\nANSWER:\tTrue\n", "TEXT:\tBillings is a city in Montana.\nFOL:\tCityInState(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCityInState(Butte, Montana) & CityInState(Helena, Montana) & CityInState(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\texists x. (CityInState(WhiteSulphurSprings, x) & CityInState(Butte, x))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-CityInState(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\tall x. (CityInCity(x, Butte) -> -CityInCity(x, Pierre))\nTEXT:\tMontana is home to the city of Missoula.\nFOL:\tCityInState(Missoula, Montana)\nANSWER:\tTrue\n"], ["TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x))\nTEXT:\tIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL:\tall x. (ColorectalCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))\nANSWER:\tUncertain\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT:\tIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL:\tall x. ((ColorectalCancer(x) & -MildFlu(x) & -Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))\nANSWER:\tTrue\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x))\nTEXT:\tIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL:\tall x. (ColorectalCancer(x) & -MildFlu(x) & -Cholangiocarcinoma(x) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))\nANSWER:\tFalse\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\t(BileDuctCancer(ColorectalCancer) & LowSurvivalRate(ColorectalCancer)) -> -BileDuctCancer(ColorectalCancer)\nTEXT:\tIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL:\t(-MildFlu(ColorectalCancer) & Cholangiocarcinoma(ColorectalCancer)) -> (BileDuctCancer(ColorectalCancer) | Cholangiocarcinoma(ColorectalCancer))\nANSWER:\tTrue\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\t(BileDuctCancer(ColorectalCancer) & LowSurvivalRate(ColorectalCancer)) -> -BileDuctCancer(ColorectalCancer)\nTEXT:\tIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL:\t(-MildFlu(ColorectalCancer) & Cholangiocarcinoma(ColorectalCancer)) -> (BileDuctCancer(ColorectalCancer) | Cholangiocarcinoma(ColorectalCancer))\nANSWER:\tTrue\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT:\tIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL:\tall x. ((ColorectalCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))\nANSWER:\tUncertain\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\t(BileDuctCancer(ColorectalCancer) & LowSurvivalRate(ColorectalCancer)) -> -BileDuctCancer(ColorectalCancer)\nTEXT:\tIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL:\t(-MildFlu(ColorectalCancer) & -Cholangiocarcinoma(ColorectalCancer)) -> (BileDuctCancer(ColorectalCancer) | Cholangiocarcinoma(ColorectalCancer))\nANSWER:\tTrue\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\t(BileDuctCancer(ColorectalCancer) & LowSurvivalRate(ColorectalCancer)) -> -BileDuctCancer(ColorectalCancer)\nTEXT:\tIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL:\t(-MildFlu(ColorectalCancer) & -Cholangiocarcinoma(ColorectalCancer)) -> (BileDuctCancer(ColorectalCancer) | Cholangiocarcinoma(ColorectalCancer))\nANSWER:\tUncertain\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT:\tIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL:\tall x. ((ColorectalCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))\nANSWER:\tUncertain\n", "TEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\tall x. (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x))\nTEXT:\tIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL:\tall x. (ColorectalCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))\nANSWER:\tTrue\n"], ["TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMeals(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> NotPickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> SpendTimeEatingWithFriends(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJobs(Mary) & NeedToEarnMoney(Mary)) -> (NotPickyEater(Mary) & -NeedToEarnMoney(Mary))\nTEXT:\tMary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\tNotPickyEater(Mary) & SpendTimeEatingWithFriends(Mary)\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkStudentJobsOnCampus(x) -> NeedMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> WorkStudentJobsOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMeals(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> NotPicky(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> SpendTimeInDiningHalls(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkStudentJobsOnCampus(Mary) & NeedMoneyForTuition(Mary)) -> (NotPicky(Mary) & -NeedMoneyForTuition(Mary))\nTEXT:\tMary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\tNotPicky(Mary) & SpendTimeInDiningHalls(Mary)\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeoutFrequentlyInCollege(x) | EnjoyDiningHallMealsAndRecipes(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUp(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJobsOnCampus(Mary) & NeedToEarnMoneyForTuition(Mary)) -> (-Picky(Mary) & -NeedToEarnMoneyForTuition(Mary))\nTEXT:\tMary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\tNotPickyEaters(Mary) & SpendTimeEatingAndCatchingUp(Mary)\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (StudentJobOnCampus(x) -> EarnMoney(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeout(x) -> StudentJobOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeout(x) | EnjoyDiningHall(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHall(x) -> NotPicky(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHall(x) -> SpendTimeDiningHall(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(StudentJobOnCampus(Mary) & EarnMoney(Mary)) -> (NotPicky(Mary) & -EarnMoney(Mary))\nTEXT:\tMary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\tNotPicky(Mary) & SpendTimeDiningHall(Mary)\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkStudentJobsOnCampus(x) -> NeedToEarnMoney(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> WorkStudentJobsOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriends(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkStudentJobsOnCampus(Mary) & NeedToEarnMoney(Mary)) -> (NotPicky(Mary) & -NeedToEarnMoney(Mary))\nTEXT:\tMary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\tNotPicky(Mary) & SpendTimeEatingAndCatchingUpWithFriends(Mary)\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJobOnCampus(x) -> NeedToEarnMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. ((OrderTakeoutFrequentlyInCollege(x) & -EnjoyDiningHallMealsAndRecipes(x)) | (-OrderTakeoutFrequentlyInCollege(x) & EnjoyDiningHallMealsAndRecipes(x)))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpInDiningHall(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJobOnCampus(Mary) & NeedToEarnMoneyForTuition(Mary)) -> (NotPickyEater(Mary) & -NeedToEarnMoneyForTuition(Mary))\nTEXT:\tMary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\tNotPickyEater(Mary) & SpendTimeEatingAndCatchingUpInDiningHall(Mary)\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> WorkInStudentJobsOnCampus(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. ((OrderTakeoutFrequently(x) & -EnjoyDiningHallMeals(x)) | (-OrderTakeoutFrequently(x) & EnjoyDiningHallMeals(x)))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> NotPickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> SpendTimeInDiningHalls(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJobsOnCampus(Mary) & NeedToEarnMoneyForTuition(Mary)) -> (NotPickyEater(Mary) & -NeedToEarnMoneyForTuition(Mary))\nTEXT:\tMary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\tNotPickyEater(Mary) & SpendTimeInDiningHalls(Mary)\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJobs(x) -> NeedMoneyForTuition(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tforall x. (OrderTakeoutFrequently(x) | EnjoyDiningHall(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJobs(Mary) & NeedMoneyForTuition(Mary)) -> (-PickyEater(Mary) & -NeedMoneyForTuition(Mary))\nTEXT:\tMary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\t-PickyEater(Mary) & SpendTimeEating(Mary)\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMeals(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> NotPicky(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJobs(Mary) & NeedToEarnMoney(Mary)) -> (NotPicky(Mary) & -NeedToEarnMoney(Mary))\nTEXT:\tMary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\tNotPicky(Mary) & SpendTimeEating(Mary)\nANSWER:\tUncertain\n", "TEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (OrderTakeoutFrequently(x) | EnjoyDiningHall(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDiningHall(x) -> NotPickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDiningHall(x) -> SpendTimeInDiningHalls(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:\t(WorkInStudentJobs(Mary) & NeedToEarnMoney(Mary)) -> (-Picky(Mary) & -NeedToEarnMoney(Mary))\nTEXT:\tMary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL:\tNotPicky(Mary) & SpendTimeInDiningHalls(Mary)\nANSWER:\tUncertain\n"], ["TEXT:\tEvents are either happy or sad.\nFOL:\tall x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT:\tAt least one event is happy.\nFOL:\texists x. (Event(x) & Happy(x))\nTEXT:\tAll events are sad.\nFOL:\tall x. (Event(x) -> Sad(x))\nANSWER:\tFalse\n", "TEXT:\tEvents are either happy or sad.\nFOL:\tall x. (Event(x) -> Happy(x) | Sad(x))\nTEXT:\tAt least one event is happy.\nFOL:\texists x. (Event(x) & Happy(x))\nTEXT:\tAll events are sad.\nFOL:\tall x. (Event(x) -> Sad(x))\nANSWER:\tFalse\n", "TEXT:\tEvents are either happy or sad.\nFOL:\tall x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT:\tAt least one event is happy.\nFOL:\texists x. (Event(x) & Happy(x))\nTEXT:\tAll events are sad.\nFOL:\tall x. (Event(x) -> Sad(x))\nANSWER:\tFalse\n", "TEXT:\tEvents are either happy or sad.\nFOL:\tall x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT:\tAt least one event is happy.\nFOL:\texists x. (Event(x) & Happy(x))\nTEXT:\tAll events are sad.\nFOL:\tall x. (Event(x) -> Sad(x))\nANSWER:\tFalse\n", "TEXT:\tEvents are either happy or sad.\nFOL:\tall x. (Event(x) -> Happy(x) | Sad(x))\nTEXT:\tAt least one event is happy.\nFOL:\texists x. (Event(x) & Happy(x))\nTEXT:\tAll events are sad.\nFOL:\tall x. (Event(x) -> Sad(x))\nANSWER:\tFalse\n", "TEXT:\tEvents are either happy or sad.\nFOL:\tall x. (Event(x) -> Happy(x) | Sad(x))\nTEXT:\tAt least one event is happy.\nFOL:\texists x. (Event(x) & Happy(x))\nTEXT:\tAll events are sad.\nFOL:\tall x. (Event(x) -> Sad(x))\nANSWER:\tFalse\n", "TEXT:\tEvents are either happy or sad.\nFOL:\tall x. (Event(x) -> Happy(x) | Sad(x))\nTEXT:\tAt least one event is happy.\nFOL:\texists x. (Event(x) & Happy(x))\nTEXT:\tAll events are sad.\nFOL:\tall x. (Event(x) -> Sad(x))\nANSWER:\tFalse\n", "TEXT:\tEvents are either happy or sad.\nFOL:\tall x. (Event(x) -> Happy(x) | Sad(x))\nTEXT:\tAt least one event is happy.\nFOL:\texists x. (Event(x) & Happy(x))\nTEXT:\tAll events are sad.\nFOL:\tall x. (Event(x) -> Sad(x))\nANSWER:\tFalse\n", "TEXT:\tEvents are either happy or sad.\nFOL:\tall x. (Event(x) -> Happy(x) | Sad(x))\nTEXT:\tAt least one event is happy.\nFOL:\texists x. (Event(x) & Happy(x))\nTEXT:\tAll events are sad.\nFOL:\tall x. (Event(x) -> Sad(x))\nANSWER:\tFalse\n", "TEXT:\tEvents are either happy or sad.\nFOL:\tall x. (Event(x) -> Happy(x) | Sad(x))\nTEXT:\tAt least one event is happy.\nFOL:\texists x. (Event(x) & Happy(x))\nTEXT:\tAll events are sad.\nFOL:\tall x. (Event(x) -> Sad(x))\nANSWER:\tFalse\n"], ["TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (PlateInIstanbul(x) -> BeginsWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginsWith34(x) -> -PlateInIstanbul(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tPlateInIstanbul(JoePlate)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginsWith35(TomPlate)\nTEXT:\tIf a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT:\tJoe's license plate begins with the number 34.\nFOL:\tBeginsWith34(JoePlate)\nANSWER:\tTrue\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tFromIstanbul(Joe)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginsWith35(Tom)\nTEXT:\t[BG] If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT:\tJoe's license plate begins with the number 34.\nFOL:\tBeginsWith34(Joe)\nANSWER:\tTrue\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (RegistrationPlateInIstanbul(x) -> BeginWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginWith34(x) -> -RegistrationPlateInIstanbul(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tRegistrationPlateInIstanbul(Joe)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginWith35(Tom)\nTEXT:\tIf a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginWith35(x) -> -BeginWith34(x))\nTEXT:\tJoe's license plate begins with the number 34.\nFOL:\tBeginWith34(Joe)\nANSWER:\tTrue\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (IstanbulPlate(x) -> BeginsWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginsWith34(x) -> -IstanbulPlate(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tIstanbulPlate(JoePlate)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginsWith35(TomPlate)\nTEXT:\tIf a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT:\tJoe's license plate begins with the number 34.\nFOL:\tBeginsWith34(JoePlate)\nANSWER:\tTrue\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (PlateFromIstanbul(x) -> BeginsWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginsWith34(x) -> -PlateFromIstanbul(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tPlateFromIstanbul(JoesPlate)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginsWith35(TomsPlate)\nTEXT:\tIf a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT:\tJoe's license plate begins with the number 34.\nFOL:\tBeginsWith34(JoesPlate)\nANSWER:\tTrue\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (IstanbulPlate(x) -> Begins34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-Begins34(x) -> -IstanbulPlate(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tIstanbulPlate(Joe)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBegins35(Tom)\nTEXT:\tIf a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (Begins35(x) -> -Begins34(x))\nTEXT:\tJoe's license plate begins with the number 34.\nFOL:\tBegins34(Joe)\nANSWER:\tTrue\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (PlateFromIstanbul(x) -> BeginWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginWith34(x) -> -PlateFromIstanbul(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tPlateFromIstanbul(Joe)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginWith35(Tom)\nTEXT:\tIf a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginWith35(x) -> -BeginWith34(x))\nTEXT:\tJoe's license plate begins with the number 34.\nFOL:\tBeginWith34(Joe)\nANSWER:\tTrue\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (IstanbulPlate(x) -> BeginsWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginsWith34(x) -> -IstanbulPlate(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tIstanbulPlate(Joe)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginsWith35(Tom)\nTEXT:\t[BG] If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT:\tJoe's license plate begins with the number 34.\nFOL:\tBeginsWith34(Joe)\nANSWER:\tTrue\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (PlateFromIstanbul(x) -> BeginsWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginsWith34(x) -> -PlateFromIstanbul(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tPlateFromIstanbul(Joe)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginsWith35(Tom)\nTEXT:\t[BG] If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT:\tJoe's license plate begins with the number 34.\nFOL:\tBeginsWith34(Joe)\nANSWER:\tTrue\n", "TEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (VehiclePlateFromIstanbul(x) -> BeginsWith34(x))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-BeginsWith34(x) -> -VehiclePlateFromIstanbul(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tVehiclePlateFromIstanbul(Joe)\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tBeginsWith35(Tom)\nTEXT:\tIf a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT:\tJoe's license plate begins with the number 34.\nFOL:\tBeginsWith34(Joe)\nANSWER:\tTrue\n"], ["TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> (Twin(x) | Triplet(x)))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHomeRegularly(x) -> -StrongBondsFamily(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((Twin(Luke) | Triplet(Luke)) & StrongBondsFamily(Luke)) | (-(Twin(Luke) | Triplet(Luke)) & -StrongBondsFamily(Luke))\nTEXT:\tLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL:\t-Twin(Luke) & -Triplet(Luke) & -ComplainAnnoyingSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SiblingsSameAge(x) -> (Twin(x) | Triplet(x)))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SiblingsSameAge(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHomeRegularly(x) -> -StrongBondsFamily(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((Twin(Luke) | Triplet(Luke)) & StrongBondsFamily(Luke)) | ((-Twin(Luke) & -Triplet(Luke)) & -StrongBondsFamily(Luke))\nTEXT:\tLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL:\t-Twin(Luke) & -Triplet(Luke) & -ComplainAboutSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> (Twin(x) | Triplet(x)))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHomeRegularly(x) -> -StrongFamilyBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((Twin(Luke) | Triplet(Luke)) & StrongFamilyBonds(Luke)) | (-Twin(Luke) & -Triplet(Luke) & -StrongFamilyBonds(Luke))\nTEXT:\tLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL:\t-Twin(Luke) & -Triplet(Luke) & -ComplainAboutSiblings(Luke)\nANSWER:\tTrue\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> (Twin(x) | Triplet(x)))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHomeRegularly(x) -> -StrongFamilyBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((Twin(Luke) | Triplet(Luke)) & StrongFamilyBonds(Luke)) | ((-Twin(Luke) & -Triplet(Luke)) & -StrongFamilyBonds(Luke))\nTEXT:\tLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL:\t-Twin(Luke) & -Triplet(Luke) & -ComplainAboutSiblings(Luke)\nANSWER:\tUncertain\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> (Twin(x) | Triplet(x)))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. ((-LiveAtHomeRegularly(x)) -> -StrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> (-LiveAtHomeRegularly(x)))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t(((Twin(Luke) | Triplet(Luke)) & StrongBonds(Luke)) | ((-Twin(Luke) & -Triplet(Luke)) & -StrongBonds(Luke)))\nTEXT:\tLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL:\t(-Twin(Luke) & -Triplet(Luke) & -ComplainAboutSiblings(Luke))\nANSWER:\tTrue\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> (Twin(x) | Triplet(x)))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t(((Twin(Luke) | Triplet(Luke)) & StrongBonds(Luke)) | (-(Twin(Luke) | Triplet(Luke)) & -StrongBonds(Luke)))\nTEXT:\tLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL:\t(-Twin(Luke) & -Triplet(Luke) & -ComplainAboutSiblings(Luke))\nANSWER:\tTrue\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> (Twin(x) | Triplet(x)))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((Twin(Luke) | Triplet(Luke)) & StrongBonds(Luke)) | (-Twin(Luke) & -Triplet(Luke) & -StrongBonds(Luke))\nTEXT:\tLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL:\t-Twin(Luke) & -Triplet(Luke) & -ComplainAboutSiblings(Luke)\nANSWER:\tTrue\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (HaveSameAgeSiblings(x) -> (Twin(x) | Triplet(x)))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> HaveSameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((Twin(Luke) | Triplet(Luke)) & DevelopStrongBonds(Luke)) | ((-Twin(Luke) & -Triplet(Luke)) & -DevelopStrongBonds(Luke))\nTEXT:\tLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL:\t-Twin(Luke) & -Triplet(Luke) & -ComplainAboutSiblings(Luke)\nANSWER:\tTrue\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (NotLiveAtHomeRegularly(x) -> NotDevelopStrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> NotLiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((TwinOrTriplet(Luke) & DevelopStrongBonds(Luke)) | (-TwinOrTriplet(Luke) & -DevelopStrongBonds(Luke)))\nTEXT:\tLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL:\t- TwinOrTriplet(Luke) & - ComplainAboutSiblings(Luke)\nANSWER:\tTrue\n", "TEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (SameAgeSiblings(x) -> (Twin(x) | Triplet(x)))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHomeRegularly(x) -> -StrongFamilyBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT:\tLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL:\t((Twin(Luke) | Triplet(Luke)) & StrongFamilyBonds(Luke)) | ((-Twin(Luke) & -Triplet(Luke)) & -StrongFamilyBonds(Luke))\nTEXT:\tLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL:\t-Twin(Luke) & -Triplet(Luke) & -ComplainAboutSiblings(Luke)\nANSWER:\tTrue\n"], ["TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. ((Man(x) & Man(y) & Taller(x, y)) -> CanBlock(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tall x. ((Classmate(x, Michael) & Man(x)) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\t(Man(Peter) & Taller(Peter, Michael))\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. ((Person(x) & -JumpWhenShooting(x)) -> CanBlock(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-CannotBlock(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. ((Shooter(x) & JumpWhenShooting(x)) -> GreatShooter(x))\nTEXT:\tPeter is shorter than a man in Michael's class.\nFOL:\texists x. (Classmate(x, Michael) & Man(x) & Shorter(Peter, x))\nANSWER:\tFalse\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tMan(Michael) & all x. (InClass(x, MichaelsClass) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z.\nFOL:\tall x. all y. all z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (Person(x) & NotJumpWhenShooting(x) -> CanBlock(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-CanBlock(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & CanJumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tPeter is shorter than a man in Michael's class.\nFOL:\texists x. (InClass(x, MichaelsClass) & Shorter(Peter, x))\nANSWER:\tUncertain\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & TallerThan(x, y) -> CanBlockShooting(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tall x. (InClass(x, Michael) -> TallerThan(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. (TallerThan(x, y) & TallerThan(y, z) -> TallerThan(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tTallerThan(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (Person(x) & -JumpWhenShooting(x) -> CanBlockShooting(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-CannotBlockShooting(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tPeter is shorter than a man in Michael's class.\nFOL:\texists x. (InClass(x, Michael) & ShorterThan(Peter, x))\nANSWER:\tFalse\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tall x. (Classmate(x, Michael) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tTaller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (Man(x) & -JumpWhenShooting(x) -> CanBlock(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-CannotBlock(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tPeter is shorter than a man in Michael's class.\nFOL:\texists x. (Classmate(x, Michael) & Shorter(Peter, x))\nANSWER:\tFalse\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. ((Man(x) & Man(y) & Taller(x, y)) -> CanBlockShooting(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tall x. ((Man(x) & InClass(x, Michael)) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tTaller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. ((Person(x) & -JumpWhenShooting(x)) -> CanBlockShooting(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-CannotBlockShooting(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. ((Shooter(x) & JumpWhenShooting(x)) -> GreatShooter(x))\nTEXT:\tPeter is shorter than a man in Michael's class.\nFOL:\texists x. ((Man(x) & InClass(x, Michael)) & Shorter(Peter, x))\nANSWER:\tFalse\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tMan(Michael) & all x. (InClass(x, Michael) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (Person(x) & -JumpWhenShooting(x) -> CanBlock(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Person(Windy) | -CanBlock(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & CanJumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tPeter is shorter than a man in Michael's class.\nFOL:\texists x. (InClass(x, Michael) & Shorter(Peter, x))\nANSWER:\tFalse\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tall x. (Man(x) & Classmate(x, Michael) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (Man(x) & -JumpWhenShooting(x) -> CanBlock(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Man(CanBlock(Michael, Windy))\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tPeter is shorter than a man in Michael's class.\nFOL:\texists x. (Man(x) & Classmate(x, Michael) & Shorter(Peter, x))\nANSWER:\tFalse\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. ((Man(x) & Man(y) & Taller(x, y)) -> CanBlockShooting(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tall x. ((Man(x) & InClass(x, MichaelsClass)) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. ((Person(x) & -JumpWhenShooting(x)) -> CanBlockShooting(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Person(Windy) | -CanBlockShooting(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. ((Shooter(x) & JumpWhenShooting(x)) -> GreatShooter(x))\nTEXT:\tPeter is shorter than a man in Michael's class.\nFOL:\texists x. (Man(x) & InClass(x, MichaelsClass) & Shorter(Peter, x))\nANSWER:\tFalse\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. ((Man(x) & Man(y) & Taller(x, y)) -> CanBlock(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tMan(Michael) & all y. (InClass(y, Michael) -> Taller(Michael, y))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tMan(Peter) & Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (Man(x) & -JumpWhenShooting(x) -> CanBlock(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-Man(CanBlock(Michael, Windy))\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tPeter is shorter than a man in Michael's class.\nFOL:\texists x. (InClass(x, Michael) & Shorter(Peter, x))\nANSWER:\tFalse\n", "TEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tall x. (Classmate(x, Michael) -> Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. all y. all z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tTaller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (Person(x) & -JumpWhenShooting(x) -> CanBlock(Michael, x))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\t-CanBlock(Michael, Windy)\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:\tPeter is shorter than a man in Michael's class.\nFOL:\texists x. (Classmate(x, Michael) & Shorter(Peter, x))\nANSWER:\tUncertain\n"], ["TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tNaziGermanPolitician(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOfPrussianStateParliament(HeinrichScmidt) & MemberOfNaziReichstag(HeinrichScmidt)\nTEXT:\tSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL:\texists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tNaziGermanPolitician(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOfPrussianStateParliament(HeinrichScmidt) & MemberOfNaziReichstag(HeinrichScmidt)\nTEXT:\tSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL:\texists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tNaziGermanPolitician(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOfPrussianStateParliament(HeinrichScmidt) & MemberOfNaziReichstag(HeinrichScmidt)\nTEXT:\tSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL:\texists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tNaziGermanPolitician(HeinrichSchmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOf(HeinrichSchmidt, PrussianStateParliament) & MemberOf(HeinrichSchmidt, NaziReichstag)\nTEXT:\tSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL:\texists x. (NaziGermanPolitician(x) & MemberOf(x, PrussianStateParliament) & MemberOf(x, NaziReichstag))\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tNaziGermanPolitician(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOfPrussianStateParliament(HeinrichScmidt) & MemberOfNaziReichstag(HeinrichScmidt)\nTEXT:\tSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL:\texists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tNaziPolitician(HeinrichScmidt)\nTEXT:\tHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOf(HeinrichScmidt, PrussianStateParliament) & MemberOf(HeinrichScmidt, NaziReichstag)\nTEXT:\tSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL:\texists x. (NaziPolitician(x) & MemberOf(x, PrussianStateParliament) & MemberOf(x, NaziReichstag))\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tNaziGermanPolitician(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOf(HeinrichScmidt, PrussianStateParliament) & MemberOf(HeinrichScmidt, NaziReichstag)\nTEXT:\tSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL:\texists x. (NaziGermanPolitician(x) & MemberOf(x, PrussianStateParliament) & MemberOf(x, NaziReichstag))\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tNaziGermanPolitician(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOfPrussianStateParliament(HeinrichScmidt) & MemberOfNaziReichstag(HeinrichScmidt)\nTEXT:\tSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL:\texists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tPolitician(HeinrichSchmidt, NaziGerman)\nTEXT:\tHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMember(HeinrichSchmidt, PrussianStateParliament) & Member(HeinrichSchmidt, NaziReichstag)\nTEXT:\tSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL:\texists x. (Politician(x, NaziGerman) & Member(x, PrussianStateParliament) & Member(x, NaziReichstag))\nANSWER:\tTrue\n", "TEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tNaziGermanPolitician(HeinrichScmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tMemberOfPrussianStateParliament(HeinrichScmidt) & MemberOfNaziReichstag(HeinrichScmidt)\nTEXT:\tSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL:\texists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\nANSWER:\tTrue\n"], ["TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL:\t-LargeShoes(Yuri) -> (American(Yuri) & BasketballPlayer(Yuri))\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL:\t-LargeShoes(Yuri) -> (American(Yuri) & BasketballPlayer(Yuri))\nANSWER:\tTrue\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL:\t-LargeShoes(Yuri) -> (American(Yuri) & BasketballPlayer(Yuri))\nANSWER:\tTrue\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL:\t(-LargeShoes(Yuri) -> (BasketballPlayer(Yuri) & American(Yuri)))\nANSWER:\tFalse\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL:\t-LargeShoes(Yuri) -> (American(Yuri) & BasketballPlayer(Yuri))\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL:\t-LargeShoes(Yuri) -> (American(Yuri) & BasketballPlayer(Yuri))\nANSWER:\tTrue\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL:\t-LargeShoes(Yuri) -> (American(Yuri) & BasketballPlayer(Yuri))\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL:\t-LargeShoes(Yuri) -> (BasketballPlayer(Yuri) & American(Yuri))\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL:\t-LargeShoes(Yuri) -> (BasketballPlayer(Yuri) & American(Yuri))\nANSWER:\tUncertain\n", "TEXT:\tSome basketball players are not American.\nFOL:\texists x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (LargeShoes(x) -> LargeClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeClothes(Yuri)\nTEXT:\tIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL:\t-LargeShoes(Yuri) -> (American(Yuri) & BasketballPlayer(Yuri))\nANSWER:\tFalse\n"], ["TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobUniversity(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobUniversity(Jack) & -WorkInLab(Jack)\nTEXT:\tJames does not have a part-time job offered by the university.\nFOL:\t-PartTimeJobUniversity(James)\nANSWER:\tTrue\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (Student(x) & WorkInLibrary(x) -> -ComputerScienceStudent(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (Student(x) & HavePartTimeJob(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (Student(x) & TakeDatabaseCourse(x) -> ComputerScienceStudent(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (Student(x) & InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (Student(x) & WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tStudent(James) & WorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\tStudent(Jack) & -HavePartTimeJob(Jack) & -WorkInLab(Jack)\nTEXT:\tJames does not have a part-time job offered by the university.\nFOL:\t- HavePartTimeJob(James)\nANSWER:\tTrue\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -ComputerScienceDept(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobUniversity(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (DatabaseCourse(x) -> ComputerScienceDept(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobUniversity(Jack) & -WorkInLab(Jack)\nTEXT:\tJames does not have a part-time job offered by the university.\nFOL:\t-PartTimeJobUniversity(James)\nANSWER:\tTrue\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (Student(x) & WorkInTheLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (Student(x) & HavePartTimeJob(x) -> WorkInTheLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (Student(x) & TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (Student(x) & InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (Student(x) & WorkInTheLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tStudent(James) & WorkInTheLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-Student(Jack) & -HavePartTimeJob(Jack) & -WorkInTheLab(Jack)\nTEXT:\tJames does not have a part-time job offered by the university.\nFOL:\t-Student(James) & -HavePartTimeJob(James)\nANSWER:\tTrue\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJobByUniversity(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJobByUniversity(Jack) & -WorkInLab(Jack)\nTEXT:\tJames does not have a part-time job offered by the university.\nFOL:\t-PartTimeJobByUniversity(James)\nANSWER:\tTrue\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (Student(x) & WorkInLibrary(x) -> -FromComputerScienceDept(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (Student(x) & HavePartTimeJob(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (Student(x) & TakeDatabaseCourse(x) -> FromComputerScienceDept(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (Student(x) & InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (Student(x) & WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tStudent(James) & WorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\tStudent(Jack) & -HavePartTimeJob(Jack) & -WorkInLab(Jack)\nTEXT:\tJames does not have a part-time job offered by the university.\nFOL:\t- HavePartTimeJob(James)\nANSWER:\tTrue\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (WorkLibrary(x) -> -ComputerScienceDept(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJob(x) -> WorkLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (DatabaseCourse(x) -> ComputerScienceDept(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tWorkLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJob(Jack) & -WorkLab(Jack)\nTEXT:\tJames does not have a part-time job offered by the university.\nFOL:\t-PartTimeJob(James)\nANSWER:\tTrue\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (LibraryWorker(x) -> -CSstudent(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (PartTimeJob(x) -> LibraryWorker(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (DatabaseCourse(x) -> CSstudent(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (LabWorker(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tLabWorker(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-PartTimeJob(Jack) & -LabWorker(Jack)\nTEXT:\tJames does not have a part-time job offered by the university.\nFOL:\t-PartTimeJob(James)\nANSWER:\tTrue\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (Student(x) & WorkInLibrary(x) -> -FromCSDept(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (Student(x) & PartTimeJobUni(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (Student(x) & TakeDatabaseCourse(x) -> FromCSDept(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (Student(x) & InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (Student(x) & WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tStudent(James) & WorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\tStudent(Jack) & -PartTimeJobUni(Jack) & -WorkInLab(Jack)\nTEXT:\tJames does not have a part-time job offered by the university.\nFOL:\tStudent(James) & -PartTimeJobUni(James)\nANSWER:\tTrue\n", "TEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (Student(x) & WorkInLibrary(x) -> -FromCSDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (Student(x) & HavePartTimeJob(x) -> WorkInLibrary(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (Student(x) & TakeDatabaseCourse(x) -> FromCSDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (Student(x) & InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (Student(x) & WorkInLab(x) -> InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tStudent(James) & WorkInLab(James)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-WorkInLab(Jack) & -HavePartTimeJob(Jack)\nTEXT:\tJames does not have a part-time job offered by the university.\nFOL:\t-HavePartTimeJob(James)\nANSWER:\tTrue\n"]]